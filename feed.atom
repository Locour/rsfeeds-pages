<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>urn:2021-06-06T01:20:10.949Z</id>
    <title>osmos::feed</title>
    <updated>2021-06-06T01:20:10.949Z</updated>
    <generator>osmosfeed 1.10.2</generator>
    <link rel="alternate" href="index.html"/>
    <entry>
        <title type="html"><![CDATA[Deploying Azure Data Factory using Bicep]]></title>
        <id>https://dev.to/willvelida/deploying-azure-data-factory-using-bicep-1c51</id>
        <link href="https://dev.to/willvelida/deploying-azure-data-factory-using-bicep-1c51"/>
        <updated>2021-06-05T23:27:14.000Z</updated>
        <summary type="html"><![CDATA[So after a long break (caused by a combination of laziness and actually being busy), I'm attempting to get back into creating more video content.
In this video, I'm using Bicep to deploy Azure Data Factory! Bicep is Domain Specific Language for deploying resources to Azure and is a HUGE improvement over ARM templates.




I've been trying to learn Bicep for my new job. Usually when it comes to Infrastructure code, I'd opt for Terraform since that's the first IaC tool I learnt. In my new role, I'm using ARM a lot more.
To be honest, I never really liked ARM. Messing about with JSON files wasn't my idea of fun, so when I first saw Bicep I was keen to give it a go.
I'm also planning to do more content with Azure Data Factory, so I'd thought it be good to make a video combining the two.
If you have any questions about the video, feel free to comment here or on YouTube.]]></summary>
        <author>
            <name>Will Velida</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Set up your own Angular schematics in no time with ngx-cli-toolkit]]></title>
        <id>https://dev.to/kroeder/set-up-your-own-angular-schematics-in-no-time-with-ngx-cli-toolkit-27ec</id>
        <link href="https://dev.to/kroeder/set-up-your-own-angular-schematics-in-no-time-with-ngx-cli-toolkit-27ec"/>
        <updated>2021-06-05T23:13:01.000Z</updated>
        <summary type="html"><![CDATA[If you are familiar with Angular, you might already know how to use ng update, ng add or ng generate. Every time you execute those commands, a so-called schematic gets executed.
Schematics are a great way to save developers hours of work on reading migration guides or copying boilerplate code from one place to another. On top of that, they are a great way to ship best practices.
So, how do we write our schematics now? Unfortunately, it is not yet as easy as you might think. You can create a blank schematics project like this:
npm install -g @angular-devkit/schematics-cli
schematics blank hello-world

The schematics-cli creates a pre-configured project for you with a ready-to-use ng generate schematic. Everything from that point on needs to be done manually and leaves a lot of open question…]]></summary>
        <author>
            <name>Kai Röder</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[DevOps – The Stakeholders]]></title>
        <id>https://dev.to/chris_l_ayers/devops-the-stakeholders-4gbl</id>
        <link href="https://dev.to/chris_l_ayers/devops-the-stakeholders-4gbl"/>
        <updated>2021-06-05T20:55:36.000Z</updated>
        <summary type="html"><![CDATA[When I talk about DevOps, I usually don’t focus on the things like pipelines or automation. While these topics and activities can be part of DevOps, there is so much more to it. I’m sure this will be a multipart blog series so lets get started.
Let’s make sure we are all on the same page. The definition of DevOps that I love and subscribe to was coined by Donovan Brown at Microsoft.
DevOps is the union of people, process, and products to enable continuous delivery of value to our end users.
This definition and the thought process behind it really drives how I was taught about DevOps and try to practice it today. DevOps is a culture or mindset that really should drive how value is delivered at an organization. DevOps should not be a Developer only or "DevOps" only activity, this mindset sho…]]></summary>
        <author>
            <name>Chris Ayers</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Create a Laravel & Any Front-end Development Stack🐱‍🏍]]></title>
        <id>https://dev.to/aeweda/create-a-laravel-any-front-end-development-stack-3i53</id>
        <link href="https://dev.to/aeweda/create-a-laravel-any-front-end-development-stack-3i53"/>
        <updated>2021-06-05T20:33:31.000Z</updated>
        <summary type="html"><![CDATA[Table Of Contents



Introduction
Requirements
Preparing Laravel Backend Api
Folder Structure
Choosing Your Favorite Front-end
.env As a Blueprint
Preparing Docker Images
php, php-fpm config
nginx Config
Connecting Everything
Create The init Script
Create a CLI
Create The Repo
Improvements
TL;DR



The purpose of this guide is to make your application as easy as possible to self deploy on the developers side without them bothering with installing mysql, nginx, and a ton of stuff just to start doing what they do best.



Before we start, we're gonna need a few dependencies to get this project underway
Docker
To install Docker & Docker-Compose simply use the following commands
# Install Docker
$ curl -fsSL https://get.docker.com -o get-docker.sh
$ sudo sh get-docker.sh
$ sudo groupadd docker…]]></summary>
        <author>
            <name>aeweda</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Learning to get unattached]]></title>
        <id>https://dev.to/lbugasu/learning-to-get-unattached-24j9</id>
        <link href="https://dev.to/lbugasu/learning-to-get-unattached-24j9"/>
        <updated>2021-06-05T19:45:08.000Z</updated>
        <summary type="html"><![CDATA[I recently joined a team working on an Angular project (more about that later) but also had to deal with trying to find a place to live. Yes, at the moment, I am a nomad who decided I would travel to different cities before I settle down somewhere later in the summer. 
I recently had that feeling of having worked placed so much effort in learning something and finally have the opportunity to use this newly acquired skill. In my case, I was finally getting the hang of using NGRX for state management on an angular application until I realized that all of the state in the application I was working on was using Services and RXJS 🤯. 
And because I very well understood how to use NGRX, it was compelling to see how others had implemented state management without the need for an external library. Needless to say, this was one place I needed to take a step back in order to be reminded that there's always more than one way to tackle a hurdle or issue. 
As of now, I will have to delay my desire to have the ideal workstation, and learn how to develop in any space I environment as I travel to different places - and much of this will require a certain level of unlearning and establishing habits that help me become a better developer and person. I have taken to early morning runs/walks to break the monotony of my sun-light deprived room and bumped into this little gift:

Look out for Blog posts every Saturday🎏 and Technical articles every Wednesday✨
Cover Photo by Simone Hutsch on Unsplash]]></summary>
        <author>
            <name>Laurence Ininda</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[The hidden CloudWatch Metric Filter Debugger]]></title>
        <id>https://dev.to/aws-builders/the-hidden-cloudwatch-metric-filter-debugger-2efc</id>
        <link href="https://dev.to/aws-builders/the-hidden-cloudwatch-metric-filter-debugger-2efc"/>
        <updated>2021-06-05T19:42:35.000Z</updated>
        <summary type="html"><![CDATA[Today I want to zoom in on CloudWatch Metric Filters. I've been a loyal CloudWatch user for years but only recently I stumbled upon the "hidden" CloudWatch Metric Filter Debugger. You can imagine the surprise on my face 😲. This debugger is a hidden gem that helps write and test metric filter Patterns.
If you're not familiar with CloudWatch Metric Filters:
Metric filters define the terms and patterns to look for in log data as it is sent to CloudWatch Logs. CloudWatch Logs uses these metric filters to turn log data into numerical CloudWatch metrics that you can graph or set an alarm on.
With a proper Metric Filter and alarm in place, you get notified whenever a particular message is logged to CloudWatch. The hardest part of the setup is writing the filter pattern itself. A correct pattern …]]></summary>
        <author>
            <name>Gert Leenders</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Lit Simple Starter Kit with Vitejs+TypeScript]]></title>
        <id>https://dev.to/herberthobregon/lit-simple-starter-kit-with-vitejs-typescript-2188</id>
        <link href="https://dev.to/herberthobregon/lit-simple-starter-kit-with-vitejs-typescript-2188"/>
        <updated>2021-06-05T18:51:25.000Z</updated>
        <summary type="html"><![CDATA[lang: es | en
When starting with a new framework or super class such as Lit Element, Vue, React or angular, we find "starter kits" that have too much information that in principle is not useful or we do not know what certain files are for.
Today we have many configuration files which make Web development more complex but at the same time more robust.
The idea of ​​this post is to introduce new developers to Lit with a fairly simple template that allows them to play with it locally and after playing with it for a while and you understand how everything works, you can start integrating more configurations to the project .
I highly recommend using typescript. Programming in pure javascript in 2021 is no longer an option. I personally consider it a bad practice. If you don't know typescript ye…]]></summary>
        <author>
            <name>Herberth Obregón</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Check out my Pricing Component For React on npm.]]></title>
        <id>https://dev.to/koolkishan/check-out-my-pricing-component-for-react-on-npm-ggd</id>
        <link href="https://dev.to/koolkishan/check-out-my-pricing-component-for-react-on-npm-ggd"/>
        <updated>2021-06-05T18:15:46.000Z</updated>
        <summary type="html"><![CDATA[The pricing component is built with React and Styled Components.
You can also checkout my youtube video to learn how this component was created.




You can use the component via npm package.
https://www.npmjs.com/package/react-pricing
You can check out the live demo from this link.
Like This Article ? Check out my Other Articles.
What is Virtual DOM? How Virtual DOM works ? What is Reconciliation ? What is diffing algorithm? What makes React so fast ?
Kishan Sheth ・ Apr 27 ・ 4 min read
#react
        #javascript
        #node
        #webdev
      
Build a responsive login form using HTML and SCSS. Also learn about mixins in SCSS.
Kishan Sheth ・ May 9 ・ 4 min read
#webdev
        #html
        #css
        #react
      
Like My Articles ? Buy me A Coffee
Follow me on 
LinkedIn
GitHub
Twitter
Make sure to subscribe to the YouTube channel for more such videos. A lot of AWESOME videos are coming this month... So make sure to SUBSCRIBE to the channel for more amazing videos. SUBSCRIBE.]]></summary>
        <author>
            <name>Kishan Sheth</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Exploit Website Databases Using SQLmap]]></title>
        <id>https://dev.to/attaullahshafiq10/exploit-website-databases-using-sqlmap-46f0</id>
        <link href="https://dev.to/attaullahshafiq10/exploit-website-databases-using-sqlmap-46f0"/>
        <updated>2021-06-05T17:17:47.000Z</updated>
        <summary type="html"><![CDATA[🎩 Exploit Website Databases Using SQLmap 🎩
✨SQLmap is one of the most famous tools for SQL injection. It is pre-installed in Kali Linux so no need to download it from anywhere.
What is a SQL injection attack❓
✨SQLi is a common attack where the attacker injects and executes malicious SQL requests in order to get hold of the web databases. These attacks are common in vulnerable websites that use SQL RDBMS to store databases
So today we'll perform an SQLi attack on a vulnerable website
✅ Requirements
⭕️Kali
⭕️Knowledge on Google Dorking
✅ Steps
⭕️ Google Dork vulnerable websites
First of all we have to get a vulnerable website to perform the attack. So we'll use Google Dorking. In simple words, it means that using Google search engine, we can use some special codes in order to get some secu…]]></summary>
        <author>
            <name>Hafiz Muhammad Attaullah</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Roadmap to Become a MERN Stack developer]]></title>
        <id>https://dev.to/rafikadir/roadmap-to-become-a-mern-stack-developer-3mf9</id>
        <link href="https://dev.to/rafikadir/roadmap-to-become-a-mern-stack-developer-3mf9"/>
        <updated>2021-06-05T17:10:57.000Z</updated>
        <summary type="html"><![CDATA[MERN stands for MongoDB, Express, ReactJS, and NodeJS. MERN stack is one of the powerful and demandable stacks in Javascript.
Follow the steps below to become a MERN  developer:
Learn HTML & CSS - HTML for markup and CSS for design.


Then you have to learn JavaScript - Javascript for dynamic functionality in web applications. If you learn Javascript you can develop the front end and back end also. 


After learning Javascript you should learn DOM - It represents the page so that programs can change the document structure, style, and content. The DOM represents the document as nodes and objects. That way, programming languages can connect to the page.


Start learning ReactJS: React is a front-end javascript library. 



Congratulation ! you are now a MERN stack developer. 
So, what after you have learned MERN stack development. Look you have learned only the basics now.  You can start making some small projects. Then gradually start learning advance and make intermediate project also Portfolio website.
Next post I will share some tools that need to know as a developer.]]></summary>
        <author>
            <name>rafikadir</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[HandWritten Digit Recognizer || Tensorflow || Keras ||  OpenCV]]></title>
        <id>https://dev.to/gauravsingh9356/handwritten-digit-recognizer-1j0f</id>
        <link href="https://dev.to/gauravsingh9356/handwritten-digit-recognizer-1j0f"/>
        <updated>2021-06-05T16:55:17.000Z</updated>
        <summary type="html"><![CDATA[Hello Devs! I have completed 𝐇𝐚𝐧𝐝𝐰𝐫𝐢𝐭𝐭𝐞𝐧 𝐃𝐢𝐠𝐢𝐭 𝐑𝐞𝐜𝐨𝐠𝐧𝐢𝐭𝐢𝐨𝐧. It is my first work with TensorFlow and OpenCV together. Had a very nice experience while working on this project.

𝐍𝐞𝐭𝐰𝐨𝐫𝐤 𝐮𝐬𝐞𝐝 : 𝐂𝐨𝐧𝐯𝐨𝐥𝐮𝐭𝐢𝐨𝐧𝐚𝐥 𝐍𝐞𝐭𝐰𝐨𝐫𝐤
GitHub link]]></summary>
        <author>
            <name>Gaurav Singh</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Node.js Morgan Guide]]></title>
        <id>https://dev.to/paras594/node-js-morgan-guide-431o</id>
        <link href="https://dev.to/paras594/node-js-morgan-guide-431o"/>
        <updated>2021-06-05T16:26:54.000Z</updated>
        <summary type="html"><![CDATA[Any server or application needs some kind of logging system. It is common to skip logging in personal or practice project. But it is a must to have a fairly robust logging system in production ready servers and apps. 
Benefits of a logging system:
Logs are used by product managers and UX designers for planning & design.
It helps marketers track performance of various features related to advertising campaigns.
It gives us the idea of how much traffic is the application getting.
Track errors, attacks and unsuccessful requests in production.
Morgan is a logging package for node.js. It can generate log files for all the traffic that comes to your server. It has some cool tricks to help us in both development and production. So let's get started. 
Install Morgan
$ npm install morgan --save

Bas…]]></summary>
        <author>
            <name>Paras 🧙‍♂️</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Node.js Morgan Guide]]></title>
        <id>https://dev.to/paras594/node-js-morgan-guide-431o</id>
        <link href="https://dev.to/paras594/node-js-morgan-guide-431o"/>
        <updated>2021-06-05T16:26:54.000Z</updated>
        <summary type="html"><![CDATA[Any server or application needs some kind of logging system. It is common to skip logging in personal or practice project. But it is a must to have a fairly robust logging system in production ready servers and apps. 
Benefits of a logging system:
Logs are used by product managers and UX designers for planning & design.
It helps marketers track performance of various features related to advertising campaigns.
It gives us the idea of how much traffic is the application getting.
Track errors, attacks and unsuccessful requests in production.
Morgan is a logging package for node.js. It can generate log files for all the traffic that comes to your server. It has some cool tricks to help us in both development and production. So let's get started. 
Install Morgan
$ npm install morgan --save

Bas…]]></summary>
        <author>
            <name>Paras 🧙‍♂️</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Best Practices for Building a Microservices Architecture]]></title>
        <id>https://dev.to/srajangupta__/best-practices-for-building-a-microservices-architecture-2076</id>
        <link href="https://dev.to/srajangupta__/best-practices-for-building-a-microservices-architecture-2076"/>
        <updated>2021-06-05T16:25:26.000Z</updated>
        <summary type="html"><![CDATA[In this video, we shall be looking into some best practices that will help us build great microservices.]]></summary>
        <author>
            <name>Srajan Gupta</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Understanding Morgan]]></title>
        <id>https://dev.to/ekqt/understanding-morgan-47p1</id>
        <link href="https://dev.to/ekqt/understanding-morgan-47p1"/>
        <updated>2021-06-05T15:03:13.000Z</updated>
        <summary type="html"><![CDATA[What is Morgan?
Morgan is an HTTP request logger middleware for node.js typically used for Express apps. Express is a fast, unopinionated, minimalistic routing and middleware web framework for node. An Express app is literally a series of middleware function calls. However, before diving into Morgan, first we need to understand what are middleware functions.
An Express app is literally a series of middleware function calls.
Middleware functions are functions that have access to the request object (req), the response object (res), and the next middleware function in the application's request-response cycle (commonly denoted by a variable named next()).
Let's take a look at these three function arguments:
Request object (req): represents the HTTP request and has properties for the request qu…]]></summary>
        <author>
            <name>Hector Sosa</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Modern Application for your Linux Distribution]]></title>
        <id>https://dev.to/cmmon/modern-application-for-your-linux-distribution-1oil</id>
        <link href="https://dev.to/cmmon/modern-application-for-your-linux-distribution-1oil"/>
        <updated>2021-06-05T14:25:03.000Z</updated>
        <summary type="html"><![CDATA[https://cmmon.medium.com/top-modern-ui-application-for-your-linux-distribution-ad848e30cdc3]]></summary>
        <author>
            <name>C-mmon</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Create a fully typesafe GraphQL API with Nodejs, Typescript and Prisma]]></title>
        <id>https://dev.to/angad777/create-a-fully-typesafe-graphql-api-with-nodejs-typescript-and-prisma-3c59</id>
        <link href="https://dev.to/angad777/create-a-fully-typesafe-graphql-api-with-nodejs-typescript-and-prisma-3c59"/>
        <updated>2021-06-05T13:56:37.000Z</updated>
        <summary type="html"><![CDATA[Prisma is a modern object relational mapper (ORM) that lets you build new greenfield projects at high speed with few errors, it also has an introspect feature which can be used on existing databases to generate a schema.
Node.js ≥ 14.17.0 (LTS)
Typescript
Apollo Server
Prisma
GraphQL
Node Package Manager
For the purposes of this demo, we'll model a very basic database for a sneaker store and expose some of the data via a graphql api.
mkdir graphql-node-typescript-prisma
npm init -y
npx tsc --init

npm i apollo-server graphql

npm i ts-node ts-node-dev typescript @types/node prisma -D

We'll use ts-node-dev for hot reloading capabilities whilst we develop, you can also choose to use nodemon if thats what you prefer.
  "scripts": {
    "compile": "tsc",
    "dev": "ts-node-dev src/app/main",…]]></summary>
        <author>
            <name>Angad Gupta</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Create a fully typesafe GraphQL API with Nodejs, Typescript and Prisma]]></title>
        <id>https://dev.to/angad777/create-a-fully-typesafe-graphql-api-with-nodejs-typescript-and-prisma-3c59</id>
        <link href="https://dev.to/angad777/create-a-fully-typesafe-graphql-api-with-nodejs-typescript-and-prisma-3c59"/>
        <updated>2021-06-05T13:56:37.000Z</updated>
        <summary type="html"><![CDATA[Prisma is a modern object relational mapper (ORM) that lets you build new greenfield projects at high speed with few errors, it also has an introspect feature which can be used on existing databases to generate a schema.
Node.js ≥ 14.17.0 (LTS)
Typescript
Apollo Server
Prisma
GraphQL
Node Package Manager
For the purposes of this demo, we'll model a very basic database for a sneaker store and expose some of the data via a graphql api.
mkdir graphql-node-typescript-prisma
npm init -y
npx tsc --init

npm i apollo-server graphql

npm i ts-node ts-node-dev typescript @types/node prisma -D

We'll use ts-node-dev for hot reloading capabilities whilst we develop, you can also choose to use nodemon if thats what you prefer.
  "scripts": {
    "compile": "tsc",
    "dev": "ts-node-dev src/app/main",…]]></summary>
        <author>
            <name>Angad Gupta</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Reasons to use Typescript]]></title>
        <id>https://dev.to/sergchr/reasons-to-use-typescript-1ig6</id>
        <link href="https://dev.to/sergchr/reasons-to-use-typescript-1ig6"/>
        <updated>2021-06-05T13:15:26.000Z</updated>
        <summary type="html"><![CDATA[Typescript is a superset of Javascript. It's Javascript with type definitions and the code will be checked when compiling.
Why to adopt TS if ...
We can code fast with Javascript. The language is simple and allows us to do a lot of things. A prototyping time can be amazingly short. A downside of this is code readability. If we need to prototype something quickly to understand if the idea is viable, we skip thinking about architecture, writing documentation, tests. Eventually, we have a working piece. It has some bugs, but they can be fixed relatively fast. The piece is doing its intended job, we add more functionality to it, but some problems start to emerge.
To add a simple functionality, it's hard to understand whether some service passes you an object with 20 fields, a string, or it may…]]></summary>
        <author>
            <name>Sergiy</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[How Fuzzing with QEMU (and AFL) Works]]></title>
        <id>https://dev.to/galtashma/how-fuzzing-with-qemu-and-afl-works-4og0</id>
        <link href="https://dev.to/galtashma/how-fuzzing-with-qemu-and-afl-works-4og0"/>
        <updated>2021-06-05T13:03:18.000Z</updated>
        <summary type="html"><![CDATA[Whats a Fuzzer?


A fuzzer now-days is a automated testing tool to find security bugs. It does so by generating many inputs to be executed until on of them crashes the target program. In other words the objective is to crash a program, but how can we guide the fuzzer in the right direction? 
AFL added to the objective a notion of code coverage: Any input that reaches an area in the code that was unreachable before is interesting. Even if it did not crash the program we can mutate that input to get even more coverage, we call this feedback. Over the past years coverage had proved to be a great feedback mechanism, but collecting it was not simple if one did not own the source code of the target binary.
AFL originally used compile time instrumentation to insert assembly instructions at the be…]]></summary>
        <author>
            <name>Gal</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Deploying Your React or Vue Project To Glitch]]></title>
        <id>https://dev.to/dro1/deploying-your-react-or-vue-project-to-glitch-35kj</id>
        <link href="https://dev.to/dro1/deploying-your-react-or-vue-project-to-glitch-35kj"/>
        <updated>2021-06-05T12:18:24.000Z</updated>
        <summary type="html"><![CDATA[TL; DR Build your project and serve the dist folder from a server
Like me, you may have tried to deploy your React or Vue app to Glitch and failed :) but I found a way out. Thinking about it, your project build will consist of plain ol' JS, HTML and CSS files(and images). All you have to do is spin up a server to serve those files. 
npm run build

or whatever command you have set in your package.json file. This should spit out a dist folder containing your files in the root directory of your project.
Now, spinning up a server might seem like a lot of work, but with Express( a Node.js framework), it's relatively easy. First, we have to install the Express package.
npm install express

Then create an app.js file and add the following lines of code.
const express = require("express");
const path = require("path");

const app = express();

app.use(express.static(path.join(__dirname, "dist")));

app.use((req, res) => {
  res.sendFile(path.join(__dirname, "dist", "index.html"));
});

app.listen(process.env.PORT || 3000, () => {
  console.log("Server Started");
});

The code above sets up the server and sends your files whenever a request is made to the server.
To deploy to Glitch, simply log in, create a new project and import your code from Github. Glitch would handle the rest from there on out. However, if you want to watch how it progresses, you can click Tools > Logs.
Repo Link(Vue Project):  Here 
You can reach out to me on Twitter
Thank You.]]></summary>
        <author>
            <name>theDro</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Make fzf your best friend inside terminal]]></title>
        <id>https://dev.to/chhajedji/make-fzf-your-best-friend-inside-terminal-iod</id>
        <link href="https://dev.to/chhajedji/make-fzf-your-best-friend-inside-terminal-iod"/>
        <updated>2021-06-05T11:56:28.000Z</updated>
        <summary type="html"><![CDATA[Fuzzy finder is one of the best tool which you can use for speeding up your daily terminal work flow. In my daily workflow, I have integrated fzf in most of the tasks where I have many choices and have to choose one among them, whether be it changing a git branch, searching and opening a file, changing directory or changing a project.
Let's get started to exploit some features of fzf 😈
Probably your package manager already has it. If it doesn't, don't worry, just clone the git repo and run the install script as directed here.
You can check if the installation has been successful by running the command whereis fzf. You should see the location of binary.
Make sure to read the README.md from the project's Github. It explains fzf and some of it's usage quite well. Specially the key-binding pa…]]></summary>
        <author>
            <name>chinmay chhajed</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Typescript: String Enums, the easy way]]></title>
        <id>https://dev.to/mandraketech/typescript-string-enums-the-easy-way-1ke4</id>
        <link href="https://dev.to/mandraketech/typescript-string-enums-the-easy-way-1ke4"/>
        <updated>2021-06-05T11:30:48.000Z</updated>
        <summary type="html"><![CDATA[The most common use cases for an enum are:
Keys and associated non-string values 
Keys, and string values that match the keys
Now, don't read this wrong. I just don't want to replicate everything that is written in the Typescript Handbook ( https://www.typescriptlang.org/docs/handbook/enums.html )
The first one is adequately handled in Typescript. Just by using:
enum MyEnum {
  first,
  second,
  third
}

But the second case looks more like this:
enum MyStringEnum {
  first = 'first',
  second = 'second',
  third = 'third'
}

As the number of values  increase, it starts getting difficult to manage. And I see lot of boilerplate here. Also, there is scope for mistakes. For example, it is possible to get into this situation:
enum MyStringEnum {
  first = 'fifth',
  second = 'second',
  third …]]></summary>
        <author>
            <name>Navneet Karnani</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Simple Remote Code Execution on EJS Web Applications with express-fileupload]]></title>
        <id>https://dev.to/boiledsteak/simple-remote-code-execution-on-ejs-web-applications-with-express-fileupload-3325</id>
        <link href="https://dev.to/boiledsteak/simple-remote-code-execution-on-ejs-web-applications-with-express-fileupload-3325"/>
        <updated>2021-06-05T11:18:36.000Z</updated>
        <summary type="html"><![CDATA[TLDR with no explaination
As an IT / cybersecurity student, I heavily relied on searching online for guides and forums to help me with my assignments. So this is me giving back to the community 😄
In this post I will explain how to exploit a vulnerability in an older version of a NodeJS library to enable RCE. Many concepts and technologies used will require an
intermmediate level of hands-on knowledge of cybersecurity
I will not explain every term. The entire process is quite simple. If you are unfamiliar with anything, try read it up. Everything mentioned is fairly common.
This Proof of Concept (POC) is a simple example of RCE. Good for demonstrating RCE to an audience without technical knowledge. I doubt it can be used in the wild for penetration testing or for any malicious purposes. In…]]></summary>
        <author>
            <name>boiledsteak</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Simple Remote Code Execution on EJS Web Applications with express-fileupload]]></title>
        <id>https://dev.to/boiledsteak/simple-remote-code-execution-on-ejs-web-applications-with-express-fileupload-3325</id>
        <link href="https://dev.to/boiledsteak/simple-remote-code-execution-on-ejs-web-applications-with-express-fileupload-3325"/>
        <updated>2021-06-05T11:18:36.000Z</updated>
        <summary type="html"><![CDATA[TLDR with no explaination
As an IT / cybersecurity student, I heavily relied on searching online for guides and forums to help me with my assignments. So this is me giving back to the community 😄
In this post I will explain how to exploit a vulnerability in an older version of a NodeJS library to enable RCE. Many concepts and technologies used will require an
intermmediate level of hands-on knowledge of cybersecurity
I will not explain every term. The entire process is quite simple. If you are unfamiliar with anything, try read it up. Everything mentioned is fairly common.
This Proof of Concept (POC) is a simple example of RCE. Good for demonstrating RCE to an audience without technical knowledge. I doubt it can be used in the wild for penetration testing or for any malicious purposes. In…]]></summary>
        <author>
            <name>boiledsteak</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Instant Export Design to Code. New Tool.]]></title>
        <id>https://dev.to/ivanoff_io/instant-export-design-to-code-new-tool-43o5</id>
        <link href="https://dev.to/ivanoff_io/instant-export-design-to-code-new-tool-43o5"/>
        <updated>2021-06-05T11:09:13.000Z</updated>
        <summary type="html"><![CDATA[Hi!
My name is Nick, I'm CEO of Sizze. We recently launched a project that makes life easier for designers and developers.
Sizze is a platform where you can design an application and get clean ready code.
Sizze has a very simple mission to automate the front-end development process, Sizze converts designs into React Native and Flutter code. There is integration of files from Figma. You can convert a design to code with a huge number of screens in a minute with no loss of quality. You can convert a design to code with a huge number of screens in a minute with no loss of quality. You can convert a design to code with a huge number of screens in a minute with no loss of quality.  Sizze has a large number of ready-made components from which you can quickly build an application.
I would be glad if you would register and give feedback on our product
Website link:
https://sizze.io/
YouTube link where the cases are:
https://www.youtube.com/channel/UCIPpu4ruP_2Cc5AR1e0Y4ZQ]]></summary>
        <author>
            <name>Niсk</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python development environment in a Docker container]]></title>
        <id>https://dev.to/mikecase/python-development-environment-in-a-docker-container-4hg8</id>
        <link href="https://dev.to/mikecase/python-development-environment-in-a-docker-container-4hg8"/>
        <updated>2021-06-05T09:46:24.000Z</updated>
        <summary type="html"><![CDATA[Purpose


Create and setup a python development environment inside of docker in 5 minutes. (Also more or less a journal to myself of how to do this)
You will need to understand virtual environments with python. I will place the commands that are needed for setting up the virtual environment but will not expand upon them. 
Python 3.8 is the version I'll be using in this tutorial.
fastapi
hypercorn
a few files will need to be created.
main.py
Dockerfile
.dockerignore
docker-compose.yml
The following commands will install and create the files you need.
mkdir -p ~/projects/myproject
cd ~/projects/myproject
touch main.py Dockerfile .dockerignore docker-compose.yml

Above we create the project directory and the initial files we'll need for the app.
python3.8 -m venv .venv
source .venv/bin/python…]]></summary>
        <author>
            <name>Mike</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Five Pro Tips to Master Promises in JS]]></title>
        <id>https://dev.to/valeriavg/five-pro-tips-to-master-promises-in-js-c2h</id>
        <link href="https://dev.to/valeriavg/five-pro-tips-to-master-promises-in-js-c2h"/>
        <updated>2021-06-05T09:25:36.000Z</updated>
        <summary type="html"><![CDATA[Events handling and promises in particular are hands down the best JavaScript feature. You're probably familiar with the concept itself, but in short, a Promise in JavaScript is a promise to call back with the result. 
Therefore, a promise can be constructed with two functions: one to be called on success and the other - in case of error. Here is a promise that would randomly fail or reject after one second:
const promise = new Promise((resolve, reject) => {
  setTimeout(() => {
    const randomBool = Math.random() > 0.5;
    console.log(randomBool);
    // Return any value, or no value at all
    if (randomBool) resolve("I am resolved!");
    // Reject with an error, some value or nothing at all
    else reject("On no!");
  }, 1_000);
});

Try this in your browser console or in node repl …]]></summary>
        <author>
            <name>Valeria</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Object Oriented Programming with TypeScript]]></title>
        <id>https://dev.to/kevin_odongo35/object-oriented-programming-with-typescript-574o</id>
        <link href="https://dev.to/kevin_odongo35/object-oriented-programming-with-typescript-574o"/>
        <updated>2021-06-05T07:39:53.000Z</updated>
        <summary type="html"><![CDATA[Hey Dev's
How has been your week? I hope everyone had a great week. In todays tutorial let us go through Object Oriented Programming (OOP). 
Object Oriented programming (OOP) is a programming paradigm that relies on the concept of classes and objects. It is used to structure a software program into simple, reusable pieces of code blueprints (usually called classes), which are used to create individual instances of objects
Object programming is well-suited for programs that are large, complex and actively updated or maintained.
The Object class represents one of JavaScript's data types. It is used to store various keyed collections and more complex entities. Objects can be created using the Object() constructor or the object initializer / literal syntax.
Below is an example of an object cla…]]></summary>
        <author>
            <name>Kevin Odongo</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[The Examination Day]]></title>
        <id>https://dev.to/eden_jose08/the-examination-day-3p02</id>
        <link href="https://dev.to/eden_jose08/the-examination-day-3p02"/>
        <updated>2021-06-05T06:28:51.000Z</updated>
        <summary type="html"><![CDATA[Sharing my notes and thoughts about the AWS SysOps Administrator Associate Exam.
Before anything else, I'd like to say that it is extremely helpful to take the AWS Solutions Architect Associate Exam first before diving into the other two Associate exams (SysOps Associate and Developer). You'll get a good sense of how each services of AWS functions and how they are used when building solutions.
Just like with any skills, it is essential to start with the essentials. Learn the theory, play around, break things, and fix them afterwards. When you have a good grasp on architecting solutions, you can move on to learning how to maintain them. This is where the SysOps Administrator Associate comes in.

As a background, I started my work in IT Networking and handled routers and switches, and networ…]]></summary>
        <author>
            <name>Eden</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[I changed my master passwords (and thoughts)]]></title>
        <id>https://dev.to/patarapolw/i-changed-my-master-passwords-and-thoughts-2agp</id>
        <link href="https://dev.to/patarapolw/i-changed-my-master-passwords-and-thoughts-2agp"/>
        <updated>2021-06-05T06:00:05.000Z</updated>
        <summary type="html"><![CDATA[Trick is, use TWO password managers
First one is server-based BitWarden
Second one is file-based KeePassDX, with passphrase generator (actually, I tweaked this myself)
Then, use the passphrase generator in second password manager, BUT DON't use it directly.
Instead, modify the passphrase, or make variations to your likings; so as to make more memorable and funny. (Then store all master password variations.)
I do have a question, though.
How long should MASTER password, that you type in (not copy) often, be?
Next step, is generating PINs, probably - this one is also highly reused.]]></summary>
        <author>
            <name>Pacharapol Withayasakpunt</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Angular : How to add A fully customizable, one-time password input component in your angular app just in 10 minutes?]]></title>
        <id>https://dev.to/rajeshkumaryadavdotcom/angular-how-to-add-a-fully-customizable-one-time-password-input-component-in-your-angular-app-just-in-10-minutes-n29</id>
        <link href="https://dev.to/rajeshkumaryadavdotcom/angular-how-to-add-a-fully-customizable-one-time-password-input-component-in-your-angular-app-just-in-10-minutes-n29"/>
        <updated>2021-06-05T03:45:51.000Z</updated>
        <summary type="html"><![CDATA[You can use this component in your app and extend it to SMS API, here I will skip API part as it varies from sms provider to provider.  
Let's begin to learn how to add otp component in your angular app.  
npm install --save ng-otp-input

NgOtpInputModule to imports app.module.ts something like





import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { AppComponent } from './app.component';
import { NgOtpInputModule } from 'ng-otp-input';

@NgModule({ 
declarations: [AppComponent], 
imports: [BrowserModule, NgOtpInputModule], 
bootstrap: [AppComponent] 
})

Here in your existing app you have to add import { NgOtpInputModule } from 'ng-otp-input'; near all existing imports and then add imports in NgModule as NgOtpInputModule with your …]]></summary>
        <author>
            <name>Rajesh Kumar Yadav</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Angular : How to add A fully customizable, one-time password input component in your angular app just in 10 minutes?]]></title>
        <id>https://dev.to/rajeshkumaryadavdotcom/angular-how-to-add-a-fully-customizable-one-time-password-input-component-in-your-angular-app-just-in-10-minutes-n29</id>
        <link href="https://dev.to/rajeshkumaryadavdotcom/angular-how-to-add-a-fully-customizable-one-time-password-input-component-in-your-angular-app-just-in-10-minutes-n29"/>
        <updated>2021-06-05T03:45:51.000Z</updated>
        <summary type="html"><![CDATA[You can use this component in your app and extend it to SMS API, here I will skip API part as it varies from sms provider to provider.  
Let's begin to learn how to add otp component in your angular app.  
npm install --save ng-otp-input

NgOtpInputModule to imports app.module.ts something like





import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { AppComponent } from './app.component';
import { NgOtpInputModule } from 'ng-otp-input';

@NgModule({ 
declarations: [AppComponent], 
imports: [BrowserModule, NgOtpInputModule], 
bootstrap: [AppComponent] 
})

Here in your existing app you have to add import { NgOtpInputModule } from 'ng-otp-input'; near all existing imports and then add imports in NgModule as NgOtpInputModule with your …]]></summary>
        <author>
            <name>Rajesh Kumar Yadav</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Automate emails using Google API]]></title>
        <id>https://dev.to/saniadsouza/automate-emails-using-google-api-1hk2</id>
        <link href="https://dev.to/saniadsouza/automate-emails-using-google-api-1hk2"/>
        <updated>2021-06-05T01:42:07.000Z</updated>
        <summary type="html"><![CDATA[The Gmail API provides a neat way to automate email tasks such as reading and sending among others. This piece illustrates how you could read emails and create and send them, all automatically. 
Automated emails could be used as a part of a larger process of automating routine maintenance tasks for example. In my case, the intent is to download a CSV file which is sent in an email, process it and send the result as an email. 
Set-up your system to work with the Gmail API
Read an email and download CSV from it 
Create email body and send email to concerned recipient
You can read about all of it from here. There are language-specific guides to enable the Gmail API on your Google ID; I chose Node. 
Open the terminal in your machine or use a code editor (I am using VSCode). Familiarity with no…]]></summary>
        <author>
            <name>sania-dsouza</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[SRE Newsletter Issue #30]]></title>
        <id>https://dev.to/mrkevbot/sre-newsletter-issue-30-40m1</id>
        <link href="https://dev.to/mrkevbot/sre-newsletter-issue-30-40m1"/>
        <updated>2021-06-05T01:38:01.000Z</updated>
        <summary type="html"><![CDATA[For the past 6 months, I've been gathering the best DevOps and Site Reliability Engineering articles that were published during the previous week. I wanted to share this with the dev.to group.
In this issue of the SRE Newsletter:
A Visual DevOps Career Roadmap
Docker Best Practices
Config Changes Break Everything
and more!
https://www.srenewsletter.com/issues/030/]]></summary>
        <author>
            <name>Kevin Jordan</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Deploy de Proyecto en Angular a IIS]]></title>
        <id>https://dev.to/dannymeza24/subir-proyecto-de-angular-a-iis-3p4p</id>
        <link href="https://dev.to/dannymeza24/subir-proyecto-de-angular-a-iis-3p4p"/>
        <updated>2021-06-05T00:17:37.000Z</updated>
        <summary type="html"><![CDATA[Preparar entorno para el deploy






  
  
  Instalar URL Rewrite:



 
Aparecerá la siguiente pantalla:

Coloca el nombre del sitio
La ruta donde se almacenarán los archivos de la publicación del proyecto
Y por último, el puerto. Y "Aceptar"

Saldrá la siguiente pantalla

Colocas el Alias
La ruta de acceso al directorio donde irán los archivos de la publicación del proyecto.
Por último, "Aceptar"
Deberás ver tu sitio y tu aplicación:
 
Si ya se realizó la instalación del URL Rewrite. Deberá verse la opción dentro del Administrador IIS:

Ahora el entorno está listo.
Dentro del directorio src debe crear un archivo web.config Que resolverá las rutas de la APP. 
web.config
<configuration>
  <system.webServer>
    <rewrite>
      <rules>
      <clear /> <!-- Imperative Step, otherwise IIS wil…]]></summary>
        <author>
            <name>Daniel Mezagini</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Deploy de Proyecto en Angular a IIS]]></title>
        <id>https://dev.to/dannymeza24/subir-proyecto-de-angular-a-iis-3p4p</id>
        <link href="https://dev.to/dannymeza24/subir-proyecto-de-angular-a-iis-3p4p"/>
        <updated>2021-06-05T00:17:37.000Z</updated>
        <summary type="html"><![CDATA[Preparar entorno para el deploy






  
  
  Instalar URL Rewrite:



 
Aparecerá la siguiente pantalla:

Coloca el nombre del sitio
La ruta donde se almacenarán los archivos de la publicación del proyecto
Y por último, el puerto. Y "Aceptar"

Saldrá la siguiente pantalla

Colocas el Alias
La ruta de acceso al directorio donde irán los archivos de la publicación del proyecto.
Por último, "Aceptar"
Deberás ver tu sitio y tu aplicación:
 
Si ya se realizó la instalación del URL Rewrite. Deberá verse la opción dentro del Administrador IIS:

Ahora el entorno está listo.
Dentro del directorio src debe crear un archivo web.config Que resolverá las rutas de la APP. 
web.config
<configuration>
  <system.webServer>
    <rewrite>
      <rules>
      <clear /> <!-- Imperative Step, otherwise IIS wil…]]></summary>
        <author>
            <name>Daniel Mezagini</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Publish Test Results on Azure Pipeline for Angular project]]></title>
        <id>https://dev.to/rupeshtiwari/publish-test-results-on-azure-pipeline-for-angular-project-5gi0</id>
        <link href="https://dev.to/rupeshtiwari/publish-test-results-on-azure-pipeline-for-angular-project-5gi0"/>
        <updated>2021-06-05T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Are you wondering how to publish Test Results over Azure CI Build while using Angular and JEST? In this article I will demonstrate nx monorepo publishing test results using azure pipeline.
If you are u are using Karma Test Runner then read my previous article Publishing Nx Monorepo Test Results in Azure CI Pipeline.

I am using Azure CI build to build, test and deploy my Angular App.
We will use Azure Task PublishTestResults@2 to publish our angular test results to Azure Pipelines.
As of now Azure Task only supports below Test Result formats:
JUnit
NUnit
VSTest
xUnit
cTest
We will use JUnit format to publish Angular Test Result. Also just let you know that Azure The default option uses JUnit format to publish test results.
When we run test in Angular App Test Results files are supposed to …]]></summary>
        <author>
            <name>Rupesh Tiwari</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Publish Test Results on Azure Pipeline for Angular project]]></title>
        <id>https://dev.to/rupeshtiwari/publish-test-results-on-azure-pipeline-for-angular-project-5gi0</id>
        <link href="https://dev.to/rupeshtiwari/publish-test-results-on-azure-pipeline-for-angular-project-5gi0"/>
        <updated>2021-06-05T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Are you wondering how to publish Test Results over Azure CI Build while using Angular and JEST? In this article I will demonstrate nx monorepo publishing test results using azure pipeline.
If you are u are using Karma Test Runner then read my previous article Publishing Nx Monorepo Test Results in Azure CI Pipeline.

I am using Azure CI build to build, test and deploy my Angular App.
We will use Azure Task PublishTestResults@2 to publish our angular test results to Azure Pipelines.
As of now Azure Task only supports below Test Result formats:
JUnit
NUnit
VSTest
xUnit
cTest
We will use JUnit format to publish Angular Test Result. Also just let you know that Azure The default option uses JUnit format to publish test results.
When we run test in Angular App Test Results files are supposed to …]]></summary>
        <author>
            <name>Rupesh Tiwari</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Node.js: using non-local dependencies inside native ES modules]]></title>
        <id>https://dev.to/vonheikemen/node-js-using-non-local-dependencies-inside-native-es-modules-2hdh</id>
        <link href="https://dev.to/vonheikemen/node-js-using-non-local-dependencies-inside-native-es-modules-2hdh"/>
        <updated>2021-06-04T22:54:06.000Z</updated>
        <summary type="html"><![CDATA[If you were using only CommonJS syntax you would "solve" this by using the NODE_PATH environment variable, but that won't work with native ES modules. The good news is that we can still achieve our goal. The somewhat bad news is that you won't be using the beloved import keyword. What I will show you now is how you can make your own require function that works with native ES modules.
Before I begin let me just say I do not encourage using non-local dependencies in "production apps", or libraries or really anything that is meant to be deployed on a remote server. The use case I have for this is focused more on creating scripts for personal use.
With that out the way, lets go back to what's important.
Did you know there is a module called module? Yeah, and it has everything we need. 
Node ha…]]></summary>
        <author>
            <name>Heiker</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[How to Search and Filter Components in React]]></title>
        <id>60b3480c11ffb70827ef9a88</id>
        <link href="https://www.freecodecamp.org/news/search-and-filter-component-in-reactjs/"/>
        <updated>2021-06-04T21:34:33.000Z</updated>
        <summary type="html"><![CDATA[If you're building a React app, you want your users to be able to search and get exact results. And if you are getting tons of items from an API, then you need to create a way for users to be able to find various items easily.]]></summary>
        <author>
            <name>freeCodeCamp.org</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Machine Learning in Python – The Top New Scikit-Learn 0.24 Features You Should Know]]></title>
        <id>60ba33d7acb62507dd1d9050</id>
        <link href="https://www.freecodecamp.org/news/machine-learning-python-new-scikit-learn-features-you-should-know/"/>
        <updated>2021-06-04T20:58:07.000Z</updated>
        <summary type="html"><![CDATA[Scikit-learn is one of the most popular open-source and free machine learning libraries for Python.  The scikit-learn library contains a lot of efficient tools for machine learning and statistical modeling including classification, regression, clustering, and dimensionality reduction. Many data scientists, machine learning engineers, and researchers rely on this library for]]></summary>
        <author>
            <name>freeCodeCamp.org</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Network Automation with Python + Discord Webhooks]]></title>
        <id>https://dev.to/sayf_a_cc723da8bec754a8cd/network-automation-with-python-discord-webhooks-h36</id>
        <link href="https://dev.to/sayf_a_cc723da8bec754a8cd/network-automation-with-python-discord-webhooks-h36"/>
        <updated>2021-06-04T20:49:39.000Z</updated>
        <summary type="html"><![CDATA[What are we gonna Make?


In this epic tutorial we are going to be using discord webhooks and the power of python to receive notifications for when a device on our local network (at home) goes offline.
its a cool project 
it uses the power of python and discord!
A tutorial for those wanting to flex your muscle on python and logic building. 
Let's Roll!





  
  
  Phase I - The Plan


This project is going to fully depend on logic since we are embarking on coding something that's totally hybrid, but hey!...who cares? Below you'll find the flow chart of\n how this algorithm will flow.

from discord_webhook import DiscordEmbed, DiscordWebhook 
from datetime import datetime 
import subprocess
import time 
import io 

Let's start off by preparing a function that when called upon sends a disco…]]></summary>
        <author>
            <name>Sayf A</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[How to Recover from Deployment Hell – What I Learned After My Discord Bot Crashed on a 1000+ User Server]]></title>
        <id>60b8f5c7acb62507dd1d8500</id>
        <link href="https://www.freecodecamp.org/news/recovering-from-deployment-hell-what-i-learned-from-deploying-my-discord-bot-to-a-1000-user-server/"/>
        <updated>2021-06-04T20:41:29.000Z</updated>
        <summary type="html"><![CDATA[I deployed a Discord bot to a 1000+ user server. In the first hour, Deployment Hell struck and my bot crashed. In the next hour, I brought it back, surviving and even thriving in Deployment Hell. In this post, I'll show you how.]]></summary>
        <author>
            <name>freeCodeCamp.org</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Principles for user-centered front-end development]]></title>
        <id>https://css-tricks.com/?p=341793</id>
        <link href="https://colinoakley.medium.com/the-web-we-choose-to-build-e921510e3f1b"/>
        <updated>2021-06-04T20:36:46.000Z</updated>
        <summary type="html"><![CDATA[Colin Oakley:
• Accessible — Use semantic HTML, and make sure we meet the WCAG 2.1 AA standard as a minimum and it works with assisted technologies (this sits alongside the DWP Accessibility Manual)
• Agnostic — Build 
…
The post Principles for user-centered front-end development appeared first on CSS-Tricks.
You can support CSS-Tricks by being an MVP Supporter.]]></summary>
        <author>
            <name>Chris Coyier</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[How do you create (and remember) master passwords?]]></title>
        <id>https://dev.to/patarapolw/how-do-you-create-and-remember-master-passwords-1em0</id>
        <link href="https://dev.to/patarapolw/how-do-you-create-and-remember-master-passwords-1em0"/>
        <updated>2021-06-04T20:14:18.000Z</updated>
        <summary type="html"><![CDATA[I fear to even think of creating a new master password / PIN (without relying on variation play).
I mean, practically.
Passphrase?
How many words?
I don't speak English, so which language? Non-ASCII scripts? Keyboard-layout-based? (Typing non-ASCII on QWERTY)
Does it need punctuations? How do you add them? How many?
Non-passphrase?
Next is, how long would it take to memorize it without tools / helpers? What helpers did you use?
Lastly, how many masters do you have? How closely they are related?
Related, also. How about numerical PINs?]]></summary>
        <author>
            <name>Pacharapol Withayasakpunt</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Faking UX Race Conditions using a simple Interceptor in Angular or NestJs]]></title>
        <id>https://dev.to/elandyg/faking-ux-race-conditions-using-a-simple-interceptor-in-angular-or-nestjs-51m3</id>
        <link href="https://dev.to/elandyg/faking-ux-race-conditions-using-a-simple-interceptor-in-angular-or-nestjs-51m3"/>
        <updated>2021-06-04T20:05:15.000Z</updated>
        <summary type="html"><![CDATA[see it in action - StackBlitz
Race conditions are easy to understand. They’re just like a high-five which depends on 2 people slapping hands at the same exact time. If one person is out of sync, the other may get a high-five to the face 🤦‍♂️. Boom! Race conditions explained!

In this article, we are going to talk about UX Race Conditions and using a simple interceptor to exaggerate delays from the API that you can see if you are giving your users the best experience possible.
In the classic sense, race conditions can cause bugs and unintended manipulation of your data. @vsavkin
 shows us an example of how a user can trigger a new request before the last request had finished, causing unintended data to be used.
But let's talk about the User Experience. Could the User Experience also suffer…]]></summary>
        <author>
            <name>ElAndyG</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Bundling and Distributing Next.js Sites via NPM]]></title>
        <id>https://dev.to/grouparoo/bundling-and-distributing-next-js-sites-via-npm-b6m</id>
        <link href="https://dev.to/grouparoo/bundling-and-distributing-next-js-sites-via-npm-b6m"/>
        <updated>2021-06-04T19:54:16.000Z</updated>
        <summary type="html"><![CDATA[Grouparoo uses Next.js to build our web frontend(s), and we distribute these frontend User Interfaces (UIs) via NPM as packages, e.g. @grouparoo/ui-community. This allows Grouparoo users to choose which UI they want to use (or none) by changing their package.json:
Example package.json for a Grouparoo project:
{
  "author": "Your Name <email@example.com>",
  "name": "grouparoo-application",
  "description": "A Grouparoo Deployment",
  "version": "0.0.1",
  "dependencies": {
    "@grouparoo/core": "0.3.3",
    "@grouparoo/postgres": "0.3.3",
    "@grouparoo/mailchimp": "0.3.3",
    "@grouparoo/ui-community": "0.3.3" // <-- Choose UI Package to install
  },
  "scripts": {
    "start": "cd node_modules/@grouparoo/core && ./bin/start"
  },
  "grouparoo": {
    "plugins": [
      "@grouparoo/pos…]]></summary>
        <author>
            <name>Evan Tahler</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Your nested Angular form may be better off with implementing ControlValueAccessor]]></title>
        <id>https://dev.to/ozanogreden/your-nested-angular-form-may-be-better-off-with-implementing-controlvalueaccessor-1kh9</id>
        <link href="https://dev.to/ozanogreden/your-nested-angular-form-may-be-better-off-with-implementing-controlvalueaccessor-1kh9"/>
        <updated>2021-06-04T19:46:22.000Z</updated>
        <summary type="html"><![CDATA[This post has but one message for Angular users: Your nested form implementation may be better off with a ControlValueAccessor.
I am not the first one to do this. Also see this post by @julianobrasil
. Nevertheless a disclaimer and a request: I've had about four weeks of professional Angular development experience, apply healthy skepticism with abundance. I'm writing to clarify my understanding, and give something to the community. If you think the claim is preposterous, reach out!
Now, let's get you convinced by building up a minimally realistic example.
Suppose we have a form that used to input how many customers we can accept in a given day. Initially, the form is very simple. There is one integer input field per day. The only validation requirement is that the capacity can't be smaller…]]></summary>
        <author>
            <name>Ozan Öğreden</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[An interactive combined Highcharts on Angular]]></title>
        <id>https://dev.to/priyasipxy/an-interactive-combined-highcharts-on-angular-2j80</id>
        <link href="https://dev.to/priyasipxy/an-interactive-combined-highcharts-on-angular-2j80"/>
        <updated>2021-06-04T19:18:17.000Z</updated>
        <summary type="html"><![CDATA[Hope this article will help you ... please add your claps. https://priyashisingh1.medium.com/an-interactive-combined-highcharts-on-angular-6e1e0ba99062]]></summary>
        <author>
            <name>priyashi pixy</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[An interactive combined Highcharts on Angular]]></title>
        <id>https://dev.to/priyasipxy/an-interactive-combined-highcharts-on-angular-2j80</id>
        <link href="https://dev.to/priyasipxy/an-interactive-combined-highcharts-on-angular-2j80"/>
        <updated>2021-06-04T19:18:17.000Z</updated>
        <summary type="html"><![CDATA[Hope this article will help you ... please add your claps. https://priyashisingh1.medium.com/an-interactive-combined-highcharts-on-angular-6e1e0ba99062]]></summary>
        <author>
            <name>priyashi pixy</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[NodeSecure - The future]]></title>
        <id>https://dev.to/fraxken/nodesecure-the-future-1f9c</id>
        <link href="https://dev.to/fraxken/nodesecure-the-future-1f9c"/>
        <updated>2021-06-04T19:10:44.000Z</updated>
        <summary type="html"><![CDATA[Hello 👋
Today I'm writing to tell you about the future of NodeSecure 👀.
I have not been very active in the last few months because of my job which has taken up a lot of my time. But I'm back 😊.
Moving forward and updating the project has become much more complicated 😵. So it was time to announce and make major changes.
NodeSecure is not only one tool anymore. The project is now a set of tools and packages that need to be maintained and extended. The project has also gained contributors on its way and many developers pushed me to go even further 🚀.
That's why I decided to gather these different projects in the same github organization (and same for npm with @nodesecure). It will also be easier to integrate new collaborators into the project.
The URL to our new home: https://github.com/…]]></summary>
        <author>
            <name>Gentilhomme</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Security news weekly round-up - 4th June 2021]]></title>
        <id>https://dev.to/ziizium/security-news-weekly-round-up-4th-june-2021-1inm</id>
        <link href="https://dev.to/ziizium/security-news-weekly-round-up-4th-june-2021-1inm"/>
        <updated>2021-06-04T18:43:31.000Z</updated>
        <summary type="html"><![CDATA[Oh! Yeah, I made it this week!
This week security review is mostly about research in computer security.
It was fun reading and curating these links, and I know you'll have fun reading them.
Researchers Warn of Facefish Backdoor Spreading Linux Rootkits


Who does not use Linux? No one. You might be thinking: I use a Mac or I use a PC, well, I'll take it you go online every day (like right now) and do you know the operating system running the server software of your favorite website? There is 90% chance that it is Linux.
This is a solid reason for you to read this article. But to aid you, here is an excerpt from the article with the key take-away in bold:
Facefish goes through a multi-stage infection process, which commences with a command injection against CWP to retrieve a dropper ("sshin…]]></summary>
        <author>
            <name>Habdul Hazeez</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Exhaustive pattern matching in TypeScript]]></title>
        <id>https://dev.to/hansjhoffman/exhaustive-pattern-matching-in-typescript-36oa</id>
        <link href="https://dev.to/hansjhoffman/exhaustive-pattern-matching-in-typescript-36oa"/>
        <updated>2021-06-04T18:32:48.000Z</updated>
        <summary type="html"><![CDATA[The switch statements does not enforce exhaustive pattern matching (objective), the syntax is incredibly ugly (subjective) and is a poorly designed language feature (arguably objective). Thankfully, we can eliminate the shortcomings of the switch statement and improve the quality of our code using pattern matching instead.
There is a TC39 Stage 1 pattern matching proposal for the curious types here.
Say you have a string literal union type:
type Icon = "chart" | "file-check" | "paper-plane" | "users";

and you want to conditionally render the appropriate icon so your first approach is the old trusted switch statement:
const renderIcon = (icon: Icon): JSX.Element => {
  switch (icon) {
    case "chart":
      return <ChartIcon />;
    case "file-check":
      return <FileCheckIcon />;
    c…]]></summary>
        <author>
            <name>Hans Hoffman</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Magento Security: 5 Tips To Enhance Your Online Store Security]]></title>
        <id>https://dev.to/imvtank/magento-security-5-tips-to-enhance-your-online-store-security-22p0</id>
        <link href="https://dev.to/imvtank/magento-security-5-tips-to-enhance-your-online-store-security-22p0"/>
        <updated>2021-06-04T18:07:02.000Z</updated>
        <summary type="html"><![CDATA[The Covid-19 pandemic has caused a drastic change in the lifestyle and habits of consumers. Spending more time indoors whether due to necessity or not has driven more consumers towards online shopping. E-commerce is taking over the market at a shocking rate. The e-commerce market penetration rate more than doubled during the first quarter of 2020, a feat that could have taken 10 years[1] if not for the Covid-19 outbreak. Out of those hundreds of thousands of e-commerce websites, Magento is the chosen CMS platform for almost 10%. Big brands like Nike, Coca Cola or Ford are good ambassadors for this content management system.
In comparison to other popular eCommerce platforms like WooCommerce or Shopify, Magento offers a strong advantage with its built-in security features. 
Magento 2 offers…]]></summary>
        <author>
            <name>Vivek Tank</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Magento Security: 5 Tips To Enhance Your Online Store Security]]></title>
        <id>https://dev.to/imvtank/magento-security-5-tips-to-enhance-your-online-store-security-22p0</id>
        <link href="https://dev.to/imvtank/magento-security-5-tips-to-enhance-your-online-store-security-22p0"/>
        <updated>2021-06-04T18:07:02.000Z</updated>
        <summary type="html"><![CDATA[The Covid-19 pandemic has caused a drastic change in the lifestyle and habits of consumers. Spending more time indoors whether due to necessity or not has driven more consumers towards online shopping. E-commerce is taking over the market at a shocking rate. The e-commerce market penetration rate more than doubled during the first quarter of 2020, a feat that could have taken 10 years[1] if not for the Covid-19 outbreak. Out of those hundreds of thousands of e-commerce websites, Magento is the chosen CMS platform for almost 10%. Big brands like Nike, Coca Cola or Ford are good ambassadors for this content management system.
In comparison to other popular eCommerce platforms like WooCommerce or Shopify, Magento offers a strong advantage with its built-in security features. 
Magento 2 offers…]]></summary>
        <author>
            <name>Vivek Tank</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Learn TypeScript Basics in this Beginner&#x27;s Guide]]></title>
        <id>60b2a4c611ffb70827ef9842</id>
        <link href="https://www.freecodecamp.org/news/learn-typescript-basics/"/>
        <updated>2021-06-04T18:01:00.000Z</updated>
        <summary type="html"><![CDATA[TypeScript has taken the development world by storm. No wonder it has over 15 million weekly downloads on npm. But what is TypeScript, and what do you need to know about it?  In this article, I am going answer those questions. By the end you'll have a grasp of the]]></summary>
        <author>
            <name>freeCodeCamp.org</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Influences and Nature of the Language]]></title>
        <id>https://dev.to/soyluiscorona_/influences-and-nature-of-the-language-4hjd</id>
        <link href="https://dev.to/soyluiscorona_/influences-and-nature-of-the-language-4hjd"/>
        <updated>2021-06-04T17:52:19.000Z</updated>
        <summary type="html"><![CDATA[JavaScript’s creator, Brendan Eich, had no choice but to create the language very quickly (or other, worse technologies would have been adopted by Netscape). He borrowed from several programming languages: Java (syntax, primitive values versus objects),
JavaScript did not have exception handling until ECMAScript 3, which explains why the language so often automatically converts values and so often fails silently: it initially couldn’t throw exceptions.
On one hand, JavaScript has quirks and is missing quite a bit of functionality (blockscoped variables, modules, support for subclassing, etc.). On the other hand, it has several powerful features that allow you to work around these problems. In other languages, you learn language features. In JavaScript, you often learn patterns instead. Given its influences, it is no surprise that JavaScript enables a programming style that is a mixture of functional programming (higher-order functions; built-in map, reduce, etc.) and object-oriented programming (objects, inheritance).]]></summary>
        <author>
            <name>ImPisces 𠮷 🕉️</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Run Multi-container apps with Docker  Compose]]></title>
        <id>https://dev.to/chauntelkellar/run-multi-container-apps-with-docker-compose-2mbd</id>
        <link href="https://dev.to/chauntelkellar/run-multi-container-apps-with-docker-compose-2mbd"/>
        <updated>2021-06-04T17:52:16.000Z</updated>
        <summary type="html"><![CDATA[Containerization of apps is a fast-growing practice as many companies are embracing the cloud and DevOps concepts. Docker packages an application, libraries, and its dependencies in a virtual container that can run on any server. Being that most applications do not run on one single component (even dinosaur apps 🦖 have frontend and backend components), we need a way to define and manage multi-container apps.
In this tutorial I will utilize Docker compose to get a blog up and running that consists of a Ghost Blog service and a MYSQL service; both services will use volumes for persistent storage. This tutorial assumes you have working knowledge of Docker and a server with Docker and Docker compose installed.

Compose is a file format for describing distributed Docker apps, and it’s a tool for managing them.
Ghost is a free and open source blogging platform written in Javascript.
1. SSH into the server and become root
ssh <username>@PUBLIC_IP_ADDRESS
sudo su -
Step 2 — Create a Ghost Blog and MySQL service
2. Create a docker-compose.yml file in the root directory
vi docker-compose.yml
Add the following contents
version: '3'
services:
  ghost:
    image: ghost:1-alpine
    container_name: ghost-blog
    restart: always
    ports:
      - 80:2368
    environment:
      database__client: mysql
      database__connection__host: mysql
      database__connection__user: root
      database__connection__password: P4sSw0rd0!
      database__connection__database: ghost
    volumes:
      - ghost-volume:/var/lib/ghost
    depends_on:
      - mysql

  mysql:
    image: mysql:5.7
    container_name: ghost-db
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: P4sSw0rd0!
    volumes:
      - mysql-volume:/var/lib/mysql

volumes:
  ghost-volume:
  mysql-volume:

3. docker-compose up -d
Congrats your blog is up and running! Validate via the public IP address of your Docker server.

Connect with me on Twitter @toutfinesse]]></summary>
        <author>
            <name>Chauntel Kellar</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[X.509 Certificate Creation Made Easy with CertsGenerator (Open Source)]]></title>
        <id>https://dev.to/t1m0t/x-509-certificate-creation-made-easy-with-certsgenerator-open-source-34ki</id>
        <link href="https://dev.to/t1m0t/x-509-certificate-creation-made-easy-with-certsgenerator-open-source-34ki"/>
        <updated>2021-06-04T16:40:49.000Z</updated>
        <summary type="html"><![CDATA[Generating certificates for your company or for development purpose can be challenging and a lot of solutions exist to provide easy setup and management of your certificates.
Eventually you also have CertsGenerator which does it in a very simple but nevertheless efficient manner: just create a json file with the appropriate configuration and let the application generate the certificates for you!
This application uses pyca under the hood , which is one of the main library for the Python language that manages x.509 certificates along with the cryptographic materials. As you may know, x.509 uses these materials to work with certificates and pyca handles under the hood all you need to safely do the job.
CertsGenerator acts as an interface between pyca, and the JSON configuration file in order to generate x.509 certificates:

this. Other examples are in these testing configuration files but you can adapt it depending on your needs.
Thank you for reading this article and feel free to contribute to this project.
Cheers]]></summary>
        <author>
            <name>Timothée</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Union Type Merging in Typescript]]></title>
        <id>https://dev.to/lucianbc/union-type-merging-in-typescript-9al</id>
        <link href="https://dev.to/lucianbc/union-type-merging-in-typescript-9al"/>
        <updated>2021-06-04T16:15:15.000Z</updated>
        <summary type="html"><![CDATA[Typescript unions can be very useful in a lot of cases. They can be used to implement algebraic data types when having a discriminator key. Without such a discriminator, they can be quite limiting. This guide describes merging an object union - another pattern that can be used to enhance type union usability.
TL;DR; This article shows you how to merge a type union (of objects) into a single object type. Find all the steps in the typescript playground here.
Suppose we have the following types:
type t1 = {
  a: string;
  b: number;
  e?: string;
};

type t2 = {
  a: string;
  c: number;
  e?: string;
};

type t3 = {
  a: number;
  d: string;
  b: string;
  e: string;
};

type ts = t1 | t2 | t3;

We want to process these types and end up with something like this:
type t = {
  a: string | numb…]]></summary>
        <author>
            <name>Lucian Boaca</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Can I :has()]]></title>
        <id>https://css-tricks.com/?p=341968</id>
        <link href="https://bkardell.com/blog/canihas.html"/>
        <updated>2021-06-04T14:37:59.000Z</updated>
        <summary type="html"><![CDATA[I just joked that we’re basically getting everything we want in CSS super fast (mostly referring to container queries, my gosh, can you imagine they are actually coming?). Now we might actually get parent selectors?! As in .parent:has(.child) { …
The post Can I :has() appeared first on CSS-Tricks.
You can support CSS-Tricks by being an MVP Supporter.]]></summary>
        <author>
            <name>Chris Coyier</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[JavaScript Quick Tip: The Nullish Coalescing Operator]]></title>
        <id>https://dev.to/oliverjumpertz/javascript-quick-tip-the-nullish-coalescing-operator-1b8e</id>
        <link href="https://dev.to/oliverjumpertz/javascript-quick-tip-the-nullish-coalescing-operator-1b8e"/>
        <updated>2021-06-04T13:53:31.000Z</updated>
        <summary type="html"><![CDATA[Have you ever written code like this?
const result = a || b;

It works pretty well until it doesn't.
Using the logical OR to get a value or a fallback works 90% of the time you use it. But the other 10% are actually when you hit falsy values, which might otherwise be perfectly valid.
One point you can usually see such code at is the beginning of functions that don't use default parameters, like seen here:
const myFunction = (parameter) => {
  const cleanedParameter = parameter || 'a default value';
// ... more code ...
}

If you call it like this:
myFunction();

or like this:
myFunction(null);

it works perfectly fine.
But what if the following call was actually a valid one?
myFunction('');

Well, the empty string is a falsy value and will thus be replaced with the default value. And this is where you hit the 10% where the logical OR doesn't help you anymore.
The nullish coalescing operator works nearly identical to the logical OR, but it only reacts to null and undefined. Instead of two pipes, you place two question marks, and it looks like below:
const result = a ?? b;

If you now replace the logical OR in your function with the nullish coalescing operator like this:
const myFunction = (parameter) => {
  const cleanedParameter = parameter ?? 'a default value';
// ... more code ...
}

making the same call with the empty string as before:
myFunction('');

will lead to the empty string being treated as a valid value again.
No matter what falsy value you pass from now on, be it the empty string, the number 0, or else, only null and undefined will be treated.
If you like visual content more, or if you want to store it for later, I put all this into one single image for you. I hope you like it!

If you would love to read even more content like this, feel free to visit me on Twitter or LinkedIn.
I'd love to count you as my ever-growing group of awesome friends!]]></summary>
        <author>
            <name>Oliver Jumpertz</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[if... then... elif.. else - Adventures in WSL2 Scripting #1]]></title>
        <id>https://dev.to/iainrough/if-then-elif-else-adventures-in-wsl2-scripting-1-3do1</id>
        <link href="https://dev.to/iainrough/if-then-elif-else-adventures-in-wsl2-scripting-1-3do1"/>
        <updated>2021-06-04T13:22:48.000Z</updated>
        <summary type="html"><![CDATA[First up some basics
WSL2 with ubuntu 20.04
A lot of the logic in the scripts I write rely on bash's if.. then.. else. The basic syntax of the statement is as follows:
 
    if [ {statement} {operator} {value} ]
[...] tells bash to evaluate the command and return 0 or 1 for the conditional expression inside the square brackets.
tldr; ensure things evaluate correctly.
> is used to redirect the output of a command somewhere.
   dev@Dark-Matter:~$ cp file1 file2
   cp: cannot stat 'file1': No such file or directory
   dev@Dark-Matter:~$ cp file1 file2 >&- 2>&-
   dev@Dark-Matter:~$

$? returns the success of the previous command, 0 for success and >= 1 for failure. Lets look at the previous example and see what the output is.
   dev@Dark-Matter:~$ cp file1 file2 >&- 2>&-
   dev@Dark-Matter:~$ echo $?
   1

   #!/bin/bash
   cp file1 file2 >&- 2>&-
   if ["$?" = "1" ]
   then
      touch file1
      cp file1 file2
   else
     echo "File copied to file 2" 
   fi


#!/bin/bash
# Check we have a parameter

if [ "$1" = "" ]
then
   echo "syntax: old {filename}"
fi

# Copy the file as .old
newFileName="$1.old"
echo $newFileName
cp $1 $newFileName >&- 2>&-

if [ "$?" = "0" ]
then
      echo "File has aged and has had '.old' appended to it"
      exit 0
else
     echo "File has not been born yet or you do not have parental rights to the file."
     exit 1
fi




Simple example.]]></summary>
        <author>
            <name>iainrough</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Top 11 AngularJS Tools You Need To Know In 2021]]></title>
        <id>https://dev.to/ltdsolace/top-11-angularjs-tools-you-need-to-know-in-2021-3409</id>
        <link href="https://dev.to/ltdsolace/top-11-angularjs-tools-you-need-to-know-in-2021-3409"/>
        <updated>2021-06-04T13:20:44.000Z</updated>
        <summary type="html"><![CDATA[AngularJS is the most preferred framework for web developers to design a web app dynamically. It allows you to use HTML as a template language and spread HTML’s syntax to clearly show app components. Developers always search for the best ways to work fast and deliver the project within estimated time. Here comes the AngularJS tools in focus to increase your speed and also improve quality code. Hence we came with the best tools for app developers. Whether you are an angular developer or thinking of using Angular for your next project, knowing these Angularjs tools will help you to develop and deliver the best angular app. Let us see which are those tools.
Also know the amazing new features of Angular 12 at- What’s New In Angular 12?
1. Webstorm-
Features-
Great customization features to match your coding style.
Intelligent ide
Git support
Coding assistance for various Java Script languages, CSS, HTML, and Node.Js
Highly efficient debugging, testing, tracing, and profiling features
Can run ESLint, JSCS, TSLint, Stylelint, JSHint or JSLint also
Pros-
In-built spell checker to avoid silly mistakes
Facilitates cohesive work without need for scrolling
Intelligent code completion support with both word expansion and structural completion
This is one of the best testing frameworks for AngularJS development that provides a perfect testing environment allowing you to test the app on real browsers and real devices like tablets and phones. Karma is used for various testing like unit testing, E2E testing and midway testing. Gitlab, Typeform, Appian are some of the organizations that are using Karma tool
Features-
Offers test coding in various real browsers
Very easy to integrate with Travis, Jenkins and Semaphore
Open-source community at GitHub
Remote Control
Testing Framework Agnostic
Open Source
Easy Debugging
Continuous Integration
Pros-
Know more at- [https://solaceinfotech.com/blog/top-11-angularjs-tools-you-need-to-know/]]]></summary>
        <author>
            <name>Solace Infotech Pvt. Ltd.</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Scaling Keycloak on Distroless into Kubernetes]]></title>
        <id>https://dev.to/stack-labs/scaling-keycloak-on-distroless-into-kubernetes-fj3</id>
        <link href="https://dev.to/stack-labs/scaling-keycloak-on-distroless-into-kubernetes-fj3"/>
        <updated>2021-06-04T11:40:28.000Z</updated>
        <summary type="html"><![CDATA[In the two previous articles, we discovered how to build and run Keycloak with a Distroless base image in a Kubernetes cluster. The previously seen configuration was Ok for one instance, but the clustering capabilities of Keycloak was not used, which can cause some problems. 

Keycloak has a built-in clustering mode, based on Wildfly & Infinispan. To activate it, some start-up scripts are using environment values to set up everything for you… and of course, those scripts are bash based, not compatible with our version of Keycloak. Here, we will see how to configure this and deploy it to Kubernetes
standalone-ha.xml extraction


We will use the same strategy seen before to generate the standalone-ha.xml, by running the official image with parameters we want to use and extract the file with …]]></summary>
        <author>
            <name>Λ\: Davin Kevin</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[About MTLS]]></title>
        <id>https://dev.to/arturbarreto/about-mtls-58c6</id>
        <link href="https://dev.to/arturbarreto/about-mtls-58c6"/>
        <updated>2021-06-04T11:30:59.000Z</updated>
        <summary type="html"><![CDATA[Em Tradução direta é só uma autenticação mútua, logo as duas partes se autenticam. Mas antes de entender o Mtls, você tem que entender o TLS, ele é a "segurança da camada de transporte", após isso fica mais fácil de entender o que é o MTLS.

O TLS é um padrão que segue o RFC 2246, na verdade com a mudança das versões ele mudou de RFC, mas a RFC 8446 é a mais recente. 
Uma observação, quem publica todos os RFCs, seja do jwt, jwe, TLS, e afins, é a IETF | Internet Engineering Task Force (https://www.ietf.org/). Mas voltando... 
O TLS, ele usa criptográfia simétrica, em palavras simplórias, a criptográfia simétrica, são ambos os lados compartilhando o mesmo segredo, e iso torna ela menos segura, se for compara a criptografia chave pública/privada. Porém, você ganha mais velocidade ao usar o modo simétrico, sabemos que existe esse grande impace VELOCIDADE x SEGURANÇA.
 Por que não se utiliza chave assimétrica durante toda a comunicação?
Este tipo de criptografia é muito custoso em termos computacionais, devido à quantidade de operações que são realizadas.
Algoritmos mais famosos usados no TLS

Benchmarks dos Algoritmos:

E o intuito do TLS, é substituir o SSL, já que  ele se tornou mais eficaz no quesito proteção de acesso a sites.
Benchmarks com o TLS ativado e TLS desativado 

O TLS possui três subprotocolos que permitem às partes chegarem a um acordo sobre os parâmetros de segurança que serão utilizados na camada de registro para autenticação, comunicação e para reportar condições de erro entre as partes.
O sistema é tão forte quanto mais forte for o mais fraco algoritmo de troca de chaves e autenticação suportado pelo TLS, e somente algoritmos de criptografia dignos de confiança dever ser usados. Chaves curtas só devem ser usadas se o valor do dado vale menos que o esforço necessário para decriptá-lo.]]></summary>
        <author>
            <name>Artur Barreto</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Getting Started With Webpack]]></title>
        <id>https://smashingmagazine.com/2021/06/getting-started-webpack/</id>
        <link href="https://smashingmagazine.com/2021/06/getting-started-webpack/"/>
        <updated>2021-06-04T10:00:00.000Z</updated>
        <summary type="html"><![CDATA[Modern browsers provide good support for JavaScript modules, but module bundlers such as webpack stay a critical part of the JavaScript toolchain. Let’s take a deep dive into what webpack is and how to use it in your development workflow.]]></summary>
        <author>
            <name>hello@smashingmagazine.com (Nwani Victory)</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[How to Install Dotnet Core on Ubuntu]]></title>
        <id>https://dev.to/hostnextra/how-to-install-dotnet-core-on-ubuntu-3icf</id>
        <link href="https://dev.to/hostnextra/how-to-install-dotnet-core-on-ubuntu-3icf"/>
        <updated>2021-06-04T09:02:40.000Z</updated>
        <summary type="html"><![CDATA[In this article, we'll explain how to install Dotnet Core on Ubuntu.
.NET Core is a free, cross-platform, open-source developer platform for building many different types of applications. Software developers often need to use the Dotnet core framework on the Linux system to test, run, and build the packages.
The notion of using Dotnet on Linux comes true through the new Dotnet core, which is an API based modular system of Microsoft’s Dotnet framework. But the Dotnet core doesn’t act as a single API; it functions as a shared or public library of API and codes.
Prerequisites
An Ubuntu installed system.
A root user access of normal user with administrative privileges.
Install Dotnet Core on Ubuntu
Step 1: Download and Install MS Prob on Ubuntu
Now, we will download and install the Microsoft p…]]></summary>
        <author>
            <name>HostnExtra Technologies</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Get Network Security Strategies ($27.99 Value) for free]]></title>
        <id>https://dev.to/kd/get-network-security-strategies-27-99-value-for-free-95f</id>
        <link href="https://dev.to/kd/get-network-security-strategies-27-99-value-for-free-95f"/>
        <updated>2021-06-04T08:05:06.000Z</updated>
        <summary type="html"><![CDATA[With advanced cyber attacks severely impacting industry giants and the constantly evolving threat landscape, organizations are adopting complex systems to maintain robust and secure environments.
You’ll understand how to identify security vulnerabilities across the network and how to effectively use a variety of network security techniques and platforms. Next, the book will show you how to design a robust network that provides top-notch Read more.
https://go.kd.ms/r2GPRd]]></summary>
        <author>
            <name>Karthik D</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python for Bioinformatics: Use Machine Learning and Data Analysis for Drug Discovery]]></title>
        <id>60b98ebfacb62507dd1d8ec4</id>
        <link href="https://www.freecodecamp.org/news/python-for-bioinformatics-use-machine-learning-and-data-analysis-for-drug-discovery/"/>
        <updated>2021-06-04T02:32:22.000Z</updated>
        <summary type="html"><![CDATA[Are you looking for a way to apply Python and machine learning to a real-world application? You should consider Bioinformatics. Bioinformatics is an interdisciplinary field that develops methods and software tools for understanding biological data, in particular when the data sets are large and complex. We just released a course]]></summary>
        <author>
            <name>freeCodeCamp.org</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[เปลี่ยน default font ของ MX Linux]]></title>
        <id>https://dev.to/veer66/default-font-mx-linux-45nf</id>
        <link href="https://dev.to/veer66/default-font-mx-linux-45nf"/>
        <updated>2021-06-04T01:04:16.000Z</updated>
        <summary type="html"><![CDATA[(จาก qua.name 24 มิถุนายน 2563) 
บางทีเปลี่ยน font แล้วลง พวก Noto เรียนร้อยแล้วก็ยังไม่ได้อย่างใจ บางทีเป็นเพราะว่าระบบจะเลือก font ให้เราเอง ซึ่งไปแก้ได้ในไฟล์
ผมชึ้นหัวว่า MX Linux แต่จริง ๆ จะใช้ Void Linux, Ubuntu กระทั่งพวก NetBSD ก็น่าจะเหมือนกันหมด
$HOME/.config/fontconfig/fonts.conf
ซึ่งอันนี้ผมแก้ตาม https://jichu4n.com/posts/how-to-set-default-fonts-and-font-aliases-on-linux/ และ https://wiki.archlinux.org/index.php/Font_configuration/Examples
สมมุติว่าในกรณีที่ลง Noto แต่ไม่มี font ของ TLWG นะครับ ใส่ไปแบบนี้
<?xml version='1.0'?>
<!DOCTYPE fontconfig SYSTEM 'fonts.dtd'>
<fontconfig>
  <match>
    <test compare="contains" name="lang">
      <string>th</string>
    </test>
    <edit mode="prepend" name="family">
      <string>Noto Sans Thai</string>
    </edit>
  </match>
  <alias>
    <family>serif</family>
    <prefer>
      <family>Noto Serif</family>
    </prefer>    
  </alias>
  <alias>
    <family>sans-serif</family>
    <prefer>
      <family>Noto Sans</family>
    </prefer>    
  </alias>
  <alias>
    <family>sans</family>
    <prefer>
      <family>Noto Sans</family>
    </prefer>    
  </alias>
  <alias>
    <family>monospace</family>
    <prefer>
      <family>Noto Mono</family>
    </prefer>    
  </alias>
</fontconfig>


`
แต่ทำไปทำมาก็รู้สึกว่าไม่ค่อยโดยเท่าไหร่ ผมก็ลง Loma แล้วเปลี่ยน Noto Sans Thai เป็น Loma อยู่ดี]]></summary>
        <author>
            <name>Vee Satayamas</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[วิธีปรับแต่ง font ของ MX Linux]]></title>
        <id>https://dev.to/veer66/font-mx-linux-5hip</id>
        <link href="https://dev.to/veer66/font-mx-linux-5hip"/>
        <updated>2021-06-04T01:02:52.000Z</updated>
        <summary type="html"><![CDATA[(จาก qua.name 17 สิงหาคม 2563)
sudo apt-get install fonts-noto fonts-noto-extra fonts-noto-core fonts-noto-mono fonts-noto-ui-core fonts-noto-ui-extra fonts-noto-cjk fonts-noto-unhinted fonts-noto-hinted fonts-noto-cjk-extra fonts-noto-color-emoji
mkdir -p $HOME/.config/fontconfig
cat > $HOME/.config/fontconfig/fonts.conf
แปะอันนี้ใส่ไป
<?xml version='1.0'?>
<!DOCTYPE fontconfig SYSTEM 'fonts.dtd'>
<fontconfig>
  <match>
    <test compare="contains" name="lang">
      <string>th</string>
    </test>
    <edit mode="prepend" name="family">
      <string>Noto Sans Thai</string>
    </edit>
  </match>
  <alias>
    <family>serif</family>
    <prefer>
      <family>Noto Serif</family>
    </prefer>    
  </alias>
  <alias>
    <family>sans-serif</family>
    <prefer>
      <family>Noto Sans</family>
    </prefer>    
  </alias>
  <alias>
    <family>sans</family>
    <prefer>
      <family>Noto Sans</family>
    </prefer>    
  </alias>
  <alias>
    <family>monospace</family>
    <prefer>
      <family>Noto Mono</family>
    </prefer>    
  </alias>
</fontconfig>


`
กด control D 
เสร็จ]]></summary>
        <author>
            <name>Vee Satayamas</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[JavaScript Tutorial – How to Set Up a Front End Development Project]]></title>
        <id>60b11ff811ffb70827ef8f94</id>
        <link href="https://www.freecodecamp.org/news/how-to-set-up-a-front-end-development-project/"/>
        <updated>2021-06-03T21:44:03.000Z</updated>
        <summary type="html"><![CDATA[Let’s say you plan to build a website. Before you start, you want to set up a few tools to make your life easier. But which tools should you have? The JavaScript ecosystem is changing so fast that it can be overwhelming to pick the best tools to use.]]></summary>
        <author>
            <name>freeCodeCamp.org</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Angular: SSR vs SSG]]></title>
        <id>https://dev.to/pamelakelly0023/angular-ssr-vs-ssg-11lo</id>
        <link href="https://dev.to/pamelakelly0023/angular-ssr-vs-ssg-11lo"/>
        <updated>2021-06-03T19:13:49.000Z</updated>
        <summary type="html"><![CDATA[Server Side Render (SSR)


Nesse modelo a renderização fica a cargo do servidor, o que torna o carregamento da aplicação mais eficiente. Além de possibilitar melhor performance, nesse modelo também podemos lidar com alguns problemas de SEO (como indexação).
Indexação: é possível definir o conteúdo que será carregado a partir do servidor, sendo assim, este conteúdo seria indexado nos motores de busca. 
Aparelho do usuário: como a renderização acontece do lado do servidor, ocorre uma menor exigência do dispositivo do usuário. 
Performance: Na maioria dos casos tem boa performance e bons resultados na experiência por parte do usuário.
Time to first byte maior, já que o servidor irá preparar o conteúdo a ser carregado.
Reload nas mudanças de rota.
Como indicação para desenvolver com SSR no Ang…]]></summary>
        <author>
            <name>pamelakelly0023</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Schofield&#x27;s Laws of Computing – What they Are and Why You Should Know Them]]></title>
        <id>60afd68611ffb70827ef86d8</id>
        <link href="https://www.freecodecamp.org/news/schofields-laws-of-computing/"/>
        <updated>2021-06-03T18:46:12.000Z</updated>
        <summary type="html"><![CDATA[Schofield's Laws of Computing are principles that anyone who works with computers should know. They're focused on data portability, integrity, and security.  Jack Schofield was a prolific journalist who wrote for The Guardian and covered technology for nearly four decades. During that time, he wrote three particular articles called "Schofield's]]></summary>
        <author>
            <name>freeCodeCamp.org</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Lists in Python – A Comprehensive Guide]]></title>
        <id>60b7c02cacb62507dd1d7b80</id>
        <link href="https://www.freecodecamp.org/news/lists-in-python-comprehensive-guide/"/>
        <updated>2021-06-03T18:42:20.000Z</updated>
        <summary type="html"><![CDATA[Let’s suppose you’re planning to visit your neighborhood store to stock up on essentials. What is the first thing you’d do?  Have the answer already? Yes, you'd probably write down a shopping list! Python also has a built-in data structure called List that’s very similar to]]></summary>
        <author>
            <name>freeCodeCamp.org</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Linux Basic Part-00]]></title>
        <id>https://dev.to/shadow_aryan/linux-basic-part-00-476n</id>
        <link href="https://dev.to/shadow_aryan/linux-basic-part-00-476n"/>
        <updated>2021-06-03T18:28:59.000Z</updated>
        <summary type="html"><![CDATA[I am using Kali linux through out the whole Blog Series of Linux Basic Command to demostrate you the linux basic command. 
ls Command


ls means listing.
This command list the files and folders in the current directory.


you can also use (-l) flag in ls to see the list of files and folders with, at what time they are created , permission that given to them, etc.
i.e- ls -l






2.pwd Command
to view the current directory you are working in.




3.clear Command
clear everything on the terminal.




4.exit Command
this command is used to close the terminal.




If you are having any problem in understanding the commands you can watch the video through the link that is given below:-
linux basic part- 00
Hope you like the 00 part of blog series of linux basic command blog.
Part 01 - Link basic part - 01]]></summary>
        <author>
            <name>ShadowAryan</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[How to Build a Hackintosh - Install MacOS Big Sur on a PC Using OpenCore]]></title>
        <id>60affbe411ffb70827ef8951</id>
        <link href="https://www.freecodecamp.org/news/build-a-hackintosh/"/>
        <updated>2021-06-03T18:07:17.000Z</updated>
        <summary type="html"><![CDATA[A Hackintosh is a non-Mac computer system, made with PC parts, that runs the macOS operating system. In this tutorial, you will learn how to create a Hackintosh. You will learn how to install macOS Big Sur (or any other version of macOS) using OpenCore. The main benefit of a]]></summary>
        <author>
            <name>freeCodeCamp.org</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Serverless vs Fully Managed Services: What&#x27;s the Difference?]]></title>
        <id>60aa708711ffb70827ef5f4b</id>
        <link href="https://www.freecodecamp.org/news/serverless-fully-managed-service-difference/"/>
        <updated>2021-06-03T16:51:37.000Z</updated>
        <summary type="html"><![CDATA[If you're new to cloud technologies, you might be confused about the difference between serverless technologies and managed services.  So in this article you'll learn what these terms mean and what the main differences are.    What Are Managed Services? A managed service let the end-user focus on using a service]]></summary>
        <author>
            <name>freeCodeCamp.org</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Create Your First Angular Application]]></title>
        <id>https://dev.to/paradocx96/create-your-first-angular-application-hp4</id>
        <link href="https://dev.to/paradocx96/create-your-first-angular-application-hp4"/>
        <updated>2021-06-03T16:14:03.000Z</updated>
        <summary type="html"><![CDATA[Hi guys! I am going to explain you to how to setup your local environment and workspace for create your first Angular application locally using Angular CLI tool. Simply following my steps finally, you can create Angular applications and configure application yourself. I am using my Windows pc to show you to understand the commands I used to create Angular application.
Step 01


Before create application there are some prerequisites.
1. You should be familiar with following.
JavaScript
HTML
CSS
TypeScript (Not required)
2. To install Angular on your local system, you must install following.
Node.js (Version: Current, Active LTS or Maintenance LTS) 
You can  download and install Node.js follow this  link. If you already installed Node.js you can run this command on terminal window.
node -v

…]]></summary>
        <author>
            <name>Navinda Lankesh</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hexagons and Beyond: Flexible, Responsive Grid Patterns, Sans Media Queries]]></title>
        <id>https://css-tricks.com/?p=341584</id>
        <link href="https://css-tricks.com/hexagons-and-beyond-flexible-responsive-grid-patterns-sans-media-queries/"/>
        <updated>2021-06-03T14:25:57.000Z</updated>
        <summary type="html"><![CDATA[A little while back, Chris shared this nice hexagonal grid. And true to its name, it’s using —wait for it — CSS Grid to form that layout. It’s a neat trick! Combining grid columns, grid gaps, and creative clipping …
The post Hexagons and Beyond: Flexible, Responsive Grid Patterns, Sans Media Queries appeared first on CSS-Tricks.
You can support CSS-Tricks by being an MVP Supporter.]]></summary>
        <author>
            <name>Temani Afif</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Monitoring Lighthouse Scores and Core Web Vitals with DebugBear]]></title>
        <id>https://css-tricks.com/?p=341494</id>
        <link href="https://css-tricks.com/monitoring-lighthouse-scores-and-core-web-vitals-with-debugbear/"/>
        <updated>2021-06-03T14:25:19.000Z</updated>
        <summary type="html"><![CDATA[DebugBear takes just a few seconds to start using. You literally point it at a URL you want to watch, and it’ll start watching it. You install nothing.
It’ll start running tests, and you’ve immediately got performance charts you can …
The post Monitoring Lighthouse Scores and Core Web Vitals with DebugBear appeared first on CSS-Tricks.
You can support CSS-Tricks by being an MVP Supporter.]]></summary>
        <author>
            <name>Chris Coyier</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Dockerizing an angular app]]></title>
        <id>https://dev.to/ollita7/dockerizing-an-angular-app-3nef</id>
        <link href="https://dev.to/ollita7/dockerizing-an-angular-app-3nef"/>
        <updated>2021-06-03T13:55:38.000Z</updated>
        <summary type="html"><![CDATA[In this article I will show you how to dockerize an angular application using nginx server. If you would like more information about the nginx server  you can find it here: https://www.nginx.com/
To get started we create a dockerfile with two stages:
Stage 1
Copy the angular code from a local machine to a docker machine.
Copy the packages.json to install dependencies.
Install the angular-cli and npm dependencies.
Build an angular application.
For this stage we use a node machine image from the dockerhub https://hub.docker.com/_/node
Stage 2
Copy the angular dist folder from the previous docker machine named build on to the nginx location folder.
Then we use the default cmd that starts the nginx server. 
For this stage we will use a node machine from the dockerhub https://hub.docker.com/_/nginx
FROM node:12.7-alpine AS build
WORKDIR /app
COPY / ./
COPY package*.json ./

RUN npm install -g @angular/cli@10.0.4 && \
    npm install && \
    ng build
COPY . .

FROM nginx:1.17.1-alpine
WORKDIR /app
COPY --from=build /app/dist/ui /usr/share/nginx/html

Once that is done, we will create the Dockerfile, and build the image to run it.
> docker build -t <image_name> -f Dockerfile .

Now we can verify if the image is created by running the following command.
> docker images

Now that we have created the image in order to run it we have two options:. 
docker-compose.yml file like this:
version: '3'
services:
    server:
        image: <image_name>
        ports:
            - "80:80"
        tty: true
        expose:
            - "80" 
        stdin_open: true
        environment:
            - MODE=dev
        command: <command to run>

If we want to run a command when we run the image we can specify on command.
docker run -d -p 80:80 <image_name> command

Hope you liked and also helps you in case you have to dockerize an angular app.]]></summary>
        <author>
            <name>Guillermo Fernandez</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Managing Shared State In Vue 3]]></title>
        <id>https://smashingmagazine.com/2021/06/managing-shared-state-vue3/</id>
        <link href="https://smashingmagazine.com/2021/06/managing-shared-state-vue3/"/>
        <updated>2021-06-03T10:30:00.000Z</updated>
        <summary type="html"><![CDATA[Writing large-scale Vue applications can be a challenge. In this article, Shawn Wildermuth dives into the pros and cons of approaches like factories, shared objects, and using Vuex. He also explains what is coming in Vuex 5.0 that might change how we all use shared state in Vue 3.]]></summary>
        <author>
            <name>hello@smashingmagazine.com (Shawn Wildermuth)</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[देसी  भाषा में एक्सट्रीम बिगिनर्स के लिए डॉकर :) Layman Docker ( translate in ur language too)]]></title>
        <id>https://dev.to/manishfoodtechs/layman-docker-translate-in-ur-language-too-5g1</id>
        <link href="https://dev.to/manishfoodtechs/layman-docker-translate-in-ur-language-too-5g1"/>
        <updated>2021-06-03T08:11:15.000Z</updated>
        <summary type="html"><![CDATA[*** छोटा सा अनुरोध अनुरोध:***



  
  
  मेरी टीम शामिल होने के लिए फॉर्म में शामिल होने के लिए आपका स्वागत है।



  
  
  इसके अलावा ओपन सोर्स इंटेलिजेंट सिस्टम (OSINT) में शामिल होने के लिए आपका स्वागत है यदि आप कोरोना प्रकोप जैसी विभिन्न बीमारियों से मनुष्यों की रक्षा के संबंध में ओपन सोर्स प्रोजेक्ट में मदद कर सकते हैं



  
  
  https://github.com/Manishfoodtechs/OSINTHRH/wiki


मैंने सर्वर, क्लाउड और कंटेनरों पर शुरुआती लोगों के लिए सरल भाषा में विभिन्न लेख लिखे हैं। आप मेरी प्रोफाइल पर जाकर उन्हें ढूंढ सकते हैं। ऐसा ही एक लेख यहां फिर से अलग शीर्षक के साथ है।
स्तर शून्य: डेस्कटॉप और सर्वर के बीच अंतर



  
  
  डेस्कटॉप क्या है? एक डेस्कटॉप में सीपीयू, रैम, हार्ड ड्राइव आदि और ऑपरेटिंग सिस्टम होता है। यह ऑपरेटिंग सिस्टम विंडोज, लिनक्स, मैक आदि हो सकता है। आपके पास डेस्कटॉप में ग्राफ…]]></summary>
        <author>
            <name>manish srivastava</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Debugging iOS Safari]]></title>
        <id>https://css-tricks.com/?p=341724</id>
        <link href="https://css-tricks.com/debugging-ios-safari/"/>
        <updated>2021-06-02T21:15:28.000Z</updated>
        <summary type="html"><![CDATA[How do I debug Safari on iOS?
These are my general steps, starting with not even using iOS Safari.
1. Is this just a small-screen problem?
Lemme just use the device mode in Chrome quick.
Note that this does a …
The post Debugging iOS Safari appeared first on CSS-Tricks.
You can support CSS-Tricks by being an MVP Supporter.]]></summary>
        <author>
            <name>Chris Coyier</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Docker without Docker]]></title>
        <id>https://dev.to/superfly/docker-without-docker-590i</id>
        <link href="https://dev.to/superfly/docker-without-docker-590i"/>
        <updated>2021-06-02T15:42:48.000Z</updated>
        <summary type="html"><![CDATA[We’re Fly.io. We take container images and run them on our hardware around the world.  It’s pretty neat, and you should check it out; with an already-working Docker container, you can be up and running on Fly in well under 10 minutes.
Even though most of our users deliver software to us as Docker containers, we don’t use Docker to run them. Docker is great, but we’re high-density multitenant, and despite strides, Docker’s isolation isn’t strong enough for that. So, instead, we transmogrify container images into Firecracker micro-VMs.
Let's demystify that.
They do their best to make it look a lot more complicated, but OCI images — OCI is the standardized container format used by Docker — are pretty simple.  An OCI image is just a stack of tarballs.
Backing up: most people build images from …]]></summary>
        <author>
            <name>Fly.io</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[A Crash Course in WordPress Block Filters]]></title>
        <id>https://css-tricks.com/?p=341442</id>
        <link href="https://css-tricks.com/a-crash-course-in-wordpress-block-filters/"/>
        <updated>2021-06-02T13:35:53.000Z</updated>
        <summary type="html"><![CDATA[Blocks in WordPress are great. Drop some into the page, arrange them how you like, and you’ve got a pretty sweet landing page with little effort. But what if the default blocks in WordPress need a little tweaking? Like, what …
The post A Crash Course in WordPress Block Filters appeared first on CSS-Tricks.
You can support CSS-Tricks by being an MVP Supporter.]]></summary>
        <author>
            <name>Dmitry Mayorov</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Are Custom Properties a “Menu of What Will Change”?]]></title>
        <id>https://css-tricks.com/?p=341572</id>
        <link href="https://css-tricks.com/are-custom-properties-a-menu-of-what-will-change/"/>
        <updated>2021-06-02T13:35:40.000Z</updated>
        <summary type="html"><![CDATA[PPK laid out an interesting situation in “Two options for using custom properties” where he and Stefan Judis had two different approaches for doing the same thing with custom properties. In one approach, hover and focus styles for a …
The post Are Custom Properties a “Menu of What Will Change”? appeared first on CSS-Tricks.
You can support CSS-Tricks by being an MVP Supporter.]]></summary>
        <author>
            <name>Chris Coyier</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[How To Fix Cumulative Layout Shift (CLS) Issues]]></title>
        <id>https://smashingmagazine.com/2021/06/how-to-fix-cumulative-layout-shift-issues/</id>
        <link href="https://smashingmagazine.com/2021/06/how-to-fix-cumulative-layout-shift-issues/"/>
        <updated>2021-06-02T12:30:00.000Z</updated>
        <summary type="html"><![CDATA[Google’s Core Web Vitals initiative has taken the SEO and Web Performance worlds by storm and many sites are busy optimizing their Page Experience to maximize the ranking factor. The Cumulative Layout Shift metric is causing trouble to a lot of sites, so let’s have a look at ways of addressing any issues for that metric.]]></summary>
        <author>
            <name>hello@smashingmagazine.com (Barry Pollard)</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Improving The Performance Of An Online Store (Case Study)]]></title>
        <id>https://smashingmagazine.com/2021/06/front-end-performance-online-store-jewellerybox/</id>
        <link href="https://smashingmagazine.com/2021/06/front-end-performance-online-store-jewellerybox/"/>
        <updated>2021-06-02T10:30:00.000Z</updated>
        <summary type="html"><![CDATA[Getting a good performance score from Google is hard for any website — but doing so for an online store is even harder. We achieved green scores — even several for mobile. Here is how we did it.]]></summary>
        <author>
            <name>hello@smashingmagazine.com (Jennifer Brehm)</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[LUXARG another keyboard frirendly editor in PURE PYTHON]]></title>
        <id>https://dev.to/amzy0/luxarg-another-keyboard-frirendly-editor-for-linux-freebsd-538f</id>
        <link href="https://dev.to/amzy0/luxarg-another-keyboard-frirendly-editor-for-linux-freebsd-538f"/>
        <updated>2021-06-02T00:39:38.000Z</updated>
        <summary type="html"><![CDATA[LINK]]></summary>
        <author>
            <name>Amzy 0 |  محمد امین عظیمی</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Code blocks, but better]]></title>
        <id>https://css-tricks.com/?p=341720</id>
        <link href="https://ped.ro/blog/code-blocks-but-better"/>
        <updated>2021-06-01T22:08:48.000Z</updated>
        <summary type="html"><![CDATA[Pedro Duarte made a wishlist for styled code blocks in blog posts and documentation, then hand-rolls a perfect solution for that wishlist. For example, a feature to be able to highlight certain lines or words within the code block. The …
The post Code blocks, but better appeared first on CSS-Tricks.
You can support CSS-Tricks by being an MVP Supporter.]]></summary>
        <author>
            <name>Chris Coyier</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Front-End Testing is For Everyone]]></title>
        <id>https://css-tricks.com/?p=341342</id>
        <link href="https://css-tricks.com/front-end-testing-is-for-everyone/"/>
        <updated>2021-06-01T14:17:43.000Z</updated>
        <summary type="html"><![CDATA[Testing is one of those things that you either get super excited about or kinda close your eyes and walk away. Whichever camp you fall into, I’m here to tell you that front-end testing is for everyone. In fact, …
The post Front-End Testing is For Everyone appeared first on CSS-Tricks.
You can support CSS-Tricks by being an MVP Supporter.]]></summary>
        <author>
            <name>Evgeny Klimenchenko</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Jetpack Boost Handles Critical CSS For You]]></title>
        <id>https://css-tricks.com/?p=341296</id>
        <link href="https://css-tricks.com/jetpack-boost-handles-critical-css-for-you/"/>
        <updated>2021-06-01T14:16:55.000Z</updated>
        <summary type="html"><![CDATA[Critical CSS is one of those things I see in my performance reports but always seem to ignore. I know what it means. It means to put only the CSS required to render things immediately visible in a <style>…
The post Jetpack Boost Handles Critical CSS For You appeared first on CSS-Tricks.
You can support CSS-Tricks by being an MVP Supporter.]]></summary>
        <author>
            <name>Geoff Graham</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Smashing Podcast Episode 38 With Ivan Akulov: Why Is My React App Slow?]]></title>
        <id>https://smashingmagazine.com/2021/06/smashing-podcast-episode-38/</id>
        <link href="https://smashingmagazine.com/2021/06/smashing-podcast-episode-38/"/>
        <updated>2021-06-01T14:00:00.000Z</updated>
        <summary type="html"><![CDATA[In this episode, we’re talking about React performance. What factors slow our React apps down, and how can we fix it? Drew McLellan talks to expert Ivan Akulov to find out.]]></summary>
        <author>
            <name>hello@smashingmagazine.com (Drew McLellan)</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Setting Up A Currency Convertor With ExchangeRatesApi.io]]></title>
        <id>https://smashingmagazine.com/2021/06/currency-convertor-exchangeratesapi/</id>
        <link href="https://smashingmagazine.com/2021/06/currency-convertor-exchangeratesapi/"/>
        <updated>2021-06-01T09:00:00.000Z</updated>
        <summary type="html"><![CDATA[Amazon allows visitors to display prices in their own currency. Thanks to *ExchangeRatesApi.io*, we can do the same for our online shops, providing a better experience to our customers. Let’s find out how.]]></summary>
        <author>
            <name>hello@smashingmagazine.com (Leonardo Losoviz)</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[v1.10.2]]></title>
        <id>https://github.com/osmoscraft/osmosfeed/releases/tag/v1.10.2</id>
        <link href="https://github.com/osmoscraft/osmosfeed/releases/tag/v1.10.2"/>
        <updated>2021-06-01T04:39:30.000Z</updated>
        <summary type="html"><![CDATA[Added: testing and CI/CD workflows]]></summary>
        <author>
            <name>Release notes from osmosfeed</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Serverless Functions: The Secret to Ultra-Productive Front-End Teams]]></title>
        <id>https://css-tricks.com/?p=340465</id>
        <link href="https://css-tricks.com/serverless-functions-the-secret-to-ultra-productive-front-end-teams/"/>
        <updated>2021-05-31T17:16:22.000Z</updated>
        <summary type="html"><![CDATA[Modern apps place high demands on front-end developers. Web apps require complex functionality, and the lion’s share of that work is falling to front-end devs:
building modern, accessible user interfaces
creating interactive elements and complex animations
managing complex application state
…
The post Serverless Functions: The Secret to Ultra-Productive Front-End Teams appeared first on CSS-Tricks.
You can support CSS-Tricks by being an MVP Supporter.]]></summary>
        <author>
            <name>Jason Lengstorf</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Local: Always Getting Better]]></title>
        <id>https://css-tricks.com/?p=341482</id>
        <link href="https://css-tricks.com/local-always-getting-better/"/>
        <updated>2021-05-31T17:13:02.000Z</updated>
        <summary type="html"><![CDATA[I’ve been using Local for ages. Four years ago, I wrote about how I got all my WordPress sites running locally on it. I just wanted to give it another high five because it’s still here and still great. In …
The post Local: Always Getting Better appeared first on CSS-Tricks.
You can support CSS-Tricks by being an MVP Supporter.]]></summary>
        <author>
            <name>Chris Coyier</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Happy June Vibes For Your Screen (2021 Desktop Wallpapers Edition)]]></title>
        <id>https://smashingmagazine.com/2021/05/desktop-wallpaper-calendars-june-2021/</id>
        <link href="https://smashingmagazine.com/2021/05/desktop-wallpaper-calendars-june-2021/"/>
        <updated>2021-05-31T11:30:00.000Z</updated>
        <summary type="html"><![CDATA[What could be a better way to welcome June than with some colorful inspiration? Well, we might have something for you: wallpapers created with love by artists and designers from across the globe.]]></summary>
        <author>
            <name>hello@smashingmagazine.com (Cosima Mielke)</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Dynamic Favicons for WordPress]]></title>
        <id>https://css-tricks.com/?p=341163</id>
        <link href="https://css-tricks.com/dynamic-favicons-for-wordpress/"/>
        <updated>2021-05-28T14:36:47.000Z</updated>
        <summary type="html"><![CDATA[Typically, a single favicon is used across a whole domain. But there are times you wanna step it up with different favicons depending on context. A website might change the favicon to match the content being viewed. Or a site …
The post Dynamic Favicons for WordPress appeared first on CSS-Tricks.
You can support CSS-Tricks by being an MVP Supporter.]]></summary>
        <author>
            <name>Thomas Park</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Adding A Commenting System To A WYSIWYG Editor]]></title>
        <id>https://smashingmagazine.com/2021/05/commenting-system-wysiwyg-editor/</id>
        <link href="https://smashingmagazine.com/2021/05/commenting-system-wysiwyg-editor/"/>
        <updated>2021-05-28T11:00:00.000Z</updated>
        <summary type="html"><![CDATA[In this article, we’ll be re-using the foundational WYSIWYG Editor built in the first article to build a commenting system for a WYSIWYG Editor that enables users to select text inside a document and share their comments on it. Let’s dig in!]]></summary>
        <author>
            <name>hello@smashingmagazine.com (Shalabh Vyas)</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[To $ or Not to $: Displaying Terminal Code Snippets]]></title>
        <id>https://css-tricks.com/?p=341298</id>
        <link href="https://css-tricks.com/to-or-not-to-displaying-terminal-code-snippets/"/>
        <updated>2021-05-27T18:22:11.000Z</updated>
        <summary type="html"><![CDATA[It’s very popular to put a $ on lines that are intended to be a command in code documentation that involves the terminal (i.e. the command line).
Like this:
$ brew install somepackage
The point of that is that it …
The post To $ or Not to $: Displaying Terminal Code Snippets appeared first on CSS-Tricks.
You can support CSS-Tricks by being an MVP Supporter.]]></summary>
        <author>
            <name>Chris Coyier</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[How to Show Images on Click]]></title>
        <id>https://css-tricks.com/?p=341020</id>
        <link href="https://css-tricks.com/how-to-show-images-on-click/"/>
        <updated>2021-05-27T14:25:29.000Z</updated>
        <summary type="html"><![CDATA[Most images on the web are superfluous. If I might be a jerk for a bit, 99% of them aren’t even that helpful at all (although there are rare exceptions). That’s because images don’t often complement the text they’re …
The post How to Show Images on Click appeared first on CSS-Tricks.
You can support CSS-Tricks by being an MVP Supporter.]]></summary>
        <author>
            <name>Robin Rendle</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Useful VS Code Extensions For Front-End Developers]]></title>
        <id>https://smashingmagazine.com/2021/05/useful-vs-code-extensions-web-developers/</id>
        <link href="https://smashingmagazine.com/2021/05/useful-vs-code-extensions-web-developers/"/>
        <updated>2021-05-27T13:30:00.000Z</updated>
        <summary type="html"><![CDATA[Meet useful Visual Studio Code extensions for web developers: little helpers to minimize slow-downs and frustrations, and boost developer’s workflow along the way. With auto log messages, auto code formatting, file utils, file labels, code snippets, highlight brackets, tags, indents and workspaces, onboarding and remote SSH.]]></summary>
        <author>
            <name>hello@smashingmagazine.com (Cosima Mielke)</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[How To Build And Launch Powerful Responsive Websites With Editor X]]></title>
        <id>https://smashingmagazine.com/2021/05/build-launch-responsive-websites-editorx/</id>
        <link href="https://smashingmagazine.com/2021/05/build-launch-responsive-websites-editorx/"/>
        <updated>2021-05-27T09:30:00.000Z</updated>
        <summary type="html"><![CDATA[While web builders have been around for a long time, it wasn’t until recently that they became practical for professional use. Closing the gap between design and code has become the north star for many companies and we are seeing a wave of tools that deliver on this promise.]]></summary>
        <author>
            <name>hello@smashingmagazine.com (Miroslav Bekyarov)</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Accessible SVGs: Perfect Patterns For Screen Reader Users]]></title>
        <id>https://smashingmagazine.com/2021/05/accessible-svg-patterns-comparison/</id>
        <link href="https://smashingmagazine.com/2021/05/accessible-svg-patterns-comparison/"/>
        <updated>2021-05-26T13:20:00.000Z</updated>
        <summary type="html"><![CDATA[Discover which SVG patterns we should avoid and which patterns are the most inclusive when comparing different combinations of OSs, browsers, and screen readers.]]></summary>
        <author>
            <name>hello@smashingmagazine.com (Carie Fisher)</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[v1.9.0]]></title>
        <id>https://github.com/osmoscraft/osmosfeed/releases/tag/v1.9.0</id>
        <link href="https://github.com/osmoscraft/osmosfeed/releases/tag/v1.9.0"/>
        <updated>2021-05-26T06:02:55.000Z</updated>
        <summary type="html"><![CDATA[Added: experimental support for iTunes podcast feed: Demo | Source. With this new release, you can render an audio control to play the mp3 file and display iTunes episode duration. It is "experimental" due to these caveats:

This feature is currently only available through custom template.
iTunes has no strict format requirement for duration. The unit is most likely seconds but can be "hh:mm:ss" or "mm:ss" for some sources. A future version may expose a human readable string to the template.
No image support yet. Some shows might have disabled CORS or use a relative URL for image, which forces osmosfeed to download the image during build. A future version may support it.
You can't republish the podcast in the feed output. Supporting this goes beyond the scope of the project at the moment.
Fixed: the articles in template data were not sorted.
Thank you @Zenigata]]></summary>
        <author>
            <name>Release notes from osmosfeed</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[A Guide To Undoing Mistakes With Git (Part 2)]]></title>
        <id>https://smashingmagazine.com/2021/05/undoing-mistakes-git-part2/</id>
        <link href="https://smashingmagazine.com/2021/05/undoing-mistakes-git-part2/"/>
        <updated>2021-05-25T14:00:00.000Z</updated>
        <summary type="html"><![CDATA[Mistakes. These cruel villains do not even stop at the beautiful world of software development. But although we cannot avoid making mistakes, we can learn to undo them! This post will show the right tools for your daily work with Git.]]></summary>
        <author>
            <name>hello@smashingmagazine.com (Tobias Günther)</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[A New Way To Reduce Font Loading Impact: CSS Font Descriptors]]></title>
        <id>https://smashingmagazine.com/2021/05/reduce-font-loading-impact-css-descriptors/</id>
        <link href="https://smashingmagazine.com/2021/05/reduce-font-loading-impact-css-descriptors/"/>
        <updated>2021-05-25T09:30:00.000Z</updated>
        <summary type="html"><![CDATA[Web fonts are often terrible for web performance and none of the font loading strategies are particularly effective to address that. Upcoming font options may finally deliver on the promise of making it easier to align fallback fonts to the final fonts.]]></summary>
        <author>
            <name>hello@smashingmagazine.com (Barry Pollard)</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[CSS Container Queries: Use-Cases And Migration Strategies]]></title>
        <id>https://smashingmagazine.com/2021/05/css-container-queries-use-cases-migration-strategies/</id>
        <link href="https://smashingmagazine.com/2021/05/css-container-queries-use-cases-migration-strategies/"/>
        <updated>2021-05-24T11:30:00.000Z</updated>
        <summary type="html"><![CDATA[CSS Container queries bring media queries closer to the target elements themselves and enables them to adapt to virtually any given container or layout. In this article, we’re going to cover CSS container query basics and how to use them today with progressive enhancement or polyfills.]]></summary>
        <author>
            <name>hello@smashingmagazine.com (Adrian Bece)</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[v1.8.1]]></title>
        <id>https://github.com/osmoscraft/osmosfeed/releases/tag/v1.8.1</id>
        <link href="https://github.com/osmoscraft/osmosfeed/releases/tag/v1.8.1"/>
        <updated>2021-05-23T05:40:12.000Z</updated>
        <summary type="html"><![CDATA[Fixed: UnhandledPromiseRejectionWarning: Error: At least one option must be a string]]></summary>
        <author>
            <name>Release notes from osmosfeed</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[v1.8.0]]></title>
        <id>https://github.com/osmoscraft/osmosfeed/releases/tag/v1.8.0</id>
        <link href="https://github.com/osmoscraft/osmosfeed/releases/tag/v1.8.0"/>
        <updated>2021-05-23T05:12:08.000Z</updated>
        <summary type="html"><![CDATA[Changed: Smart summary truncation. When there is no dedicated summary (only Atom feed has it, and many sites don't use it) from the source, we check if the content/description (Both Atom and RSS) field is long enough to be full text. If so, it will be truncated into a "pseudo" summary. If not, we assume the source used the content field as summary, and it will be displayed in full length.
Thank you: @LooperXX.]]></summary>
        <author>
            <name>Release notes from osmosfeed</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Building A Rich Text Editor (WYSIWYG)]]></title>
        <id>https://smashingmagazine.com/2021/05/building-wysiwyg-editor-javascript-slatejs/</id>
        <link href="https://smashingmagazine.com/2021/05/building-wysiwyg-editor-javascript-slatejs/"/>
        <updated>2021-05-21T11:30:00.000Z</updated>
        <summary type="html"><![CDATA[Let’s build a rich text, WYSIWYG-editor that supports rich text, images, links and some nuanced features from word processing apps. We will use SlateJS to build the shell of the editor and then add a toolbar and custom configurations.]]></summary>
        <author>
            <name>hello@smashingmagazine.com (Shalabh Vyas)</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Boost Your Skills Online: Smashing Workshops On Front-End And Design]]></title>
        <id>https://smashingmagazine.com/2021/05/new-online-workshops-front-end-ux/</id>
        <link href="https://smashingmagazine.com/2021/05/new-online-workshops-front-end-ux/"/>
        <updated>2021-05-20T14:20:00.000Z</updated>
        <summary type="html"><![CDATA[Front-end and design are remarkably complex these days. That’s why we invite kind, smart folks from the community to run online workshops for all of us to learn together. And we have new ones coming up, and we’d like to kindly welcome you to join in.]]></summary>
        <author>
            <name>hello@smashingmagazine.com (Iris Lješnjanin)</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[How To Implement Authentication In Next.js With Auth0]]></title>
        <id>https://smashingmagazine.com/2021/05/implement-authentication-nextjs-auth0/</id>
        <link href="https://smashingmagazine.com/2021/05/implement-authentication-nextjs-auth0/"/>
        <updated>2021-05-20T11:00:00.000Z</updated>
        <summary type="html"><![CDATA[A step-by-step tutorial on adding authentication and authorization to your Next.js apps, with Auth0. We’ll be using a Next.js SDK to connect our application to the Auth0 API and will create the dynamic API route for React.]]></summary>
        <author>
            <name>hello@smashingmagazine.com (Facundo Giuliani)</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Frustrating Design Patterns: Mega-Dropdown Hover Menus]]></title>
        <id>https://smashingmagazine.com/2021/05/frustrating-design-patterns-mega-dropdown-hover-menus/</id>
        <link href="https://smashingmagazine.com/2021/05/frustrating-design-patterns-mega-dropdown-hover-menus/"/>
        <updated>2021-05-19T11:40:00.000Z</updated>
        <summary type="html"><![CDATA[Everything to keep in mind when designing and building a mega-dropdown, common pitfalls, hover entry/exit delays, trajectory triangle technique and SVG path exit areas.]]></summary>
        <author>
            <name>hello@smashingmagazine.com (Vitaly Friedman)</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[How To Create, Edit And Animate SVGs All In One Place With SVGator 3.0]]></title>
        <id>https://smashingmagazine.com/2021/05/create-edit-animate-svg-svgator3/</id>
        <link href="https://smashingmagazine.com/2021/05/create-edit-animate-svg-svgator3/"/>
        <updated>2021-05-18T10:30:00.000Z</updated>
        <summary type="html"><![CDATA[Today, we are taking a closer look at [SVGator 3.0](https://www.svgator.com/?utm_source=article&utm_medium=smashingmag&utm_campaign=svgator3_smashing), a new major release of the popular SVG application that lets you create, edit and animate SVG files and make the best out of what SVG has to offer — from start to finish.]]></summary>
        <author>
            <name>hello@smashingmagazine.com (Mikołaj Dobrucki)</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Smashing Podcast Episode 37 With Adam Argyle: What Is VisBug?]]></title>
        <id>https://smashingmagazine.com/2021/05/smashing-podcast-episode-37/</id>
        <link href="https://smashingmagazine.com/2021/05/smashing-podcast-episode-37/"/>
        <updated>2021-05-18T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[In this episode, we’re talking about VisBug. What is it, and how is it different from the array of options already found in Chrome DevTools? Drew McLellan talks to its creator Adam Argyle to find out.]]></summary>
        <author>
            <name>hello@smashingmagazine.com (Drew McLellan)</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[How We Improved Our Core Web Vitals (Case Study)]]></title>
        <id>https://smashingmagazine.com/2021/05/core-web-vitals-case-study/</id>
        <link href="https://smashingmagazine.com/2021/05/core-web-vitals-case-study/"/>
        <updated>2021-05-17T11:30:00.000Z</updated>
        <summary type="html"><![CDATA[Google’s “Page Experience Update” will start rolling out in June. At first, sites that meet Core Web Vitals thresholds will have a minor ranking advantage in mobile search for all browsers. Search is important to any business, and this is the story of how Beau Hartshorne and his team at Instant Domain Search improved their Core Web Vitals scores.]]></summary>
        <author>
            <name>hello@smashingmagazine.com (Beau Hartshorne)</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[v1.7.2]]></title>
        <id>https://github.com/osmoscraft/osmosfeed/releases/tag/v1.7.2</id>
        <link href="https://github.com/osmoscraft/osmosfeed/releases/tag/v1.7.2"/>
        <updated>2021-05-17T05:32:19.000Z</updated>
        <summary type="html"><![CDATA[⚠ Deprecated: To accommodate the monorepo setup, the node version in all templates/demos/examples has changed from 14 to 16. This is not a breaking change as our compile target is still node 14, and node 16 is backward compatible. We still recommend you start using node-version: "16" in your .github/workflows/update-feed.yaml today to get the performance/security improvements from the newer node. See example
Chore: Reorganize to monorepo with npm workspace.]]></summary>
        <author>
            <name>Release notes from osmosfeed</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[v1.7.1]]></title>
        <id>https://github.com/osmoscraft/osmosfeed/releases/tag/v1.7.1</id>
        <link href="https://github.com/osmoscraft/osmosfeed/releases/tag/v1.7.1"/>
        <updated>2021-05-16T02:33:58.000Z</updated>
        <summary type="html"><![CDATA[Fixed: static files were unnecessarily copied for custom templates.]]></summary>
        <author>
            <name>Release notes from osmosfeed</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[v1.7.0]]></title>
        <id>https://github.com/osmoscraft/osmosfeed/releases/tag/v1.7.0</id>
        <link href="https://github.com/osmoscraft/osmosfeed/releases/tag/v1.7.0"/>
        <updated>2021-05-16T01:42:24.000Z</updated>
        <summary type="html"><![CDATA[Added: templating system. Demo | Source | Docs
Chore: rendering logic refactoring. Adopting functional paradigm.
Thank you @tianheg, @onnyyonn]]></summary>
        <author>
            <name>Release notes from osmosfeed</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Tree-Shaking: A Reference Guide]]></title>
        <id>https://smashingmagazine.com/2021/05/tree-shaking-reference-guide/</id>
        <link href="https://smashingmagazine.com/2021/05/tree-shaking-reference-guide/"/>
        <updated>2021-05-14T10:30:00.000Z</updated>
        <summary type="html"><![CDATA[“Tree-shaking” is a must-have performance optimization when bundling JavaScript. In this article, we dive deeper on how exactly it works and how specs and practice intertwine to make bundles leaner and more performant. Plus, you’ll get a tree-shaking checklist to use for your projects.]]></summary>
        <author>
            <name>hello@smashingmagazine.com (Átila Fassina)</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Frustrating Design Patterns That Need Fixing: Birthday Picker]]></title>
        <id>https://smashingmagazine.com/2021/05/frustrating-design-patterns-birthday-picker/</id>
        <link href="https://smashingmagazine.com/2021/05/frustrating-design-patterns-birthday-picker/"/>
        <updated>2021-05-12T12:42:00.000Z</updated>
        <summary type="html"><![CDATA[In this new series of articles on UX, we take a closer look at some frustrating design patterns and explore better alternatives, along with plenty of examples to keep in mind when building or designing one. Let’s start with an infamous birthday picker.]]></summary>
        <author>
            <name>hello@smashingmagazine.com (Vitaly Friedman)</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Little Smashing Stories]]></title>
        <id>https://smashingmagazine.com/2021/05/little-smashing-stories/</id>
        <link href="https://smashingmagazine.com/2021/05/little-smashing-stories/"/>
        <updated>2021-05-12T08:00:00.000Z</updated>
        <summary type="html"><![CDATA[Today marks the day we sent out our 300th edition of the Smashing Newsletter. This article is a little celebration in which we share little Smashing stories from people working behind the scenes.]]></summary>
        <author>
            <name>hello@smashingmagazine.com (Vitaly Friedman)</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[A Primer On CSS Container Queries]]></title>
        <id>https://smashingmagazine.com/2021/05/complete-guide-css-container-queries/</id>
        <link href="https://smashingmagazine.com/2021/05/complete-guide-css-container-queries/"/>
        <updated>2021-05-11T13:30:00.000Z</updated>
        <summary type="html"><![CDATA[A prototype of the long-awaited CSS container queries has landed in Chrome Canary and is available for experimentation. Let’s look at what problem is being solved, learn how container queries work, and see how they compare with and complement existing CSS features for layout.]]></summary>
        <author>
            <name>hello@smashingmagazine.com (Stephanie Eckles)</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[The Conference Platform We Use For Our Online Events: Hopin]]></title>
        <id>https://smashingmagazine.com/2021/05/smashingconf-conference-platform-hopin/</id>
        <link href="https://smashingmagazine.com/2021/05/smashingconf-conference-platform-hopin/"/>
        <updated>2021-05-11T10:00:00.000Z</updated>
        <summary type="html"><![CDATA[At the beginning of 2020, the SmashingConf team was ready for a new year. We had so many things that excited us. New speakers, new workshops, new cities, new attendees, new experiences. And as we all know, 2020 had other ideas. With so many people working from home, we thought we would bring our [Smashing workshops](https://smashingconf.com/online-workshops/) from our home offices to yours — but how?]]></summary>
        <author>
            <name>hello@smashingmagazine.com (Amanda Annandale)</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Get Started With React By Building A Whac-A-Mole Game]]></title>
        <id>https://smashingmagazine.com/2021/05/get-started-whac-a-mole-react-game/</id>
        <link href="https://smashingmagazine.com/2021/05/get-started-whac-a-mole-react-game/"/>
        <updated>2021-05-10T11:00:00.000Z</updated>
        <summary type="html"><![CDATA[Want to get started with React but struggling to find a good place to start? This article should have you covered. We’ll focus on some of the main concepts of React and then we’ll be building a game from scratch!]]></summary>
        <author>
            <name>hello@smashingmagazine.com (Jhey Tompkins)</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[v1.4.0]]></title>
        <id>https://github.com/osmoscraft/osmosfeed/releases/tag/v1.4.0</id>
        <link href="https://github.com/osmoscraft/osmosfeed/releases/tag/v1.4.0"/>
        <updated>2021-05-10T08:55:42.000Z</updated>
        <summary type="html"><![CDATA[Added: Basic theme customization: Demo | Source | Docs.]]></summary>
        <author>
            <name>Release notes from osmosfeed</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[v1.6.0]]></title>
        <id>https://github.com/osmoscraft/osmosfeed/releases/tag/v1.6.0</id>
        <link href="https://github.com/osmoscraft/osmosfeed/releases/tag/v1.6.0"/>
        <updated>2021-05-10T08:15:20.000Z</updated>
        <summary type="html"><![CDATA[Added: Link from the title of a subscription to its website.
Added: Store feedUrl and siteUrl for each source in cache.
Added: Semantic element (<time>) for timestamp on the UI.
Added: Semantic API for theming the default template. Demo | Source | Docs
Changed: Moved feed metadata from article level to feed level in cache.
Fixed: Any html-like text was stripped from title. Fixed with encoded text.
Removed: href for each source in cache. The value was never used so it's not a breaking change.]]></summary>
        <author>
            <name>Release notes from osmosfeed</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[v1.5.0]]></title>
        <id>https://github.com/osmoscraft/osmosfeed/releases/tag/v1.5.0</id>
        <link href="https://github.com/osmoscraft/osmosfeed/releases/tag/v1.5.0"/>
        <updated>2021-05-08T05:16:47.000Z</updated>
        <summary type="html"><![CDATA[Added: Atom feed generator
Added: Customizable site title
Added: Copy all files from static directory to the root of the site.
Changed: Favicon, css, and js assets now existing at site root level.
Chore: Excluded testing files from repo.]]></summary>
        <author>
            <name>Release notes from osmosfeed</name>
        </author>
    </entry>
</feed>