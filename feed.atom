<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>urn:2021-11-02T01:05:11.159Z</id>
    <title>osmos::feed</title>
    <updated>2021-11-02T01:05:11.159Z</updated>
    <generator>osmosfeed 1.11.3</generator>
    <link rel="alternate" href="index.html"/>
    <entry>
        <title type="html"><![CDATA[zlog: Secure logger in Go to prevent output of sensitive/secret values]]></title>
        <id>https://dev.to/mizutani/zlog-secure-logger-in-go-to-prevent-output-of-sensitivesecret-values-394d</id>
        <link href="https://dev.to/mizutani/zlog-secure-logger-in-go-to-prevent-output-of-sensitivesecret-values-394d"/>
        <updated>2021-11-01T23:27:45.000Z</updated>
        <summary type="html"><![CDATA[TL; DR
zlog that prevent outputting secret values to the log.
https://github.com/m-mizutani/zlog
It is common for many server-side services, including web services, to output and record logs about the behavior of the service. By continuously outputting logs, they can be used for troubleshooting, debugging, responding to security incidents, auditing, and clues for performance improvement. The more information contained in the log, the more clues to solve problems, so it is useful to post as much information as possible (although there is a limit), or to be able to increase the amount of information through configuration.
On the other hand, however, there is some information that is undesirable to output on the server side.
Credential: Passwords, API tokens, session tokens, and other informa…]]></summary>
        <author>
            <name>Masayoshi Mizutani</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[From Ad-hoc Scripting to Workflow as Code: The Evolution of Runbooks]]></title>
        <id>https://dev.to/youngshatner/from-ad-hoc-scripting-to-workflow-as-code-the-evolution-of-runbooks-58a</id>
        <link href="https://dev.to/youngshatner/from-ad-hoc-scripting-to-workflow-as-code-the-evolution-of-runbooks-58a"/>
        <updated>2021-11-01T23:00:11.000Z</updated>
        <summary type="html"><![CDATA[Unfortunately the word workflow has been used for many years to represent some very specific things in the business world (the most common being BPMN — Business Process Modeling Notation). However, at a general level it’s simply describing a set of steps done in a specific order to achieve the desired end result.
Workflow as code simply means that we’re using code to orchestrate and execute a workflow, very likely in a distributed environment. In the site reliability engineering (SRE) or cloud engineering space, these workflows tend to deal with things like cost savings and incident resolution.
In the early days of SRE (when it was still called DevOps), the ability to chain together specified actions with code was a much more daunting task. Let’s take what seems like a simple example: a da…]]></summary>
        <author>
            <name>Scott Lasica</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Buttons vs. Links]]></title>
        <id>https://css-tricks.com/?p=354978</id>
        <link href="https://css-tricks.com/buttons-vs-links/"/>
        <updated>2021-11-01T22:58:12.000Z</updated>
        <summary type="html"><![CDATA[There are thousands of articles out there about buttons and links on the web; the differences and how to use them properly. Hey, I don’t mind. I wrote my own as well¹.
It’s such a common mistake on …
The post Buttons vs. Links appeared first on CSS-Tricks. You can support CSS-Tricks by being an MVP Supporter.]]></summary>
        <author>
            <name>Chris Coyier</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[A Comparison of SRE Workflow Tools]]></title>
        <id>https://dev.to/youngshatner/a-comparison-of-sre-workflow-tools-3ceo</id>
        <link href="https://dev.to/youngshatner/a-comparison-of-sre-workflow-tools-3ceo"/>
        <updated>2021-11-01T22:48:34.000Z</updated>
        <summary type="html"><![CDATA[When considering tools to help optimize parts or all of your cloud incident remediation workflows and runbooks, there are several factors to take into consideration. This article will break down several capabilities to successfully achieve good optimization, and will do a direct comparison between the companies leading the charge into this new and expanding area.
Disclosure: I work at Fylamynt, one of the offerings, but will keep the comparison to facts that can be known based on company web sites and information from customers.
This article will compare several offerings in the market: Fylamynt, FireHydrant, Blameless, Rundeck and Transposit.
One of the first and most important factors to consider is how many third party integrations the platform has, and how easy they are to use. SREs ha…]]></summary>
        <author>
            <name>Scott Lasica</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Can I Automate Away SRE Roles?]]></title>
        <id>https://dev.to/youngshatner/can-i-automate-away-sre-roles-28k4</id>
        <link href="https://dev.to/youngshatner/can-i-automate-away-sre-roles-28k4"/>
        <updated>2021-11-01T22:40:53.000Z</updated>
        <summary type="html"><![CDATA[The word automation brings some strong emotions to the surface for many. It could elicit joy from automating mundane tasks, but it can also create fear and mistrust. There has been extensive history and research on automation being brought into many industries.
I’ll start in 1811 England. There was a new invention called a loom, allowing lower skilled laborers to operate and produce lower quality products that ruined the artisans’ reputation for quality. The name Luddites was coined, and this group of people went on to physically smash looms eventually causing Parliament to make frame-breaking a hanging offense. The industrial revolution continued in spite of the Luddites and a whole new role was born: the factory worker, which exploded in numbers creating many more jobs than those that we…]]></summary>
        <author>
            <name>Scott Lasica</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[What is SRE (Site Reliability Engineering)?]]></title>
        <id>https://dev.to/youngshatner/what-is-sre-site-reliability-engineering-243g</id>
        <link href="https://dev.to/youngshatner/what-is-sre-site-reliability-engineering-243g"/>
        <updated>2021-11-01T22:37:32.000Z</updated>
        <summary type="html"><![CDATA[Introduction


Site reliability engineering (SRE) is a software engineering (developer) approach to IT operations (ops). SRE teams manage systems, handle scale, firefight incidents/problems and automate some operational tasks.
SRE was coined by the Google engineering team, when they realized that the duties and responsibilities required had deviated significantly from traditional IT/DevOps. One of the key differences is the use of code to help solve problems within cloud-native systems and infrastructure.
Any system that requires high availability and/or scalability needs SRE as a dedicated practice.
SRE can also stand for site reliability engineer, which are the individuals who handle site reliability engineering. SREs perform many tasks and are focused on the production cloud environment…]]></summary>
        <author>
            <name>Scott Lasica</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[SRE vs DevOps]]></title>
        <id>https://dev.to/opsbecca/sre-vs-devops-1nol</id>
        <link href="https://dev.to/opsbecca/sre-vs-devops-1nol"/>
        <updated>2021-11-01T22:17:38.000Z</updated>
        <summary type="html"><![CDATA[We often hear SRE and DevOps interchangeably used to describe operational activities done by engineers for applications running in private or public cloud environments. What’s the difference?
From Wikipedia
DevOps brought a change to this culture that brings the responsibility of building and running software to both dev and ops, with increasing collaboration and shared responsibility across various aspects of software development life cycle (code, build, test, deploy and management)
The field of site reliability engineering (SRE) originated at Google with Ben Treynor Sloss, who founded a site reliability team after joining the company in 2003. The Google SRE books have formalized many of the ideas that are developed in these site reliability teams since then.
Unlike DevOps, SRE is both a job function and a set of principles that are followed by a team to achieve high reliability for software services offered by a company to its customers. SRE also brought engineering principles of writing “infrastructure-as-code”, testing and deploying operational software similar to how product services are developed.
For an in-depth explanation of “What’s SRE”, check out our other blog on www.Fylamynt.com
Fylamynt is an SRE platform that helps SREs build and run automation workflows.]]></summary>
        <author>
            <name>OpsBecca</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[devops weekly on #mybfio]]></title>
        <id>https://dev.to/melezhik/devops-weekly-on-mybfio-51nh</id>
        <link href="https://dev.to/melezhik/devops-weekly-on-mybfio-51nh"/>
        <updated>2021-11-01T22:02:16.000Z</updated>
        <summary type="html"><![CDATA[Hi! I am a maintainer of #mybfio - friendly reviews system. Throughout a week I pick some interesting projects written in various languages and add them to the listing. I also occasionally write comments on some of the projects.
I hope one will find the listing useful. If you have something interesting devopsish project in mind feel free to add here or there. If add via mybfio interface don't forget to add "devops" tag. 
https://mybf.io/?language=Any&tags=devops 
Thank you]]></summary>
        <author>
            <name>Alexey Melezhik</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Have Single-Page Apps Ruined the Web? (“Transitional Apps”)]]></title>
        <id>https://css-tricks.com/?p=355034</id>
        <link href="https://css-tricks.com/have-single-page-apps-ruined-the-web-transitional-apps/"/>
        <updated>2021-11-01T21:43:10.000Z</updated>
        <summary type="html"><![CDATA[A big heaping 19-minute bowl of not-too-hot, not-too-cold baby bear porridge website building from Rich Harris. 
I’ve certainly overheard more than my fair share of arguments about Single Page Apps (SPAs) vs Multi-Page Apps (MPAs). Although it’s only recently that …
The post Have Single-Page Apps Ruined the Web? (“Transitional Apps”) appeared first on CSS-Tricks. You can support CSS-Tricks by being an MVP Supporter.]]></summary>
        <author>
            <name>Chris Coyier</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[How to Make a gif – Create Animated gifs Without Downloading Software]]></title>
        <id>613f3cba852f4307d372c7e0</id>
        <link href="https://www.freecodecamp.org/news/how-to-make-a-gif-create-animated-gifs-without-downloading-software/"/>
        <updated>2021-11-01T21:31:16.000Z</updated>
        <summary type="html"><![CDATA[A GIF (Graphics Interchange Format) is a small animated image that you can share with your friends and family. And there are many ways to create them without downloading any software. In this article, I will show you how to use the Make a Gif  site, where you can create]]></summary>
        <author>
            <name>freeCodeCamp.org</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[C++ Vector – STD Pattern Vector in CPP with Example Code]]></title>
        <id>617e651033422e07df36827a</id>
        <link href="https://www.freecodecamp.org/news/c-vector-std-pattern-vector-in-cpp-with-example-code/"/>
        <updated>2021-11-01T21:27:30.000Z</updated>
        <summary type="html"><![CDATA[Vectors in C++ are a helpful way to store dynamic data. They also help you avoid having to deal with the not so flexible arrays that are inherited from the C programming language.  This article is a beginner friendly introduction to vectors. It will show you some of their basic]]></summary>
        <author>
            <name>freeCodeCamp.org</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Creating APIs with Python - Free 19-Hour Course]]></title>
        <id>61804dde8bcfae07ca4dfbfd</id>
        <link href="https://www.freecodecamp.org/news/creating-apis-with-python-free-19-hour-course/"/>
        <updated>2021-11-01T21:00:54.000Z</updated>
        <summary type="html"><![CDATA[A lot of API tutorials just teach the absolute minimum. But a production-ready API is much more complicated than what most tutorials teach. We just published a massive 19-hour course on the freeCodeCamp.org YouTube channel that will teach you how to build a full-fledged API using Python and the]]></summary>
        <author>
            <name>freeCodeCamp.org</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Incident Response vs. Incident Managment]]></title>
        <id>https://dev.to/youngshatner/incident-response-vs-incident-managment-5036</id>
        <link href="https://dev.to/youngshatner/incident-response-vs-incident-managment-5036"/>
        <updated>2021-11-01T20:59:45.000Z</updated>
        <summary type="html"><![CDATA[If you found your way to this post, it’s likely because you’re trying to determine what the difference is between incident response and incident management. You may be a new SRE, or switched companies and things aren’t being treated in the same way. The good news is you’ve come to the right place. The bad news is you won’t be leaving with a definitive answer.
Incident response and incident management are defined differently by different organizations around the world. Doing a google on incident response vs incident management brings up an article from the UK NCSC. In this article, they state:
Incident Management (IM) sits within and across any response process, ensuring all stages are handled. IM deals with any communications, media handling, escalations and any reporting issues, pulling t…]]></summary>
        <author>
            <name>Scott Lasica</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Basic Express Server Using Replit.com]]></title>
        <id>https://dev.to/sandrarodgers/basic-express-server-using-replitcom-2ba9</id>
        <link href="https://dev.to/sandrarodgers/basic-express-server-using-replitcom-2ba9"/>
        <updated>2021-11-01T20:17:14.000Z</updated>
        <summary type="html"><![CDATA[In this post, I will introduce how to set up the most basic Express server in Node.JS, and how to see that your server is ready to accept requests. We will also use CodePen to write a fetch GET request to your server so you can see a basic request and response from a frontend (built with CodePen) to a backend (built with Replit).
Replit.com and Codepen.io are tools I use all the time when I want to test some code or play around with something. If you want to practice writing HTTP requests, this is a great way to get you set up to do that.
Go to Replit. Click on the Create Repl button. Search templates for Node.js. Replit will assign a random name to your repl but you can change it to whatever makes sense to you.
Now we will set up the Express server.
You can use Node.JS by itself to create…]]></summary>
        <author>
            <name>SandraRodgers</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Comparing top Node.js frameworks for frontend developers]]></title>
        <id>https://dev.to/logrocket/comparing-top-nodejs-frameworks-for-frontend-developers-i6o</id>
        <link href="https://dev.to/logrocket/comparing-top-nodejs-frameworks-for-frontend-developers-i6o"/>
        <updated>2021-11-01T20:01:38.000Z</updated>
        <summary type="html"><![CDATA[Written by Hulya Karakaya ✏️
The Node.js runtime allows developers to build both front and backend applications using only JavaScript. This means no more context switching between different languages like PHP for the backend and JavaScript for the frontend. Once seen as a toy language for amateurs, Node has revolutionized the web.
Node also helps frontend developers because, if you were a developer before Node was introduced, you had to learn a completely different language to write server side code like PHP. Thanks to Node and its huge ecosystem, frontend developers are able to work with the backend with JavaScript as well.
With Node, you can create production-ready applications ranging from real time chat applications, and microservices, to command line tools, web servers, and APIs. Node…]]></summary>
        <author>
            <name>Matt Angelosanto</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[How to Authenticate Users in Flask with Flask-Login]]></title>
        <id>617a7da433422e07df3668f0</id>
        <link href="https://www.freecodecamp.org/news/how-to-authenticate-users-in-flask/"/>
        <updated>2021-11-01T20:00:24.000Z</updated>
        <summary type="html"><![CDATA[When you're developing applications for the general public, it's important to protect your users' credentials and information. This means you need to know about code structure and how to implement various security measures. In this article, we'll walk through the steps to create a user authentication web app with Flask,]]></summary>
        <author>
            <name>freeCodeCamp.org</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.js Full Example of Next-Iron-Session with Mongoose]]></title>
        <id>https://dev.to/fcpauldiaz/nextjs-full-example-of-next-iron-session-1019</id>
        <link href="https://dev.to/fcpauldiaz/nextjs-full-example-of-next-iron-session-1019"/>
        <updated>2021-11-01T19:41:18.000Z</updated>
        <summary type="html"><![CDATA[Full Example


I couldn't find a complete example of Next.js authentication with next-iron-session so I used all the little pieces I found online and created one to share.
Before talking about authentication we need to setup the model of the User. To do this we will be using mongoose for flexibility and ease of usage. You can ignore the usage of httpStatus and APIError. Here is the user.model.js inside a models folder at root level.
import mongoose from 'mongoose';
import httpStatus from 'http-status';
import APIError from '@/lib/APIError';

/**
 * User Schema
 */
const UserSchema = new mongoose.Schema({
  name: {
    type: String,
    required: true,
    unique: false,
    lowercase: false,
    trim: true,
  },
  email: {
    type: String,
    required: true,
    unique: true,
    trim: t…]]></summary>
        <author>
            <name>Pablo Díaz</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[I made an app to enjoy Halloween🎃🦇🕸]]></title>
        <id>https://dev.to/yuikoito/i-made-an-app-to-enjoy-halloween-oif</id>
        <link href="https://dev.to/yuikoito/i-made-an-app-to-enjoy-halloween-oif"/>
        <updated>2021-11-01T19:00:22.000Z</updated>
        <summary type="html"><![CDATA[Hey guys,
It was Halloween day, but in this self-restraint mode, it's hard to go out and enjoy dressing up in costumes.
Halloween has already passed, but you can even enjoy this app!

URL: https://ohmyface.ai/
The usage is as shown in the following slide.

First, when you visit to https://ohmyface.ai/, you can choose a favorite style from this week's popularity ranking or the overall ranking.

This ranking is based on the number of styles converted, and is updated daily at 9pm (JTC).
Once you have selected a style, all you have to do is just upload the image you want!
Don't worry, the uploaded images are not retained by the server.
The configuration is as follows.
Backend...python
In order to develop the ranking, I created an API to post which style the image was converted in, along with a timestamp, then store the data in dynamo.
In order to aggregate the data, I create a Lambda function that returns the style data sorted by the number of conversions, and save the results in another table in dynamo.
Then, I also created an API to access the dynamo table where the aggregate results are stored and retrieve the data, and call it from the client side to display the ranking order.
For the frontend, I used the usual Next.js + TypeScript, but this time I used Chakra UI for the first time.
Halloween is over, but I think it's an app that can be enjoyed even after Halloween, so I'd be happy if you could play it!
Please send me a message if you need.
yuiko.dev@gmail.com
https://twitter.com/yui_active]]></summary>
        <author>
            <name>Yuiko Ito</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[How to Use Built-in Looping Functions in Python]]></title>
        <id>6114cfae72231b077cdae432</id>
        <link href="https://www.freecodecamp.org/news/python-looping-functions/"/>
        <updated>2021-11-01T18:34:42.000Z</updated>
        <summary type="html"><![CDATA[When you're looping through a sequence in Python like a list, tuple, string, or dictionary, do you ever feel like your code is messy or you want to remove some variables from it?  Fortunately, Python has some useful inbuilt functions which make your code more concise and more readable. In]]></summary>
        <author>
            <name>freeCodeCamp.org</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[React Native custom theme selector]]></title>
        <id>https://dev.to/herbievine/react-native-custom-theme-selector-4227</id>
        <link href="https://dev.to/herbievine/react-native-custom-theme-selector-4227"/>
        <updated>2021-11-01T18:15:05.000Z</updated>
        <summary type="html"><![CDATA[Theming a mobile app can be a tricky thing to do, and quite daunting if you're new to the react native and javascript ecosystem. But I've tried to make this post clear and straightforward, so you shouldn't have any issues (and if you do, leave them in the comments). 
Create a file and add all of your colors to it (I added it to ./src/lib/constants.ts [see a live example here])
You don't have to stick with light and dark, you can add custom themes such as sepia or navy.
You need to create two functions to communicate with the native storage provider. This serves two purposes
It persists the theme on the local device
Allows local storage access for web, iOS and Android
You will need to this package to manage local storage in React Native.
The functions will look something like this:
const os…]]></summary>
        <author>
            <name>Herbie</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Easy Crack]]></title>
        <id>https://dev.to/ntmerk/easy-crack-9o8</id>
        <link href="https://dev.to/ntmerk/easy-crack-9o8"/>
        <updated>2021-11-01T18:06:47.000Z</updated>
        <summary type="html"><![CDATA[Welcome


Here's a quick introduction/presentation so you know what this is and why you're reading it. I'm Merk, a Software Engineering student that really likes reverse engineering (among other things).
In this series we will attempt to reverse engineer and complete challenges from the Reversing.kr website. In this particular case, we will be reversing the password of the challenge Easy Crack.
We're given a Windows executable and must crack it. Using DIE we can see it is a 32-bit executable and is not packed.



We could straight up patch the program so that the flow of execution skips the error message and goes to the right place
This would be the cracker's way; not the reverser's, and would also not give us points since we don't reverse engineer the password ;)
We could look for string references
Given that the executable doesn't seem to have any protections, and knowing the string "Incorrect Password", this method can prove to be useful 
We could set a breakpoint on the Win32 API GetDlgItemText/A/W
Because of how the program window looks, it is very likely that the Dialog reads its content using this function
We'll test our luck looking for string references. Let's fire up x64dbg, attach the executable and look for strings in the main module.

"Congratulation !!" - the good boy
"Incorrect Password" - the bad boy




returns 1, and makes the flow end up executing the bad boy. Taking a look inside, we can see it compares [EBP+C] which contains "5y" with our string starting from the third letter, which is stored in ESI. This is done via "repe cmpsb", which essentially compares several characters.



return 0, and the flow of execution gets further into the program.

"R3versing" is stored in ESI before some comparisons.]]></summary>
        <author>
            <name>NtMerk</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[How a single JSON file could become your entire code base]]></title>
        <id>https://dev.to/zelcion/how-a-single-json-file-could-become-your-entire-code-base-356j</id>
        <link href="https://dev.to/zelcion/how-a-single-json-file-could-become-your-entire-code-base-356j"/>
        <updated>2021-11-01T18:03:56.000Z</updated>
        <summary type="html"><![CDATA[The Problem


Well, it is no news for us that developing software is expensive, and takes A LOT of time and effort, after all, we're talking about code, good code.
It is that kind of code which solves a problem, and it does so while being elegant and readable... But doing that is hard, and here is where we touch the surface of a difficult problem.
Good code is really expensive, and inaccessible for most people and companies.
Not only bad/faulty code often fails to solve the problem it should, it also becomes the own problem. I bet you once had to understand the incredibly messy class system of a legacy code base, just because you were tasked to fix a "simple" bug.
I have a fun personal theory, that all ever created about code can be somewhat traced back to the code accessibility problem, w…]]></summary>
        <author>
            <name>Fábio M Jr</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Bootstrap a consul cluster in AWS]]></title>
        <id>https://dev.to/stympy/bootstrap-a-consul-cluster-in-aws-3gk8</id>
        <link href="https://dev.to/stympy/bootstrap-a-consul-cluster-in-aws-3gk8"/>
        <updated>2021-11-01T17:39:28.000Z</updated>
        <summary type="html"><![CDATA[I recently needed to stand up a test consul cluster, and I thought it might be useful to share my notes. Here's what you can do to quickly get a consul cluster going...
First, create an IAM role named consul and attach the AmazonEC2ReadOnlyAccess policy to the role.
Next, boot three Ubuntu instances, assigning the just-created role to them as the IAM role, and the following user data:
#!/bin/bash

curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
sudo apt-get update && sudo apt-get install consul

echo "datacenter = \"$(ec2metadata --public-hostname | cut -d. -f2)\"" >> /etc/consul.d/consul.hcl 
echo 'server = true' >> /etc/consul.d/consul.hcl
echo 'bootstrap_expect = 3' >> /etc/consul.d/consul.hcl
echo 'retry_join = ["provider=aws tag_key=Role tag_value=consul"]' >> /etc/consul.d/consul.hcl

systemctl start consul

This will install the latest consul on each of the instances, configure consul to operate in server mode, and bootstrap the cluster.
You also want to add the Role tag with the value of consul to the instances. This is how the instances will find each other to form a cluster.
After you boot the instances, edit the security group to allow inbound traffic from the security group (so the instances can connect to each other).
Once those steps are done, you can confirm the cluster is working by connecting to any of the instances and running consul members. You should see the three instances listed as servers.
Now you can use your consul cluster by pointing consul clients at the private IP of any of the instances.]]></summary>
        <author>
            <name>Ben Curtis</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[WordPress: How to disable XMLRPC]]></title>
        <id>https://dev.to/alexey_dev/wordpress-how-to-disable-xmlrpc-4ei4</id>
        <link href="https://dev.to/alexey_dev/wordpress-how-to-disable-xmlrpc-4ei4"/>
        <updated>2021-11-01T17:05:21.000Z</updated>
        <summary type="html"><![CDATA[You should open the .htaccess file in the main directory of WordPress and put a couple of strings of code like in example below.
<Files xmlrpc.php>
order deny,allow
deny from all
</Files>

Or you can open it for an IP address
<Files xmlrpc.php>
order deny,allow
deny from all
allow from 192.168.0.1
</Files>]]></summary>
        <author>
            <name>Alexey</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hawk Open Source Project]]></title>
        <id>https://dev.to/medpaf/hawk-open-source-project-ao</id>
        <link href="https://dev.to/medpaf/hawk-open-source-project-ao"/>
        <updated>2021-11-01T17:04:50.000Z</updated>
        <summary type="html"><![CDATA[Hawk is a network and pentest utility that I developed so that I could perform different kinds of task using the same suite, instead of jumping from one tool to another.
ifconfig, 
ping, 
traceroute, 
port scans (including SYN, TCP, UDP, ACK, comprehensive scan), 
host discovery (scan for up devices on a local network), 
MAC address detection (get MAC address of a host IP on a local network), 
banner grabbing, 
DNS checks (with geolocation information), 
WHOIS, 
subdomain enumeration, 
vulnerability reconnaissance, - 
packet sniffing, 
MAC spoofing, 
IP spoofing, 
SYN flooding, 
deauth attack, 
brute-force attack (beta).
Other features are still being implemented. Future implementations may include WAF detection, DNS enumeration, traffic analysis, XSS vulnerability scanner, ARP cache poisoning, DNS cache poisoning, MAC flooding, ping of death, network disassociation attack (not deauth attack), OSINT, exploits, some automated tasks and others.
Link to the repository: 
https://github.com/medpaf/hawk]]></summary>
        <author>
            <name>Paulo Medeiros</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Keeping Kubernetes Clusters Clean and Tidy]]></title>
        <id>https://dev.to/martinheinz/keeping-kubernetes-clusters-clean-and-tidy-1i3c</id>
        <link href="https://dev.to/martinheinz/keeping-kubernetes-clusters-clean-and-tidy-1i3c"/>
        <updated>2021-11-01T16:58:29.000Z</updated>
        <summary type="html"><![CDATA[As your cluster grows, so does the number of resources, volumes or other API objects and sooner or later you will reach the limits somewhere. Whether it's etcd, volumes, memory or CPU. Why subject yourself to unnecessary pain and trouble when you can setup simple, yet sophisticated rules, automation and monitoring that can keep you cluster tidy and clean without rogue workloads eating your resources or stale objects lying around?
Some forgotten Pods, unused persistent volume, Completed Jobs or maybe old ConfigMap/Secret doesn't matter, or does it? It's just sitting there and I might need it at some point!
Well, it isn't causing any damage right now, but when things accumulate over time they start having impact on cluster performance and stability. So, let's look at some common/basic issues…]]></summary>
        <author>
            <name>Martin Heinz</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Implementing React Check Permissions: the Hook]]></title>
        <id>https://dev.to/bwca/implementing-react-check-permissions-the-hook-3m20</id>
        <link href="https://dev.to/bwca/implementing-react-check-permissions-the-hook-3m20"/>
        <updated>2021-11-01T16:53:20.000Z</updated>
        <summary type="html"><![CDATA[You can follow the code in this article in the commit in the repo I made for the series.
Continuing our series on implementing permission checking tools in React application, in this article we take a look at the check permissions hook and how to implement it.
The hook is actually the place where the logic of obtaining current permissions can be placed, then it can expose a method for checking permissions in a way that does not require components to bother with getting active user permissions from the profile or whatever.
Let us create a folder called models and place the types for our future hook:
// ./permissions-validation/models/use-check-permissions.ts
export type UseCheckPermissions = () => UseCheckPermissionsMethods;

export interface UseCheckPermissionsMethods {
    checkPermission…]]></summary>
        <author>
            <name>Volodymyr Yepishev</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Omitir un Interceptor de Angular usando Context para Http Interceptors]]></title>
        <id>https://dev.to/ricardochl/omitir-un-interceptor-de-angular-usando-context-para-http-interceptors-cf0</id>
        <link href="https://dev.to/ricardochl/omitir-un-interceptor-de-angular-usando-context-para-http-interceptors-cf0"/>
        <updated>2021-11-01T16:21:18.000Z</updated>
        <summary type="html"><![CDATA[Los interceptors en Angular llegaron desde la versión 4.3 y básicamente nos brindan un mecanismo para interceptar y/o mutar las solicitudes y respuestas http. Más detalles aquí.
Los interceptors en Angular interceptan todas las peticiones http por defecto, pero hay ocasiones en donde deseamos omitir un interceptor para algunas solicitudes.
Antes de la versión 12 de Angular era muy común hacer esto de alguna de las siguientes formas:
Agregar encabezados http en la solicitud http y luego evaluar ese encabezado en el interceptor.
Crear un nuevo httpClient para esa solicitud.
Administrar sus inyecciones de HttpClient con tokens.
Utilizar httpBackend y saltarse todos los interceptors.
Desde la versión 12 de Angular tenemos una mejor forma de hacer esto, la cual consiste en pasar metadatos a los…]]></summary>
        <author>
            <name>Ricardo Chavarria</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Omitir un Interceptor de Angular usando Context para Http Interceptors]]></title>
        <id>https://dev.to/ricardochl/omitir-un-interceptor-de-angular-usando-context-para-http-interceptors-cf0</id>
        <link href="https://dev.to/ricardochl/omitir-un-interceptor-de-angular-usando-context-para-http-interceptors-cf0"/>
        <updated>2021-11-01T16:21:18.000Z</updated>
        <summary type="html"><![CDATA[Los interceptors en Angular llegaron desde la versión 4.3 y básicamente nos brindan un mecanismo para interceptar y/o mutar las solicitudes y respuestas http. Más detalles aquí.
Los interceptors en Angular interceptan todas las peticiones http por defecto, pero hay ocasiones en donde deseamos omitir un interceptor para algunas solicitudes.
Antes de la versión 12 de Angular era muy común hacer esto de alguna de las siguientes formas:
Agregar encabezados http en la solicitud http y luego evaluar ese encabezado en el interceptor.
Crear un nuevo httpClient para esa solicitud.
Administrar sus inyecciones de HttpClient con tokens.
Utilizar httpBackend y saltarse todos los interceptors.
Desde la versión 12 de Angular tenemos una mejor forma de hacer esto, la cual consiste en pasar metadatos a los…]]></summary>
        <author>
            <name>Ricardo Chavarria</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Learning Sed Is Beneficial For Linux Users]]></title>
        <id>https://dev.to/huyhoang8398/learning-sed-is-beneficial-for-linux-users-149l</id>
        <link href="https://dev.to/huyhoang8398/learning-sed-is-beneficial-for-linux-users-149l"/>
        <updated>2021-11-01T15:59:14.000Z</updated>
        <summary type="html"><![CDATA[One of the most important command line utility in Linux is sed which is a stream editor.
Essentially what it can do is it allows you to search for String of text or specific pattern and then replace it pattern with whatever you tell sed to replace with, so it is really kind of search and replace function.
sed 's/find/replace/' <oldfile >newfile

So we are telling sed that go search for the word find then replace it with the word replace and what it does is it searches every lines for its first instance of the word find. So it not gonna replace every instances of find, only the first time it appears on each line from oldfile and then writes it to newfile.
Sometimes you want to replace every find in oldfile you just need to add global substitution g for every instances find.
sed 's/find/repl…]]></summary>
        <author>
            <name>Do Hoang</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[How to add a someone has logged into my account feature?]]></title>
        <id>https://dev.to/abidgulshahid/how-to-add-a-someone-has-logged-into-my-account-feature-18o2</id>
        <link href="https://dev.to/abidgulshahid/how-to-add-a-someone-has-logged-into-my-account-feature-18o2"/>
        <updated>2021-11-01T15:52:18.000Z</updated>
        <summary type="html"><![CDATA[it would be better,if u provide any tutorial etc.]]></summary>
        <author>
            <name>Abid Gul Shahid</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[How to Use CodePen – A Beginner&#x27;s Guide]]></title>
        <id>6048a6f0a7946308b7685a2c</id>
        <link href="https://www.freecodecamp.org/news/how-to-use-codepen/"/>
        <updated>2021-11-01T15:47:46.000Z</updated>
        <summary type="html"><![CDATA[CodePen is a popular online code editor used by many developers around the world. It is also one of the recommended editors you can use for the freeCodeCamp curriculum. CodePen is only for frontend projects and supports HTML, CSS, and JavaScript. If you need to build a project with a]]></summary>
        <author>
            <name>freeCodeCamp.org</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[How to Improve and Automate Your Web Development Workflow]]></title>
        <id>6176aeb3d48e1707b6d7b0ab</id>
        <link href="https://www.freecodecamp.org/news/how-to-improve-your-web-development-workflow/"/>
        <updated>2021-11-01T15:47:31.000Z</updated>
        <summary type="html"><![CDATA[The modern age of Web Development is incredible. We have a plethora of frameworks and libraries to help us work more efficiently, tons of quality resources to learn from, and numerous projects to inspire us. My decade-long journey as a web developer may not be very different from many of]]></summary>
        <author>
            <name>freeCodeCamp.org</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Alternative Approach to Dynamic Environments: Using Octopod]]></title>
        <id>https://dev.to/typeable/alternative-approach-to-dynamic-environments-using-octopod-2pi7</id>
        <link href="https://dev.to/typeable/alternative-approach-to-dynamic-environments-using-octopod-2pi7"/>
        <updated>2021-11-01T15:30:57.000Z</updated>
        <summary type="html"><![CDATA[Author: Sergey Shurlakov
In this post, I’d like to tell you how we use dynamic environments (review or preview environments) in our work here at Typeable, what issues we’ve managed to solve, and how and why we use our Octopod solution for these purposes instead of GitLab Dynamic Environments. In case you don’t know what the dynamic environment is, I recommend reading the post by Flant where the author gives a detailed account of the types of dynamic environments, their purpose and applications. The author also looks into this topic using GitLab as an example and provides detailed cases and descriptions. As for us, we use an alternative approach, somewhat different in terms of ideology, and work with review environments in Octopod. Previously we related the history of Octopod creation and t…]]></summary>
        <author>
            <name>Catherine Galkina</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[The new RouterOutlet events in Angular 13]]></title>
        <id>https://dev.to/dimakuba/the-new-routeroutlet-events-in-angular-13-3bai</id>
        <link href="https://dev.to/dimakuba/the-new-routeroutlet-events-in-angular-13-3bai"/>
        <updated>2021-11-01T15:05:16.000Z</updated>
        <summary type="html"><![CDATA[It's common practice in angular space to cache reused components with the help of RouteReuseStrategy:
import { Injectable } from '@angular/core';
import {
  ActivatedRouteSnapshot,
  DetachedRouteHandle,
  Route,
  RouteReuseStrategy,
} from '@angular/router';

@Injectable()
export class CustomReuseStrategy extends RouteReuseStrategy {
  private pool = new WeakMap<Route, DetachedRouteHandle>();

  public shouldAttach(route: ActivatedRouteSnapshot): boolean {
    return !!this.pool.get(route.routeConfig);
  }

  public retrieve(route: ActivatedRouteSnapshot): DetachedRouteHandle | null {
    return this.pool.get(route.routeConfig);
  }

  public shouldDetach(route: ActivatedRouteSnapshot): boolean {
    return (
      route.routeConfig.data?.shouldReuse && !this.pool.get(route.routeConfig)
…]]></summary>
        <author>
            <name>Dmitrij Kuba</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[The new RouterOutlet events in Angular 13]]></title>
        <id>https://dev.to/dimakuba/the-new-routeroutlet-events-in-angular-13-3bai</id>
        <link href="https://dev.to/dimakuba/the-new-routeroutlet-events-in-angular-13-3bai"/>
        <updated>2021-11-01T15:05:16.000Z</updated>
        <summary type="html"><![CDATA[It's common practice in angular space to cache reused components with the help of RouteReuseStrategy:
import { Injectable } from '@angular/core';
import {
  ActivatedRouteSnapshot,
  DetachedRouteHandle,
  Route,
  RouteReuseStrategy,
} from '@angular/router';

@Injectable()
export class CustomReuseStrategy extends RouteReuseStrategy {
  private pool = new WeakMap<Route, DetachedRouteHandle>();

  public shouldAttach(route: ActivatedRouteSnapshot): boolean {
    return !!this.pool.get(route.routeConfig);
  }

  public retrieve(route: ActivatedRouteSnapshot): DetachedRouteHandle | null {
    return this.pool.get(route.routeConfig);
  }

  public shouldDetach(route: ActivatedRouteSnapshot): boolean {
    return (
      route.routeConfig.data?.shouldReuse && !this.pool.get(route.routeConfig)
…]]></summary>
        <author>
            <name>Dmitrij Kuba</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Angular: Is trackBy necessary with ngFor?]]></title>
        <id>https://dev.to/rfornal/angular-is-trackby-necessary-with-ngfor-594e</id>
        <link href="https://dev.to/rfornal/angular-is-trackby-necessary-with-ngfor-594e"/>
        <updated>2021-11-01T14:32:02.000Z</updated>
        <summary type="html"><![CDATA[In a recent presentation, I had an individual very focused on the need for trackBy on my ngFor ... to the exclusion of everything else in the talk. He even went as far as to push a pull-request on my talk repository to add the change.
I was perplexed.
I know there used to be a need for trackBy.
Experience has shown me little need for it's use recently.
Some quick research said that it is only needed if there are issues with performance with modern Angular.
So, I decided to test this out myself.
In my first iteration of testing, I tested loading data to see if there was a difference in load times when displaying them with and without the trackBy. Here are the first set of tests I ran that showed some hopeful results.
Basically, the data was 100,000 records with:
An integer, 0-based index.
A…]]></summary>
        <author>
            <name>bob.ts</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[So, You Want to Build an @mention Autocomplete Feature?]]></title>
        <id>https://css-tricks.com/?p=354588</id>
        <link href="https://css-tricks.com/so-you-want-to-build-an-mention-autocomplete-feature/"/>
        <updated>2021-11-01T14:27:26.000Z</updated>
        <summary type="html"><![CDATA[We’re all familiar with the concept of autocompletion, right? You type something into a search box and it tries to guess what you’re looking for as you type, displaying suggestions, often below the cursor. While we’re used to autocomplete on …
The post So, You Want to Build an @mention Autocomplete Feature? appeared first on CSS-Tricks. You can support CSS-Tricks by being an MVP Supporter.]]></summary>
        <author>
            <name>Sarah Dayan</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Troubleshooting GitHub Webhooks]]></title>
        <id>https://dev.to/hookdeck/troubleshooting-github-webhooks-5aoi</id>
        <link href="https://dev.to/hookdeck/troubleshooting-github-webhooks-5aoi"/>
        <updated>2021-11-01T13:43:58.000Z</updated>
        <summary type="html"><![CDATA[Introduction


In a previous article, I demonstrated the use of GitHub webhooks in a simple tutorial using a sample API that logged webhook events. In this article, we will learn how to debug common issues with GitHub webhooks using the same sample project. This time, I have introduced some bugs into the project that we are going to learn how to debug.
To begin there are a few things you need to have or set up, including: 
A GitHub repository
Node.js installed on your system to run the sample project
A publicly accessible URL to the API endpoint. We will use the Hookdeck CLI to achieve this. To install the Hookdeck CLI, check out this page.
Clear visualization of error messages. The Hookdeck CLI will help us with event pages where error details can be inspected.
A text editor for editing c…]]></summary>
        <author>
            <name>Fikayo Adepoju</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hiring]]></title>
        <id>https://dev.to/nakullukan/hiring-397n</id>
        <link href="https://dev.to/nakullukan/hiring-397n"/>
        <updated>2021-11-01T13:43:39.000Z</updated>
        <summary type="html"><![CDATA[matrixlukan@gmail.com]]></summary>
        <author>
            <name>Nakul</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Metaverse metaverse metaverse blah blah blah]]></title>
        <id>https://dev.to/johnnymccodes/metaverse-metaverse-metaverse-blah-blah-blah-2pfk</id>
        <link href="https://dev.to/johnnymccodes/metaverse-metaverse-metaverse-blah-blah-blah-2pfk"/>
        <updated>2021-11-01T13:25:32.000Z</updated>
        <summary type="html"><![CDATA[BREAKING NEWS: We have indeed released a new episode of #CouncilofTheWiseDevelopers, but how robust is our metaverse strategy?]]></summary>
        <author>
            <name>johnnymccodes</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Intigriti 1021 - XSS Challenge Writeup]]></title>
        <id>https://dev.to/therealbrenu/intigriti-1021-xss-challenge-writeup-253m</id>
        <link href="https://dev.to/therealbrenu/intigriti-1021-xss-challenge-writeup-253m"/>
        <updated>2021-11-01T12:35:16.000Z</updated>
        <summary type="html"><![CDATA[Halloween came with an awesome XSS Challenge by Intigriti, and I'm here to present the solution I found for this. Hope you like it 🦇
Reading the content of the page, at the first glance, it tells us that there is a query parameter called html, which is capable of define partially what's displayed to the user. When we define, for example, a <h1> tag to this parameter, we are going to get returned a page with this tag being reflected, which is already an HTML injection. From now on, we will be working to make it become an XSS.

If we simply try to inject something like <script>alert(document.domain);</script>, this script tag will be reflected, but the code itself will not be executed. Why? Well, if we look at the head of the page, we are going to find something interesting:
<meta http-equi…]]></summary>
        <author>
            <name>Breno Vitório</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Resty: a tiny, radix-tree based library for building RESTful APIs]]></title>
        <id>https://dev.to/brielov/resty-a-tiny-radix-tree-based-library-for-building-restful-apis-166a</id>
        <link href="https://dev.to/brielov/resty-a-tiny-radix-tree-based-library-for-building-restful-apis-166a"/>
        <updated>2021-11-01T12:20:23.000Z</updated>
        <summary type="html"><![CDATA[A few days ago I posted about a library I made called typed and it never happened to me before that people would actually use something I made. The thing is that I made typed to be a companion library to resty which is a thin wrapper around Node's http core module.
Resty is what I think is the best way I'd like to write RESTful APIs in Node. It borrows some of its syntax from the fetch API and it is of course type-safe. Let me show you how I'd like to write my endpoints.

Having an endpoint of about three lines of code is pretty nice to me, specially because there's type-safety involved. Take a closer look at request.json and request.query. They both require a typed function to be passed in. If the validation fails, a 400 Bad Request error is returned with a detailed explanation of what we…]]></summary>
        <author>
            <name>Gabriel Vaquer</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Resty: a tiny, radix-tree based library for building RESTful APIs]]></title>
        <id>https://dev.to/brielov/resty-a-tiny-radix-tree-based-library-for-building-restful-apis-166a</id>
        <link href="https://dev.to/brielov/resty-a-tiny-radix-tree-based-library-for-building-restful-apis-166a"/>
        <updated>2021-11-01T12:20:23.000Z</updated>
        <summary type="html"><![CDATA[A few days ago I posted about a library I made called typed and it never happened to me before that people would actually use something I made. The thing is that I made typed to be a companion library to resty which is a thin wrapper around Node's http core module.
Resty is what I think is the best way I'd like to write RESTful APIs in Node. It borrows some of its syntax from the fetch API and it is of course type-safe. Let me show you how I'd like to write my endpoints.

Having an endpoint of about three lines of code is pretty nice to me, specially because there's type-safety involved. Take a closer look at request.json and request.query. They both require a typed function to be passed in. If the validation fails, a 400 Bad Request error is returned with a detailed explanation of what we…]]></summary>
        <author>
            <name>Gabriel Vaquer</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[TypeScript e create-react-app: Importando uma lib em TypeScript no contexto de um monorepo sem transpilar para JavaScript]]></title>
        <id>https://dev.to/eduardojm/typescript-e-create-react-app-importando-uma-lib-em-typescript-no-contexto-de-um-monorepo-sem-transpilar-para-javascript-cbi</id>
        <link href="https://dev.to/eduardojm/typescript-e-create-react-app-importando-uma-lib-em-typescript-no-contexto-de-um-monorepo-sem-transpilar-para-javascript-cbi"/>
        <updated>2021-11-01T12:07:37.000Z</updated>
        <summary type="html"><![CDATA[Primeiro, precisamos entender o contexto ao qual pretendo desenvolver esse texto. Suponhamos que você tenha um monorepo (nesse caso, em específico, usando o yarn workspaces) com um projeto em React (criado utilizando o create-react-app) e um projeto de um sdk com chamadas para uma api qualquer, feito em TypeScript. O Objetivo principal é: importar o pacote sdk no app React sem a necessidade de transpilar/compilar o projeto sdk em toda alteração.
Esse é um texto escrito com uma motivação em específica: quando precisei fazer isso não encontrei nenhum material parecido e isso acabou me custando algum tempo de pesquisa e, portanto, resolvi deixar a solução encontrada registrada.
Como já mencionado no primeiro parágrafo, a estrutura do projeto, utilizando o yarn workspaces é basicamente:

O pac…]]></summary>
        <author>
            <name>Eduardo Oliveira</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[NodeJS + Express part 5: Routes and Controllers]]></title>
        <id>https://dev.to/ericchapman/nodejs-express-part-5-routes-and-controllers-55d3</id>
        <link href="https://dev.to/ericchapman/nodejs-express-part-5-routes-and-controllers-55d3"/>
        <updated>2021-11-01T11:09:38.000Z</updated>
        <summary type="html"><![CDATA[Here is a series of articles that will allow you to create backend applications with NodeJS + Express.
This series is the continuation of my series on the basics of NodeJS. If you don't have basic knowledge of NodeJS read this series first: Introduction to NodeJS
Node.js is today a must, so it is essential for a developer to master it.
So I will publish a new article about every two days and little by little you will learn everything there is to know about Node.js + Espress
To not miss anything follow me on twitter: https://twitter.com/EricTheCoder_
As you seen in the previous article, creating a CRUD API with Express is easy. But you should have notice by now that all that code in the same file is bulky and we will soon lose ourself.
By convention, Express developper split code in differe…]]></summary>
        <author>
            <name>Eric The Coder</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[NodeJS + Express partie 5 : Routes et Controllers]]></title>
        <id>https://dev.to/ericlecodeur/nodejs-express-partie-5-routes-et-controllers-18l</id>
        <link href="https://dev.to/ericlecodeur/nodejs-express-partie-5-routes-et-controllers-18l"/>
        <updated>2021-11-01T11:04:18.000Z</updated>
        <summary type="html"><![CDATA[Voici une série d'articles qui vous permettra créer des applications backend avec NodeJS + Express.
Cette série est la suite de ma série sur les bases de NodeJS. Si vous n'avez pas les connaissances de bases en NodeJS lisez cette série d'abord : Introduction à NodeJS
Node.js est aujourd'hui un incontournable, il est donc essentiel pour un développeur de le maitriser.
Je vais donc publier un nouvel article environ au deux jours et petit à petit vous apprendrez tout ce qu'il y a à savoir sur Node.js + Espress
Pour ne rien manquer suivez moi sur twitter : https://twitter.com/EricLeCodeur
Comme vous l'avez vu dans l'article précédent, créer une API CRUD avec Express est simple. Mais vous devriez avoir remarqué maintenant que tout ce code dans le même fichier c'est volumineux et nous allons bie…]]></summary>
        <author>
            <name>Eric Le Codeur</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[My sleek and modern Linux development machine in 2021]]></title>
        <id>https://dev.to/deepu105/my-sleek-and-modern-linux-development-machine-in-2021-2d8f</id>
        <link href="https://dev.to/deepu105/my-sleek-and-modern-linux-development-machine-in-2021-2d8f"/>
        <updated>2021-11-01T10:59:53.000Z</updated>
        <summary type="html"><![CDATA[Originally published at deepu.tech.
One of my most popular posts of all time was when I wrote about my beautiful Linux development machine in 2019. Since I got a new machine and a new setup, it naturally calls for a follow-up.
By now, I'm a die-hard Linux user. It's been five years since I'm using Linux as my primary OS. I would take a Linux machine any day over macOS or Windows. I own a Windows gaming PC and a Macbook pro from work. Still, they are nowhere near the Linux experience, personally for me. My primary driver is my Linux laptop, and I can't be any happier with it (well, I can, I'll come to that at the end of the post).
So a Dell Precision from 2016 was my primary device until last month, and it is still going good. Fedora runs smoothly on it for most parts. There is some minor g…]]></summary>
        <author>
            <name>Deepu K Sasidharan</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Release new Library to measure & compare your Code!!]]></title>
        <id>https://dev.to/youbadev/release-new-library-to-measure-compare-your-code-1892</id>
        <link href="https://dev.to/youbadev/release-new-library-to-measure-compare-your-code-1892"/>
        <updated>2021-11-01T10:38:58.000Z</updated>
        <summary type="html"><![CDATA[Hello Guys, I hope All of you doing well.
Sometimes we want to measure our code to check how much time it took to work, Moreover, after improving the code we'd like to check if it works more efficiently than the older version, Or for academic purpose we want to compare algorithms to check the time complexity on a chart, For that reason I Present you YubaPerf
npm i @youba/yubaperf
# OR
yarn add @youba/yubaperf

To measure your code, you need to use these functions:
perf.start("Algorithm1");
//The code you want to measure
perf.end("Algorithm1");
console.log(perf.result("Algorithm1"));

The concept here is to pass one or more than function with multiple args to measure and compare between them,
You simply need:
perfom.setfuncsToCompareSync([addUpToFirst, addUpToSecond], args);
perfom.generateChart(); // the chart located on perf/index.html file

Passing Array of functions & Another one for arguments .the arguments may be a simple Array like :
[1,10,1000,1000,122] Or dimensional one for Functions who has more than input like [['yes',19],['yes',1900],['yes',19999]]
The Chart: 

The lib is on development,the next version will have more features like: 
Comparing async functions
setfuncsToCompareSync Return an object of the result 
...
For more information on the library you can check the repo HERE]]></summary>
        <author>
            <name>YoubaDev</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Release new Library to measure & compare your Code!!]]></title>
        <id>https://dev.to/youbadev/release-new-library-to-measure-compare-your-code-1892</id>
        <link href="https://dev.to/youbadev/release-new-library-to-measure-compare-your-code-1892"/>
        <updated>2021-11-01T10:38:58.000Z</updated>
        <summary type="html"><![CDATA[Hello Guys, I hope All of you doing well.
Sometimes we want to measure our code to check how much time it took to work, Moreover, after improving the code we'd like to check if it works more efficiently than the older version, Or for academic purpose we want to compare algorithms to check the time complexity on a chart, For that reason I Present you YubaPerf
npm i @youba/yubaperf
# OR
yarn add @youba/yubaperf

To measure your code, you need to use these functions:
perf.start("Algorithm1");
//The code you want to measure
perf.end("Algorithm1");
console.log(perf.result("Algorithm1"));

The concept here is to pass one or more than function with multiple args to measure and compare between them,
You simply need:
perfom.setfuncsToCompareSync([addUpToFirst, addUpToSecond], args);
perfom.generateChart(); // the chart located on perf/index.html file

Passing Array of functions & Another one for arguments .the arguments may be a simple Array like :
[1,10,1000,1000,122] Or dimensional one for Functions who has more than input like [['yes',19],['yes',1900],['yes',19999]]
The Chart: 

The lib is on development,the next version will have more features like: 
Comparing async functions
setfuncsToCompareSync Return an object of the result 
...
For more information on the library you can check the repo HERE]]></summary>
        <author>
            <name>YoubaDev</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Code design pattern: Singleton]]></title>
        <id>https://dev.to/jjung99/code-design-pattern-singleton-55nk</id>
        <link href="https://dev.to/jjung99/code-design-pattern-singleton-55nk"/>
        <updated>2021-11-01T10:24:24.000Z</updated>
        <summary type="html"><![CDATA[A post by jjung99]]></summary>
        <author>
            <name>jjung99</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Strapi Tutorial: Build a Blog with Next.js]]></title>
        <id>https://dev.to/shahednasser/strapi-tutorial-build-a-blog-with-nextjs-4531</id>
        <link href="https://dev.to/shahednasser/strapi-tutorial-build-a-blog-with-nextjs-4531"/>
        <updated>2021-11-01T10:13:21.000Z</updated>
        <summary type="html"><![CDATA[This article was originally posted on my personal blog
If you want to start your own blog, or just want to learn a cool CMS platform, then you should check out Strapi. Strapi is an open-source Node.js headless CMS. This means that you set up Strapi and plug it into any frontend or system you have.
In this tutorial we'll first look at why you should use Strapi, how to set it up from scratch, then we'll use one of Strapi's starters to easily create a blog with Next.js.
Headless APIs provide you with a lot of flexibility. When you want to develop a system with different components, you don't have to worry about finding one framework or programming language that you can use to be able to implement all the components.
Strapi allows you to integrate CMS into your projects regardless of what they…]]></summary>
        <author>
            <name>Shahed Nasser</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Command Line Based Web Portfolio!]]></title>
        <id>https://dev.to/ashwathmittal/command-line-based-web-portfolio-11n6</id>
        <link href="https://dev.to/ashwathmittal/command-line-based-web-portfolio-11n6"/>
        <updated>2021-11-01T10:06:39.000Z</updated>
        <summary type="html"><![CDATA[👋Hi there fellow developers! 🎊
In the past, I was powerfully impressed by a portfolio that was inspired by 🪟 Windows 11 made by VovaCodes (https://www.vovacodes.ca/).
Recently, I had some free time and I finally decided to turn this plan into reality. So, I started working on Command Line 
https://ashwathmittal.github.io/AshwathMittal/#/terminal
Source Code On GitHub: https://github.com/AshwathMittal/AshwathMittal/
This is an Angular app. It is written in TypeScript, so if you're learning it, you could explore the GitHub repo 💥
Cheers! 🤙
Keep in mind, this is a work in progress! More features to come (and bugs tackled 😄)]]></summary>
        <author>
            <name>Ashwath Mittal</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Command Line Based Web Portfolio!]]></title>
        <id>https://dev.to/ashwathmittal/command-line-based-web-portfolio-11n6</id>
        <link href="https://dev.to/ashwathmittal/command-line-based-web-portfolio-11n6"/>
        <updated>2021-11-01T10:06:39.000Z</updated>
        <summary type="html"><![CDATA[👋Hi there fellow developers! 🎊
In the past, I was powerfully impressed by a portfolio that was inspired by 🪟 Windows 11 made by VovaCodes (https://www.vovacodes.ca/).
Recently, I had some free time and I finally decided to turn this plan into reality. So, I started working on Command Line 
https://ashwathmittal.github.io/AshwathMittal/#/terminal
Source Code On GitHub: https://github.com/AshwathMittal/AshwathMittal/
This is an Angular app. It is written in TypeScript, so if you're learning it, you could explore the GitHub repo 💥
Cheers! 🤙
Keep in mind, this is a work in progress! More features to come (and bugs tackled 😄)]]></summary>
        <author>
            <name>Ashwath Mittal</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[search Index with AWS- S3 is failing]]></title>
        <id>https://dev.to/apsaradhanasekar11/search-index-with-aws-s3-is-failing-4k0j</id>
        <link href="https://dev.to/apsaradhanasekar11/search-index-with-aws-s3-is-failing-4k0j"/>
        <updated>2021-11-01T09:55:08.000Z</updated>
        <summary type="html"><![CDATA[Hi, I tried to create index with (search-index npm module) with a different backend (AWS -S3 bucket) using the s3leveldown module as a DB store option. The Index is being created, but while querying using _SEARCH/ QUERY methods, the result set is inappropriate. Like for eg, when I initialise the DB with the S3 bucket and use the PUT method to add documents, where my text is "Final is the file name".. and "what is the version" . This is how its created ::
current Indexed one:: { key: 'description:file#0.60', value: [ '1635744247556-1-1' ] }.
I am able to see the above in my store, when I do a createReadStream. But when my search keyword is "version", my expected result should be only the 2nd indexed document. But it gives me both 1st and 2nd.I tried using both _SEARCH/ QUERY methods, but both r giving same wrong/additional results.
https://github.com/fergiemcdowall/search-index/blob/master/test/src/memdown-test.js .
Can someone guide on the correct approach for implementing other backend store options like AWS-S3 ?]]></summary>
        <author>
            <name>ApsaraDhanasekar11</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Start server and test scripts - NPM script - ready solution.]]></title>
        <id>https://dev.to/victorshelepen/start-server-and-test-scripts-npm-script-ready-solution-poa</id>
        <link href="https://dev.to/victorshelepen/start-server-and-test-scripts-npm-script-ready-solution-poa"/>
        <updated>2021-11-01T09:53:52.000Z</updated>
        <summary type="html"><![CDATA[Summary I have made my alternative finding different pitfalls. Meanwhile We were applying the library start-server-and-test to our solution. Surprisingly  start-server-and-test covered all pitfalls. The solution solves the problem.
  
It is a simple script and we need to understand it. It does how it is written. It runs the server and then tests it. For details check the documentation page of start-server-and-test
Pitfalls:
All processes have to be ordered.
Pipes have to be disposable to be finished.
Tests need to know when the server starts to start testing.
The script has to know when tests are finished to terminate all processes.
It takes only three parameters:
The first: To run the server.
The second: Server path. Address to wait for its availability.
The third: Test commands.
How it works
P.S. It should help you to start using the script faster.]]></summary>
        <author>
            <name>Victor Shelepen</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[The admin panel I wanted]]></title>
        <id>https://dev.to/camillavk/the-admin-panel-i-wanted-4hhd</id>
        <link href="https://dev.to/camillavk/the-admin-panel-i-wanted-4hhd"/>
        <updated>2021-11-01T08:48:42.000Z</updated>
        <summary type="html"><![CDATA[While working at an insurtech, I had to roll out a new microservice every month or so.
Each time we did this it came with a new admin panel, sets of credentials and another backend tool to keep maintained.
From working at a few different startups it seems to me that everyone starts from scratch and usually build something that's:
{resources} Built with a fraction of the resources really needed and gets limited improvements
{permissions} Has no or very limited permissions/user management
{compliance} Is in no way GDPR or any other data legislation compliant
{ui} Has an interface that looks terrible and is probably hard to navigate
{audit} Has no way to audit what users are doing or have done
At the insurtech at least we had a template for the admin panels. And yes we could/should have gotte…]]></summary>
        <author>
            <name>Camilla van Klinken</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Steering clear of the dependency trap]]></title>
        <id>https://dev.to/sumstrm/steering-clear-of-the-dependency-trap-hb</id>
        <link href="https://dev.to/sumstrm/steering-clear-of-the-dependency-trap-hb"/>
        <updated>2021-11-01T07:58:28.000Z</updated>
        <summary type="html"><![CDATA[With the dust settling one week after the UA-parser-js incident, it's the perfect opportunity to take some time and see what we can learn from it. With some small changes to how you view and work with dependencies, you can take back control - instead of letting the dependencies control and overwhelm you.
The UA-parser security issue highlights two major things for the npm ecosystem:
The dependency tree comes with security risks. Your direct dependencies might not be malicious, but your dependencies of direct dependencies may be targeted. These transitive dependencies often range in hundreds and are large weak points. 
Organizations need to expand the scope of security and protect more than the CI/CD. Developer environments are often more numerous and more difficult to control, making it a …]]></summary>
        <author>
            <name>Andreas Sommarström</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[How to use PostgreSQL with NodeJS by SilvenLEAF]]></title>
        <id>https://dev.to/silvenleaf/how-to-use-postgresql-with-nodejs-by-silvenleaf-1aef</id>
        <link href="https://dev.to/silvenleaf/how-to-use-postgresql-with-nodejs-by-silvenleaf-1aef"/>
        <updated>2021-11-01T04:05:14.000Z</updated>
        <summary type="html"><![CDATA[Ahoy there mates! Who's excited to embark onto the SQL world? Let's go meet PostgreSQL!! Stay tuned. Because on the very NEXT blog, we'll learn how to automate all DB setups and Schema generations!
On this blog, we'll learn how to setup PostgreSQL with NodeJS!! To double the fun, let's throw some TypeScript as well. Don't worry, even if you don't know it, we'll be going from level 0, so as long as you know the basics of JavaScript, hop on. Let the adventure begin!!
Create a folder and open it in your favorite editor (mine VS Code). Then type this command on your project terminal
npm init -y

(It'll create a package.json file to track all the packages that you'd download and so on)
For those who are a bit lost on how to set up the environment and run the TypeScript files, check this one out…]]></summary>
        <author>
            <name>SilvenLEAF</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Generate typescript from openapi]]></title>
        <id>https://dev.to/superwf/generate-typescript-from-openapi-5fj1</id>
        <link href="https://dev.to/superwf/generate-typescript-from-openapi-5fj1"/>
        <updated>2021-11-01T02:06:32.000Z</updated>
        <summary type="html"><![CDATA[Openapi doc for typescript integration.


When we use typescript to connect restful api, there are many toos to generate the target service code. How to choose, here are some simple comparisons to reference.
https://github.com/superwf/ts-gear-example



  
  
  🆚 Compare



  
  
  Here are 5 tools && 5 openapi doc => 5x5 results



  
  
  Swagger pet store openapi v2


Fixture source: https://petstore.swagger.io/v2/swagger.json
✅ ts-gear
command: yarn tsg -p tsGearPetV2

result position: src/service/tsGearPetV2/







Actually, run yarn tsg without -p will generate all service code configured in src/tsg.config.ts
✅ pont
command: yarn pont

result position: src/service/pont/petV2/







Actually, run yarn pont will generate all service code configured in pont-config.json, in other fixt…]]></summary>
        <author>
            <name>superwf</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Adding TLS to Pi-hole]]></title>
        <id>https://dev.to/hunttom/adding-tls-to-pi-hole-40gd</id>
        <link href="https://dev.to/hunttom/adding-tls-to-pi-hole-40gd"/>
        <updated>2021-11-01T01:25:33.000Z</updated>
        <summary type="html"><![CDATA[PiHole is a great tool for blocking ads across an entire network. However, the web-based administration panel defaults to connecting to HTTP over port 80. As a network engineer, it has always bothered me that I had to pass a password into the pi-hole I've always had it on my list to update Pi-hole to use HTTPS and I could not find any documentation.
Disclaimer: configure to meet your own baseline for security standards, the examples given are generic.
Raspberry Pi
Pi-hole installed
Backup of your configuration
a. Create the self signed certificate:
openssl req -new -x509 -keyout pihole.pem -out pihole.pem -days 365 -nodes

b. Change permissions to read-only:
chmod 400 pihole.pem

a. Create and move cert into Lighttpd:
sudo mkdir /etc/lighttpd/certs
mv pihole.pem /etc/lighttpd/certs/pihole.pem

b. Configure Lighttpd to accept HTTPS requests: sudo vim /etc/lighttpd/external.conf
An example configuration would be for my Pi-hole DNS address at pihole.example.com:
$HTTP["host"] == "pihole.example.com" {
  # Ensure the Pi-hole Block Page knows that this is not a blocked domain
  setenv.add-environment = ("fqdn" => "true")

  # Enable the SSL engine with a LE cert, only for this specific host
  $SERVER["socket"] == ":443" {
    ssl.engine = "enable"
    ssl.pemfile = "/etc/lighttpd/certs/pihole.pem" #Location of PEM file.
    ssl.use-sslv2 = "disable"
    ssl.use-sslv3 = "disable"       
  }

  # Redirect HTTP to HTTPS
  $HTTP["scheme"] == "http" {
    $HTTP["host"] =~ ".*" {
      url.redirect = (".*" => "https://%0$0")
    }
  }
}

a. Run the command sudo systemctl restart lighttpd to restart Lighttpd.
b. Log into your Pi-hole: https://pihole.example.com]]></summary>
        <author>
            <name>hunttom</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[CSS-ing Candy Ghost Buttons]]></title>
        <id>https://css-tricks.com/?p=354804</id>
        <link href="https://css-tricks.com/css-ing-candy-ghost-buttons/"/>
        <updated>2021-11-01T01:04:53.000Z</updated>
        <summary type="html"><![CDATA[Recently, while looking for some ideas on what to code as I have zero artistic sense so the only thing I can do is find pretty things that other people have come up with and remake them with clean and …
The post CSS-ing Candy Ghost Buttons appeared first on CSS-Tricks. You can support CSS-Tricks by being an MVP Supporter.]]></summary>
        <author>
            <name>Ana Tudor</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Angular: Environment]]></title>
        <id>https://dev.to/felipemsfg/angular-environment-mbp</id>
        <link href="https://dev.to/felipemsfg/angular-environment-mbp"/>
        <updated>2021-11-01T00:40:20.000Z</updated>
        <summary type="html"><![CDATA[As variáveis de ambiente permitem que nós possamos incluir no nosso código condições, parâmetros e valores diferentes de acordo com nosso ambiente. 
Imagine que você utilize uma API Rest de um serviço qualquer, seja ele criado internamente na empresa que você trabalha, seja ele de terceiros e que esse serviço ofereça um endpoint para homologação e outro para produção.
Uma abordagem inicial seria trocar os valores dessa api todas as vezes que quisermos publicar nossa aplicação em produção.
Uma abordagem muito mais elegante é configurar as variáveis de ambiente para que você não tenha que lembrar de trocar o conteúdo de nenhuma variável.
Aqui mostro como fazer isso utilizando o recurso de configuração de ambiente do Angular.
Projetos criados com Angular CLI possuem por padrão um arquivo de configuração chamado environment.ts disponível na pasta environments da sua aplicação.

environment.ts:
export const environment = {
  production: false
};

environment.prod.ts
export const environment = {
  production: true
};

Veja um exemplo de como usar o environment.
import { environment } from '../environments/environment';

environment = environment;

<div class="row justify-content-center" *ngIf="!environment.production">    
    <div class="auth-box text-center">
        <div class="row">
            <div class="col-md-12">
                <button type="button" (click)="LimparTudo()" class="btn btn-danger btn-md btn-block waves-effect text-center m-b-20">Limpar Memória</button>
            </div>
        </div>
    </div>
</div>]]></summary>
        <author>
            <name>Felipe Marques</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Angular: Environment]]></title>
        <id>https://dev.to/felipemsfg/angular-environment-mbp</id>
        <link href="https://dev.to/felipemsfg/angular-environment-mbp"/>
        <updated>2021-11-01T00:40:20.000Z</updated>
        <summary type="html"><![CDATA[As variáveis de ambiente permitem que nós possamos incluir no nosso código condições, parâmetros e valores diferentes de acordo com nosso ambiente. 
Imagine que você utilize uma API Rest de um serviço qualquer, seja ele criado internamente na empresa que você trabalha, seja ele de terceiros e que esse serviço ofereça um endpoint para homologação e outro para produção.
Uma abordagem inicial seria trocar os valores dessa api todas as vezes que quisermos publicar nossa aplicação em produção.
Uma abordagem muito mais elegante é configurar as variáveis de ambiente para que você não tenha que lembrar de trocar o conteúdo de nenhuma variável.
Aqui mostro como fazer isso utilizando o recurso de configuração de ambiente do Angular.
Projetos criados com Angular CLI possuem por padrão um arquivo de configuração chamado environment.ts disponível na pasta environments da sua aplicação.

environment.ts:
export const environment = {
  production: false
};

environment.prod.ts
export const environment = {
  production: true
};

Veja um exemplo de como usar o environment.
import { environment } from '../environments/environment';

environment = environment;

<div class="row justify-content-center" *ngIf="!environment.production">    
    <div class="auth-box text-center">
        <div class="row">
            <div class="col-md-12">
                <button type="button" (click)="LimparTudo()" class="btn btn-danger btn-md btn-block waves-effect text-center m-b-20">Limpar Memória</button>
            </div>
        </div>
    </div>
</div>]]></summary>
        <author>
            <name>Felipe Marques</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Dyslexic DEV? No problem!]]></title>
        <id>https://dev.to/realvorl/dyslexic-dev-no-problem-1nfc</id>
        <link href="https://dev.to/realvorl/dyslexic-dev-no-problem-1nfc"/>
        <updated>2021-10-31T22:06:33.000Z</updated>
        <summary type="html"><![CDATA[Given


that I am dyslexic and also suffer from aphantasia, which is a fascinating quirk of the brain, one  can imagine I have sort of a love / hate relationship with reading. 
On the one hand, I must keep up with the news and trends of the software engineering industry but the serious and useful information I require, is in written form and that always drains my reading battery because of the above average amount of concentration I have to put forward.
daylight saving Weekend rolled around, I decided to do something useful with the "additional" hour, so I set out to improve this situation for people like me. 
I decided to build something that allows us to take the text from any article in any language (English, German, Romanian in my case) and convert it to an mp3 file so that we can "lis…]]></summary>
        <author>
            <name>Viorel PETCU</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[How to install Gromacs, PyMOL, AutoDock Vina, VMD, MGLTools, Avogadro2, Open Babel in Ubuntu 20.04]]></title>
        <id>https://dev.to/abdnahid/how-to-install-gromacs-pymol-autodock-vina-vmd-mgltools-avogadro-open-babel-in-ubuntu-2004-1867</id>
        <link href="https://dev.to/abdnahid/how-to-install-gromacs-pymol-autodock-vina-vmd-mgltools-avogadro-open-babel-in-ubuntu-2004-1867"/>
        <updated>2021-10-31T14:34:52.000Z</updated>
        <summary type="html"><![CDATA[One of the most time-consuming and frustrating aspects of computational tasks has always been properly installing software and getting it up and running in no time. In the case of bioinformatics tools, this is notoriously difficult in some cases, particularly in Linux-based operating systems such as Ubuntu, where one-click installer files, unlike Windows, are not an option. Although much of the popular software in the bioinformatics world is easy to install in Ubuntu if one is familiar with the ecosystem, a beginner will certainly have a difficult time circling the internet trying to find a proper installation method, at least, that’s what I had to go through when I first started out.
Here in this article, I compiled out the installation methods of some of the most commonly used bioinformatics and simulation tools, as well as how to run these tools after installing them on an Ubuntu 20.04 machine. Feel free to let me know which software should be added next.



  
  
  Before running any of the commands below, run this command once:





sudo apt-get -y update

sudo apt-get install -y avogadro

Avogadro2





avogadro2

sudo apt-get install -y pymol

pymol





pymol

sudo apt-get install -y gromacs

Gromacs





gmx

cd ~

curl -k https://www.ks.uiuc.edu/Research/vmd/vmd-1.9.3/files/final/vmd-1.9.3.bin.LINUXAMD64-CUDA8-OptiX4-OSPRay111p1.opengl.tar.gz --output vmd.tar.gz

mkdir -p vmd

tar -xvzf vmd.tar.gz -C vmd --strip-components=1

cd vmd

./configure

cd src

sudo make install

VMD





vmd

sudo apt-get install -y autodock-vina

AutoDock Vina





vina

cd ~

curl -k https://ccsb.scripps.edu/download/532/ --output mgltools.tar.gz

mkdir -p mgltools

tar -xvzf mgltools.tar.gz -C mgltools --strip-components=1

cd mgltools

bash install.sh

source ./initMGLtools.sh 


Python Molecule Viewer (PMV)





pmv

AutoDockTools (ADT)





adt

Vision





vision

sudo apt-get install -y openbabel

openbabel





obabel

sudo apt-get install -y openbabel-gui

openbabel gui





obgui]]></summary>
        <author>
            <name>Abdullah Al Nahid</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hawk Open Source Project]]></title>
        <id>https://dev.to/medpaf/hawk-open-source-project-4okk</id>
        <link href="https://dev.to/medpaf/hawk-open-source-project-4okk"/>
        <updated>2021-10-31T13:25:51.000Z</updated>
        <summary type="html"><![CDATA[Hawk is a network and pentest utility that I developed so that I could perform different kinds of task using the same suite, instead of jumping from one tool to another.
ifconfig, 
ping, 
traceroute, 
port scans (including SYN, TCP, UDP, ACK, comprehensive scan), 
host discovery (scan for up devices on a local network), 
MAC address detection (get MAC address of a host IP on a local network), 
banner grabbing, 
DNS checks (with geolocation information), 
WHOIS, 
subdomain enumeration, 
vulnerability reconnaissance, - 
packet sniffing, 
MAC spoofing, 
IP spoofing, 
SYN flooding, 
deauth attack, 
brute-force attack (beta).
Other features are still being implemented. Future implementations may include WAF detection, DNS enumeration, traffic analysis, XSS vulnerability scanner, ARP cache poisoning, DNS cache poisoning, MAC flooding, ping of death, network disassociation attack (not deauth attack), OSINT, exploits, some automated tasks and others.
Link to the repository: 
https://github.com/medpaf/hawk]]></summary>
        <author>
            <name>Paulo Medeiros</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Linux]]></title>
        <id>https://dev.to/nicm42/linux-2ofa</id>
        <link href="https://dev.to/nicm42/linux-2ofa"/>
        <updated>2021-10-31T10:46:59.000Z</updated>
        <summary type="html"><![CDATA[It feels like a lot of people on here who use Linux like to talk about Linux. I am not an exception, so here's my journey/opinions on Linux.
My first exposure to Linux was in a virtual machine and it was OpenSUSE. Which I remember very little about now, except that I thought it was quite fun. I mostly just looked at it a bit, but I liked it.
When Netbooks came out, you could get a 9 inch one with Linux on it. I don't remember which distro was on it, but it wasn't a common one. I don't think it said when it was sold, I googled to find out. It was more of a useful little computer to have on your lap on the sofa for odd little bits, so the OS didn't make a great deal of difference. But the computer not being very powerful meant Linux was better on it than Windows.
I don't remember what it was…]]></summary>
        <author>
            <name>Nic</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Benefits Of Using Pipe Over Function In Angular]]></title>
        <id>https://dev.to/stackblogger/benefits-of-using-pipe-over-function-in-angular-2mgj</id>
        <link href="https://dev.to/stackblogger/benefits-of-using-pipe-over-function-in-angular-2mgj"/>
        <updated>2021-10-31T09:24:13.000Z</updated>
        <summary type="html"><![CDATA[The article is originally published at my blog here: Benefits Of Using Pipe Over Function In Angular
Do you use functions / methods to implement various conditions and DOM manipulations in Angular ? If yes, trust me it will worsen your website performance. In this tutorial I will explain how pipes increase your angular website performance and what are the various benefits of using Pipe over Functions based on a case study.
Before diving straight into tutorial, let’s start with some basic questions.
The first question comes in mind- What is Pipe? A simple definition of pipe- it is a decorative function in Angular used to manipulate DOM. It takes an untransformed value as input and returns a transformed value as output.
Various built-in pipes are provided by Angular- AsyncPipe, CurrencyPipe,…]]></summary>
        <author>
            <name>Jameer Khan</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[A Splash Of Color For Misty Days (November 2021 Desktop Wallpapers Edition)]]></title>
        <id>https://smashingmagazine.com/2021/10/desktop-wallpaper-calendars-november-2021/</id>
        <link href="https://smashingmagazine.com/2021/10/desktop-wallpaper-calendars-november-2021/"/>
        <updated>2021-10-31T08:20:00.000Z</updated>
        <summary type="html"><![CDATA[November is just around the corner, and with it, a new collection of desktop wallpapers to celebrate the beginning of the month. Designed by creatives from all across the globe, they come in versions with and without a calendar. Let’s make November colorful!]]></summary>
        <author>
            <name>hello@smashingmagazine.com (Cosima Mielke)</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Diving deep into JavaScript functions]]></title>
        <id>https://dev.to/rawas_aditya/diving-deep-into-javascript-functions-276f</id>
        <link href="https://dev.to/rawas_aditya/diving-deep-into-javascript-functions-276f"/>
        <updated>2021-10-31T08:19:11.000Z</updated>
        <summary type="html"><![CDATA[@codewithaditya]]></summary>
        <author>
            <name>Aditya Rawas</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[The "DeRxJSViewModel Pattern": The E=mc^2 of State Management [Part 2]]]></title>
        <id>https://dev.to/zackderose/the-derxjsviewmodel-pattern-the-emc2-of-state-management-part-2-2i73</id>
        <link href="https://dev.to/zackderose/the-derxjsviewmodel-pattern-the-emc2-of-state-management-part-2-2i73"/>
        <updated>2021-10-31T07:58:17.000Z</updated>
        <summary type="html"><![CDATA[👋 hi all - this article is a continuation of a previous article that explains the goals of the DeRxJS pattern:
entirely de-couple state management code from presentational code (to the point where your state management code could be re-used across frameworks)
maximize the benefits of RxJS, while minimizing the negatives
next-level testing [and potential to hand over all our state-management code to AI at some point]
In that article, we did most of the heavy lifting - developing our state-management code and fully testing out every edge case with "timeline testing" (allowing us to assert not only "what" state looks like, but "when" it should look that way as well).
In this article, we'll bring that state management code and show how we can use this across 3 front-end "frameworks": React, A…]]></summary>
        <author>
            <name>Zack DeRose</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[How to auto shutdown when you are not using the EC2 instance?]]></title>
        <id>https://dev.to/kpldvnpne/how-to-auto-shutdown-when-you-are-not-using-the-ec2-instance-5g5e</id>
        <link href="https://dev.to/kpldvnpne/how-to-auto-shutdown-when-you-are-not-using-the-ec2-instance-5g5e"/>
        <updated>2021-10-31T06:12:13.000Z</updated>
        <summary type="html"><![CDATA[Background


I always forget to turn off the EC2 instance when I am not using the computer. Because of this, I always end up paying tons for forgetting to turn it off. The cost of these EC2 instances are usually $1 per hour. Hence, if I forget to turn it off for a whole day, I would incur $24.
This feels like something the machine should do itself and not burden me for remembering. Hence, I have gathered information from all over the web to make this short, simple and easy to follow guide.
First, we need a script that checks if there is a user connecting through SSH and turn off the EC2 instance if there are none for a set interval of time. The following script does exactly that:
#!/bin/bash
#
# Reference: https://serverfault.com/a/1061792
# Shuts down the host on inactivity.
#
# Designed …]]></summary>
        <author>
            <name>Kapildev Neupane</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Simplifying Angular testbed setup by converting to synchronous test hooks]]></title>
        <id>https://dev.to/this-is-angular/simplifying-angular-testbed-setup-by-converting-to-synchronous-test-hooks-19cl</id>
        <link href="https://dev.to/this-is-angular/simplifying-angular-testbed-setup-by-converting-to-synchronous-test-hooks-19cl"/>
        <updated>2021-10-30T22:10:01.000Z</updated>
        <summary type="html"><![CDATA[When we use Angular's schematics to generate components, unnecessary asynchronous code is added to the test setup hook for its test suite.
The following test setup is generated by Angular's component generation schematic:
beforeEach(async () => {
  await TestBed.configureTestingModule({
    declarations: [MyComponent],
  }).compileComponents();
});

component schematic.





Alternatively, we might be using Angular's waitForAsync test function wrapper (formerly named async) as seen in the following code snippet:
beforeEach(waitForAsync(() => {
  TestBed.configureTestingModule({
    declarations: [MyComponent],
  }).compileComponents();
}));

waitForAsync.





Here's the deal: It's only necessary to call the static TestBed.compileComponents method if we're not using the Angular CLI to run our tests (who would do such a thing, Google? 👈😏).
The Angular CLI compiles our application and tests before the tests are run so no asynchronous action is needed for setting up the declarables.
Let's simplify the common test setup by leaving out async-await, waitForAsync, and even the TestBed.compileComponents invocation as seen in this code snippet:
beforeEach(() => {
  TestBed.configureTestingModule({
    declarations: [MyComponent],
  });
});

The following points are true for common Angular testbed setup for tests covering all types of Angular declarables:
No need to use async-await
No need to use waitForAsync (formerly named async)
No need to call TestBed.compileComponents



Of course, there might be other reasons for introducing asynchronicity to our test setup but compiling and linking declarables is not one of them.
Enjoy a little less boilerplate in your Angular tests 🌞]]></summary>
        <author>
            <name>Lars Gyrup Brink Nielsen</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[JWTs explained with code examples]]></title>
        <id>https://dev.to/propelauth/jwts-explained-with-code-examples-3k29</id>
        <link href="https://dev.to/propelauth/jwts-explained-with-code-examples-3k29"/>
        <updated>2021-10-30T21:38:07.000Z</updated>
        <summary type="html"><![CDATA[The Wikipedia description of a JSON Web eToken (JWT) is:
JSON Web Token is a proposed Internet standard for creating data with optional signature and/or optional encryption 
However, this definition says a lot without really saying a lot. When I'm trying to understand a concept, I like to play around with relevant libraries. We'll try this out with JWTs using the popular javascript library jsonwebtoken.
The first thing the docs mention is that the sign function returns a 
secret.
const jwtLibrary = require('jsonwebtoken');

// The only arguments we need are a secret value and some JSON
const json = {"key": "value", "key2": "value2"}
const secret = "shhhhh";

// Ignore the options for now, we'll check them later
const jwt = jwtLibrary.sign(json, secret);

console.log("JWT:", jwt);
// JWT: e…]]></summary>
        <author>
            <name>propelauthblog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Um Guia sobre Gerenciadores de Senhas]]></title>
        <id>https://dev.to/raissaccorreia/um-guia-sobre-gerenciadores-de-senhas-3a1p</id>
        <link href="https://dev.to/raissaccorreia/um-guia-sobre-gerenciadores-de-senhas-3a1p"/>
        <updated>2021-10-30T17:22:43.000Z</updated>
        <summary type="html"><![CDATA[Introdução a essa série — Segurança Digital
Atualmente temos muitas coisas valiosas em bens digitais, por exemplo: Mensalidades de serviços de streaming, e-books comprados pela Loja do Kindle, jogos comprados na Steams, cursos comprados na Udemy ou no Coursera, a mensalidade do office ligado a sua conta de Microsoft, uma imagem pessoal ou uma carreira que é sustentada pela presença no Youtube, ou no Instagram, ou uma página do Facebook.
Não faltam exemplos de bens digitais muito valiosos, mas ainda assim, a maioria das pessoas deixa tudo escancarado sem nem mesmo uma cerca, e o motivo é simples: as pessoas não sabem construir essas proteções virtuais, e esse é o primeiro de MUITOS guias. Então me siga no Medium, ou no Twitter ou no Instagram que ainda falarei de VPN, Antivirus, Privacidade…]]></summary>
        <author>
            <name>Raissa Correia</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Fixing my everyday errors!!]]></title>
        <id>https://dev.to/deek9399/fixing-my-everyday-errors-1bol</id>
        <link href="https://dev.to/deek9399/fixing-my-everyday-errors-1bol"/>
        <updated>2021-10-30T16:59:33.000Z</updated>
        <summary type="html"><![CDATA[1. How do I kill a process currently using a port on localhost?


npx kill-port 8001
Inside package.json add

"type": "module",


run npm install or yarn add
stack-overflow 
// Set config defaults when creating the instance
const instance = axios.create({
  baseURL: 'https://api.example.com'
});

error code = H10


Heroku dynamically sets the PORT, which can be accessed with process.env.PORT
const port = process.env.PORT || 8001;

yarn add eslint-config-react-app
dev.to]]></summary>
        <author>
            <name>Deeksha</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Can this makeshift vertical case keep the Pi cool?]]></title>
        <id>https://dev.to/bearlike/can-this-makeshift-vertical-case-keep-the-pi-cool-22ek</id>
        <link href="https://dev.to/bearlike/can-this-makeshift-vertical-case-keep-the-pi-cool-22ek"/>
        <updated>2021-10-30T11:04:34.000Z</updated>
        <summary type="html"><![CDATA[Originally published at thekrishna.in
The Raspberry Pi 4 offers an excellent upgrade to the preceding Pi 3B+, but keeping the new model from overheating can be a challenge. Users have tried many techniques to tackle this issue, from running the Pi in the open air to utilizing cooling rigs with fans attached. But as vertical cases are gaining popularity, can my DIY vertical case keep the Broadcom BCM2711B0 quad-core A72 SOC (system on chip)—cool? Spoiler alert: Surprisingly, yes.
First of all, why subject your Raspberry Pi to this level of stress? In the case of Raspberry Pi 4, the A72 CPU is so powerful that it can overheat if it doesn't have enough cooling. This results in the CPU being thermal throttled (governed) to reduce the power consumption and in turn reducing heat generation. The …]]></summary>
        <author>
            <name>Krishnakanth Alagiri</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Mount a Linux image on Windows and access to it from File Explorer with WSL2]]></title>
        <id>https://dev.to/sgtino/mount-a-linux-image-on-windows-and-access-to-it-from-file-explorer-with-wsl2-pkm</id>
        <link href="https://dev.to/sgtino/mount-a-linux-image-on-windows-and-access-to-it-from-file-explorer-with-wsl2-pkm"/>
        <updated>2021-10-30T10:28:46.000Z</updated>
        <summary type="html"><![CDATA[Requisites


A Windows system with WSL2 and an installed distro.
wget __linux_image_url

$ wsl

$ partx --show __linux_image_filepath__
NR  START     END SECTORS SIZE NAME UUID
 1   8192  532479  524288 256M      9730496b-01
 2 532480 3661823 3129344 1.5G      9730496b-02

$ bc
bc 1.07.1
Copyright 1991-1994, 1997, 1998, 2000, 2004, 2006, 2008, 2012-2017 Free Software Foundation, Inc.
This is free software with ABSOLUTELY NO WARRANTY.
For details type `warranty'.
> 532480 * 512
> 272629760
> quit

Create mounting point
$ sudo mkdir /mnt/other

Mount image
$ sudo mount -v -o offset=272629760 -t ext4 /_path_to_file_image/__filename__.img /mnt/other
mount: /dev/loop0 mounted on /mnt/other.

Check mounted image
$ ls /mnt/other

Open File Explorer
Type \\wsl$ in the address bar
Installed distros will be shown up. Click on it and navigate in the file system into the mounted path.
Access Linux filesystems in Windows and WSL 2
Access WSL2/Ubuntu Drive from File Explorer
How to mount Linux file system using WSL on Windows 11
Mounting a Raspberry Pi disk image under WSL 2]]></summary>
        <author>
            <name>Stefano Giraldi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[How to configure KDE Plasma with EndeavourOS in Laptops with dedicated GPU]]></title>
        <id>https://dev.to/mage1k99/how-to-configure-kde-plasma-with-endeavouros-in-laptops-with-dedicated-gpu-36m7</id>
        <link href="https://dev.to/mage1k99/how-to-configure-kde-plasma-with-endeavouros-in-laptops-with-dedicated-gpu-36m7"/>
        <updated>2021-10-30T08:10:28.000Z</updated>
        <summary type="html"><![CDATA[Some of the issues faced by me when configuring KDE Plasma
Scaled Icons, Text, Stuffs in Display
Unable to use Function Keys in keyboard
Dual Booting
Installing deb files in arch
Enabling Bluetooth in KDE
Connecting to bluetooth audio device




mysql_install_db --user=mysql --ldata=/var/lib/mysql/

https://starbeamrainbowlabs.com/blog/article.php?article=posts/436-running-application-on-nvidia.html

I have to enable the bluetooth service by running sudo systemctl enable bluetooth.service

Start the service
sudo systemctl start bluetooth.service




  
  
  Connecting to Bluetooth





sudo pacman -S pulseaudio-bluetooth

Edit main.conf file




sudo vim /etc/bluetooth/main.conf

add these lines Enable=Source,Sink,Media,Socket under [general]


And reboot to see changes




fullscreen option under desktop effects in system settings seems to mess with it


VSCode git push fails to open ssh-askpass
yay -S x11-ssh-askpass]]></summary>
        <author>
            <name>Magesh Babu</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Wildcard Domains For Bug Bounties]]></title>
        <id>https://dev.to/therealdarkmage/wildcard-domains-for-bug-bounties-li0</id>
        <link href="https://dev.to/therealdarkmage/wildcard-domains-for-bug-bounties-li0"/>
        <updated>2021-10-30T07:30:50.000Z</updated>
        <summary type="html"><![CDATA[A private bug bounty program I am on had a scope increase recently.
*target.com

amass does not seem to have a feature that handles this sort of search, so I generated that list in bash/zsh:
for i in $(cat mylist.txt); do 
    echo $itarget.com >> potential-targets; 
done

This is for only one target. If your list containing multiple targets is in targets.txt, do:
for i in $(cat targets.txt); do 
    for j in $(cat mylist.txt); do
        echo $j$i >> potential-targets.txt; 
    done
done

This can yield a big file. To compress it after creation:
gzip -9 potential-targets.txt

To zip them during creation:
for i in $(cat targets.txt); do 
    for j in $(cat mylist.txt); do
        echo $j$i | gzip -9 >> potential-targets.txt.gz; 
    done
done

Once you've created the list of targets and zipped them, lets say we want to find all of the potentials yielding actual pages with content. Fire up httpx:
zcat potential-targets.txt.gz | \
httpx -no-fallback -o httpx.txt

Because this can take a long time, you might consider lowering the timeout, or using more or less threads:
zcat potential-targets.txt.gz | \
httpx -no-fallback -o httpx.txt -threads 200 -timeout 1

Lets say you didn't zip potential-targets. That's ok. httpx has an option to read directly from file. Everyone online is so obsessed with piping output because they think it is cool, but encouraging people to merely copy/paste data results in bad thinking and approach.
httpx -l potential-targets.txt -no-fallback \
-o httpx.txt -threads 200 -timeout 1

This will run for a long time. I was running it with default timeout and 8 threads on 300,000+ possible names and it had not completed after several hours. I'm running it now on a much larger namespace and even though it is taking a long time, I am already yielding new names that did not show up in amass. 
If this helps you at all, or you want to lurk for other content or whatever, here is my twitter]]></summary>
        <author>
            <name>darkmage</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[What is Ansible? A Tool to Automate Parts of Your Job]]></title>
        <id>61353325d6679a07b7d4318c</id>
        <link href="https://www.freecodecamp.org/news/what-is-ansible/"/>
        <updated>2021-10-29T20:42:16.000Z</updated>
        <summary type="html"><![CDATA[Hello everyone, today we will talk about Ansible, a fantastic software tool that allows you to automate cross-platform computer support in a simple but effective way.  Table of Contents What is Ansible? How Does Ansible Work? Ansible's Architecture Plugins Modules Inventories Playbook Benefits of Using Ansible Why is Ansible so]]></summary>
        <author>
            <name>freeCodeCamp.org</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Angular: The power of Async Pipe + Observables.]]></title>
        <id>https://dev.to/saulodias/angular-the-power-of-async-pipe-observables-97m</id>
        <link href="https://dev.to/saulodias/angular-the-power-of-async-pipe-observables-97m"/>
        <updated>2021-10-29T18:42:39.000Z</updated>
        <summary type="html"><![CDATA[One of the most powerful features when creating Angular components is the Async Pipe. The greatest thing about it is that it allows you to take advantage of asynchronous rendering in your template without having to worry about subscribing and unsubscribing from Observables.
import { Component, OnInit, OnDestroy } from '@angular/core';
import { of, Subject } from 'rxjs';
import { delay, startWith, takeUntil } from 'rxjs/operators';

@Component({
  selector: 'my-app',
  template: `
    <h1>Async example</h1> 
    <h2>Items</h2> 
    <ul>
      <li *ngFor="let item of items | async">{{item}}</li>
    </ul>
    <h2>Other Items</h2> 
    <ul>
      <li *ngFor="let other of otherItems">{{other}}</li>
    </ul>
  `,
  styleUrls: [ './app.component.css' ]
})
export class AppComponent implements OnInit, OnDestroy  {

  items = of([1, 2, 3])
    .pipe(
      delay(2000), 
      startWith(['...'])
    );

  // vs 

  otherItems: any[];
  private destroy$ = new Subject();
  ngOnInit() {
    of([1, 2, 3])
      .pipe(
        delay(2000),
        startWith(['...']),
        takeUntil(this.destroy$)
      )
      .subscribe(other  => this.otherItems = other)
  }
  ngOnDestroy() {
    this.destroy$.next();
    this.destroy$.complete();
  }
}


Check it out on Stackblitz.
As you can see, in the first example, we are rendering a list (items) using the async pipe in the HTML template. There is no need for the additional handling after the component is destroyed, which you can see is not the case for the other list otherItems.   That is simply because the async pipe is going to take care of that for you.]]></summary>
        <author>
            <name>Saulo Dias</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Some Articles About Accessibility I’ve Saved Recently IV]]></title>
        <id>https://css-tricks.com/?p=354581</id>
        <link href="https://css-tricks.com/some-articles-about-accessibility-ive-saved-recently-iv/"/>
        <updated>2021-10-29T18:28:38.000Z</updated>
        <summary type="html"><![CDATA[A guide to designing accessible, WCAG-compliant focus indicators — Sara Soueidan says you can make more accessible focus outlines by doing your own, rather than leaving it to the browser — as long as you do it right. Deep dive! 
…
The post Some Articles About Accessibility I’ve Saved Recently IV appeared first on CSS-Tricks. You can support CSS-Tricks by being an MVP Supporter.]]></summary>
        <author>
            <name>Chris Coyier</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[How to Use Social Login with OAuth to Make Your Apps More Secure]]></title>
        <id>6178555333422e07df364ee9</id>
        <link href="https://www.freecodecamp.org/news/how-to-use-social-login-with-oauth-for-more-secure-apps/"/>
        <updated>2021-10-29T14:50:00.000Z</updated>
        <summary type="html"><![CDATA[Many developers have written a demo login application at some point in time. We all start with the simple user defined ID and password. We then try to implement something like a social login with, say, Google or Twitter. There is, of course, a more complex process involved in setting]]></summary>
        <author>
            <name>freeCodeCamp.org</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Create Your Own Automated Social Images With Resoc]]></title>
        <id>https://css-tricks.com/?p=354296</id>
        <link href="https://css-tricks.com/create-your-own-automated-social-images-with-resoc/"/>
        <updated>2021-10-29T14:14:55.000Z</updated>
        <summary type="html"><![CDATA[There has been a lot of talk about automated social images lately. GitHub has created its own. A WordPress plugin has been acquired by Jetpack. There is definitely interest! People like Ryan Filler and Zach Leatherman have implemented …
The post Create Your Own Automated Social Images With Resoc appeared first on CSS-Tricks. You can support CSS-Tricks by being an MVP Supporter.]]></summary>
        <author>
            <name>Philippe Bernard</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Latest Features of Angular Version 12 To Simplify Development Process]]></title>
        <id>https://dev.to/rlogical/latest-features-of-angular-version-12-to-simplify-development-process-3f34</id>
        <link href="https://dev.to/rlogical/latest-features-of-angular-version-12-to-simplify-development-process-3f34"/>
        <updated>2021-10-29T11:57:55.000Z</updated>
        <summary type="html"><![CDATA[Let's know here Top 10 Angular Version 12 Features for Streamlining Development Process
1. Ivy Everywhere
In Angular 12, View Engine is deprecated, and the community is working on ongoing delivery towards the goal of amalgamating the ecosystem of Angular on Ivy. Current libraries still use View Engine. But the library authors want to shift to Ivy. AngularJS development services become easy with Ivy as developers can compile all components independently and enhances development times.
2. Adios Protractor
The Angular team is working to decide Protractor’s future. They are currently exploring the given feedbacks in RFC. The team decided to remove it in further new tasks and more furnished alternatives along with third-party solutions. They are working with webdriverIO, TestCafe, and Cypress t…]]></summary>
        <author>
            <name>Rlogical Techsoft Pvt Ltd</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[50 Resources And Tools To Turbocharge Your Copywriting Skills]]></title>
        <id>https://smashingmagazine.com/2021/10/resources-tools-turbocharge-copywriting-skills/</id>
        <link href="https://smashingmagazine.com/2021/10/resources-tools-turbocharge-copywriting-skills/"/>
        <updated>2021-10-29T10:00:00.000Z</updated>
        <summary type="html"><![CDATA[Stop wasting time and effort writing copy that falls flat. Raise your copywriting game and boost your powers of persuasion with these rich and informative online resources.]]></summary>
        <author>
            <name>hello@smashingmagazine.com (Freya Giles)</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Angular : BehaviorSubject]]></title>
        <id>https://dev.to/dipteekhd/angular-behaviorsubject-p1</id>
        <link href="https://dev.to/dipteekhd/angular-behaviorsubject-p1"/>
        <updated>2021-10-29T07:22:47.000Z</updated>
        <summary type="html"><![CDATA[As we know multiple components share the common data and always need updated shared data. In such scenarios most of the time BehaviorSubject is used which acts as a single store to hold updated shared data.
BehaviorSubject is both observer and type of observable.
BehaviorSubject always need an initial/default value.
Every observer on subscribe gets current value.
Current value is either latest value emitted by source observable using next() method or initial/default value.
Let’s implement BehaviorSubject to understand a concept better!
For e.g In order tracking app, display total items in cart and total items in wish list on UI in header and dashboard section based on user action.
Now we have three components -

Run Live
When user add items in the cart/wishList, total count needs to be updated in the header and dashboard component.
1.First create a BehaviorSubject in order service which holds the initial state of order count ,so that it can be used by any component.




3.When a user performs any action, call the next() method of BehaviorSubject. When the next() method gets called it will update current count with new count and notifies updated count to all observers(3 Components) who subscribed to source observable.

This way BehaviorSubject makes components communication more effective.
Thanks for reading! If you found this helpful please share!]]></summary>
        <author>
            <name>diptee</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[How to Secure Your React.js Application]]></title>
        <id>617a55f533422e07df366544</id>
        <link href="https://www.freecodecamp.org/news/best-practices-for-security-of-your-react-js-application/"/>
        <updated>2021-10-28T23:44:02.000Z</updated>
        <summary type="html"><![CDATA[React.js is a scalable open-source JavaScript library and is one of the most commonly used front-end frameworks out there today.  It's dynamic and is easy to get started with if you want to create interactive web applications with reusable components. There are lots of reasons to use React.js]]></summary>
        <author>
            <name>freeCodeCamp.org</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Okhsv and Okhsl]]></title>
        <id>https://css-tricks.com/?p=354922</id>
        <link href="https://bottosson.github.io/posts/colorpicker/"/>
        <updated>2021-10-28T20:20:07.000Z</updated>
        <summary type="html"><![CDATA[There is an old Russian fable where Okhsv and Okhsl are on a rowboat and Okhsv says to Okhsl, “What are the known shortcomings of HSL and HSV color pickers in design applications?” I kid, I kid. But really, what …
The post Okhsv and Okhsl appeared first on CSS-Tricks. You can support CSS-Tricks by being an MVP Supporter.]]></summary>
        <author>
            <name>Chris Coyier</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vite + _____]]></title>
        <id>https://css-tricks.com/?p=355166</id>
        <link href="https://css-tricks.com/vite-plus-blank/"/>
        <updated>2021-10-28T18:07:21.000Z</updated>
        <summary type="html"><![CDATA[Vite, “Next Generation Frontend Tooling” from Evan You, has been capturing a lot of attention. I’ve heard rave reviews from developers, even in private chats (you gotta try this!). Being from Evan, Vite works great with Vue, …
The post Vite + _____ appeared first on CSS-Tricks. You can support CSS-Tricks by being an MVP Supporter.]]></summary>
        <author>
            <name>Chris Coyier</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Merge Conflicts: What They Are and How to Deal with Them​]]></title>
        <id>https://css-tricks.com/?p=354389</id>
        <link href="https://css-tricks.com/merge-conflicts-what-they-are-and-how-to-deal-with-them/"/>
        <updated>2021-10-28T14:07:12.000Z</updated>
        <summary type="html"><![CDATA[Merge conflicts... Nobody likes them. Some of us even fear them. But they are a fact of life when you're working with Git, especially when you're teaming up with other developers. In most cases, merge conflicts aren't as scary as you might think. In this fourth part of our “Advanced Git” series we'll talk about when they can happen, what they actually are, and how to solve them.
The post Merge Conflicts: What They Are and How to Deal with Them​ appeared first on CSS-Tricks. You can support CSS-Tricks by being an MVP Supporter.]]></summary>
        <author>
            <name>Tobias Günther</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Building an Angular Data Grid With Filtering]]></title>
        <id>https://css-tricks.com/?p=354782</id>
        <link href="https://css-tricks.com/building-an-angular-data-grid-with-filtering/"/>
        <updated>2021-10-28T14:03:11.000Z</updated>
        <summary type="html"><![CDATA[(This is a sponsored post.)
Kendo UI makes it possible to go from a basic idea to a full-fledged app, thanks to a massive component library. We’re talking well over 100 components that are ready for you to drop …
The post Building an Angular Data Grid With Filtering appeared first on CSS-Tricks. You can support CSS-Tricks by being an MVP Supporter.]]></summary>
        <author>
            <name>Geoff Graham</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[How To Build An Amazon Product Scraper With Node.js]]></title>
        <id>https://smashingmagazine.com/2021/10/building-amazon-product-scraper-nodejs/</id>
        <link href="https://smashingmagazine.com/2021/10/building-amazon-product-scraper-nodejs/"/>
        <updated>2021-10-28T11:00:00.000Z</updated>
        <summary type="html"><![CDATA[The wealth of data that Amazon holds can make a huge difference when you’re designing a product or hunting for a bargain. But, how can a developer get that data? Simple, by using a web scraper. Here’s how to build your data extraction bot with Node.js.]]></summary>
        <author>
            <name>hello@smashingmagazine.com (Robert Sfichi)</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Sticky Definition Lists]]></title>
        <id>https://css-tricks.com/?p=354777</id>
        <link href="https://css-tricks.com/sticky-definition-lists/"/>
        <updated>2021-10-27T23:17:18.000Z</updated>
        <summary type="html"><![CDATA[I ran across this 30 seconds of code website the other day, and they have a CSS section which is really good! The first example snippet I looked at was this “floating section headers” example, reminding me yet again how …
The post Sticky Definition Lists appeared first on CSS-Tricks. You can support CSS-Tricks by being an MVP Supporter.]]></summary>
        <author>
            <name>Chris Coyier</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[How to Implement and Style the Dialog Element]]></title>
        <id>https://css-tricks.com/?p=354857</id>
        <link href="https://css-tricks.com/how-to-implement-and-style-the-dialog-element/"/>
        <updated>2021-10-27T20:17:48.000Z</updated>
        <summary type="html"><![CDATA[A look from Christian Kozalla on the <dialog> HTML element and using it to create a nice-looking and accessible modal. 
CodePen Embed Fallback
I’m attracted to the <dialog> element as it’s one of those “you get a lot for free” …
The post How to Implement and Style the Dialog Element appeared first on CSS-Tricks. You can support CSS-Tricks by being an MVP Supporter.]]></summary>
        <author>
            <name>Chris Coyier</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Testing Vue Components With Cypress]]></title>
        <id>https://css-tricks.com/?p=353842</id>
        <link href="https://css-tricks.com/testing-vue-components-with-cypress/"/>
        <updated>2021-10-27T14:25:04.000Z</updated>
        <summary type="html"><![CDATA[Cypress is an automated test runner for browser-based applications and pages. I’ve used it for years to write end-to-end tests for web projects, and was happy to see recently that individual component testing had come to Cypress. I work on …
The post Testing Vue Components With Cypress appeared first on CSS-Tricks. You can support CSS-Tricks by being an MVP Supporter.]]></summary>
        <author>
            <name>Mark Noonan</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Eye-Tracking In Mobile UX Research]]></title>
        <id>https://smashingmagazine.com/2021/10/eye-tracking-mobile-ux-research/</id>
        <link href="https://smashingmagazine.com/2021/10/eye-tracking-mobile-ux-research/"/>
        <updated>2021-10-27T10:00:00.000Z</updated>
        <summary type="html"><![CDATA[Thanks to technology, eye-tracking has become more accessible to UX research as it allows researchers to get insights about users ’visual attention. This article explores the latest trends in the eye-tracking market and how the methodology can be included in the UX researcher’s toolbox.]]></summary>
        <author>
            <name>hello@smashingmagazine.com (Mariana Macedo)</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[On Browser-Specific URL Schemes]]></title>
        <id>https://css-tricks.com/?p=354365</id>
        <link href="https://css-tricks.com/on-browser-specific-url-schemes/"/>
        <updated>2021-10-26T20:06:29.000Z</updated>
        <summary type="html"><![CDATA[We’ve covered URL schemes: 
A URL Scheme is like “http://…” or “ftp://…”. Those seem like a very low-level concept that you don’t have much control over, but actually, you do!
I’d call it non-trivial, but developers can register new …
The post On Browser-Specific URL Schemes appeared first on CSS-Tricks. You can support CSS-Tricks by being an MVP Supporter.]]></summary>
        <author>
            <name>Chris Coyier</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[In-Page Filtered Search With Vanilla JavaScript]]></title>
        <id>https://css-tricks.com/?p=353747</id>
        <link href="https://css-tricks.com/in-page-filtered-search-with-vanilla-javascript/"/>
        <updated>2021-10-26T14:11:59.000Z</updated>
        <summary type="html"><![CDATA[If you have a page that includes a lot of information, it’s a good idea to let users search for what they might be looking for. I’m not talking about searching a database or even searching JSON data — I’m …
The post In-Page Filtered Search With Vanilla JavaScript appeared first on CSS-Tricks. You can support CSS-Tricks by being an MVP Supporter.]]></summary>
        <author>
            <name>Hilman Ramadhan</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Optimizing Next.js Applications With Nx]]></title>
        <id>https://smashingmagazine.com/2021/10/optimizing-nextjs-applications-nx/</id>
        <link href="https://smashingmagazine.com/2021/10/optimizing-nextjs-applications-nx/"/>
        <updated>2021-10-26T10:00:00.000Z</updated>
        <summary type="html"><![CDATA[Nx is a build framework that facilitates optimization, efficient scaling of applications, and other features such as shared libraries and components. In this article, we will be looking at how we can effectively scale Next.js applications by using Nx.]]></summary>
        <author>
            <name>hello@smashingmagazine.com (Melvin Kosisochukwu)</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[A Deep Dive Into object-fit And background-size In CSS]]></title>
        <id>https://smashingmagazine.com/2021/10/object-fit-background-size-css/</id>
        <link href="https://smashingmagazine.com/2021/10/object-fit-background-size-css/"/>
        <updated>2021-10-25T13:00:00.000Z</updated>
        <summary type="html"><![CDATA[In this article, we will go through how `object-fit` and `background-size` work, when we can use them, and why, along with some practical use cases and recommendations. Let’s dive in.]]></summary>
        <author>
            <name>hello@smashingmagazine.com (Ahmad Shadeed)</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[An Introduction To Quasar Framework: Building Cross-Platform Applications]]></title>
        <id>https://smashingmagazine.com/2021/10/introduction-quasar-framework-cross-platform-applications/</id>
        <link href="https://smashingmagazine.com/2021/10/introduction-quasar-framework-cross-platform-applications/"/>
        <updated>2021-10-23T11:00:00.000Z</updated>
        <summary type="html"><![CDATA[Quasar is an open-source Vue.js-based cross-platform framework that allows you, as a developer, to easily build apps for both desktop and mobile using technologies such as Cordova and Electron and writing your code once. The app we’ll build will store and get its data from Firebase, meaning that we will also be seeing how to use Firebase in Quasar.]]></summary>
        <author>
            <name>hello@smashingmagazine.com (Joel Olawanle)</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[How To Build A Real-Time Multi-User Game From Scratch]]></title>
        <id>https://smashingmagazine.com/2021/10/real-time-multi-user-game/</id>
        <link href="https://smashingmagazine.com/2021/10/real-time-multi-user-game/"/>
        <updated>2021-10-22T09:30:00.000Z</updated>
        <summary type="html"><![CDATA[This article highlights the process, technical decisions and lessons learned behind building the real-time game Autowuzzler. Learn how to share game state across multiple clients in real-time with Colyseus, do physics calculations with Matter.js, store data in Supabase.io and build the front-end with SvelteKit.]]></summary>
        <author>
            <name>hello@smashingmagazine.com (Martin Grubinger)</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Respecting Users’ Motion Preferences]]></title>
        <id>https://smashingmagazine.com/2021/10/respecting-users-motion-preferences/</id>
        <link href="https://smashingmagazine.com/2021/10/respecting-users-motion-preferences/"/>
        <updated>2021-10-21T10:30:00.000Z</updated>
        <summary type="html"><![CDATA[The `prefers-reduced-motion` media query has excellent support in all modern browsers going back a couple of years. In this article, Michelle Barker explains why there’s no reason not to use it today to make your sites more accessible.]]></summary>
        <author>
            <name>hello@smashingmagazine.com (Michelle Barker)</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Building The SSG I’ve Always Wanted: An 11ty, Vite And JAM Sandwich]]></title>
        <id>https://smashingmagazine.com/2021/10/building-ssg-11ty-vite-jam-sandwich/</id>
        <link href="https://smashingmagazine.com/2021/10/building-ssg-11ty-vite-jam-sandwich/"/>
        <updated>2021-10-20T11:00:00.000Z</updated>
        <summary type="html"><![CDATA[Back in January 2020, Ben Holmes set out to do what just about every web developer does each year: rebuild his personal site. In this article, he shares his story of how he set out to build his own build pipeline from absolute ground zero and created “Slinkity”.]]></summary>
        <author>
            <name>hello@smashingmagazine.com (Ben Holmes)</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Building An API With Gatsby Functions]]></title>
        <id>https://smashingmagazine.com/2021/10/building-api-gatsby-functions/</id>
        <link href="https://smashingmagazine.com/2021/10/building-api-gatsby-functions/"/>
        <updated>2021-10-19T14:00:00.000Z</updated>
        <summary type="html"><![CDATA[In this tutorial, Paul Scanlon explains how to build an API by using Gatsby Functions and what you need to keep in mind when deploying it to Gatsby Cloud.]]></summary>
        <author>
            <name>hello@smashingmagazine.com (Paul Scanlon)</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Smashing Podcast Episode 42 With Jeff Smith: What Is DevOps?]]></title>
        <id>https://smashingmagazine.com/2021/10/smashing-podcast-episode-42/</id>
        <link href="https://smashingmagazine.com/2021/10/smashing-podcast-episode-42/"/>
        <updated>2021-10-19T10:00:00.000Z</updated>
        <summary type="html"><![CDATA[In this episode, we’re talking about DevOps. What is it, and is it a string to add to your web development bow? Drew McLellan talks to expert Jeff Smith to find out.]]></summary>
        <author>
            <name>hello@smashingmagazine.com (Drew McLellan)</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Solving CLS Issues In A Next.js-Powered E-Commerce Website (Case Study)]]></title>
        <id>https://smashingmagazine.com/2021/10/nextjs-ecommerce-cls-case-study/</id>
        <link href="https://smashingmagazine.com/2021/10/nextjs-ecommerce-cls-case-study/"/>
        <updated>2021-10-18T14:00:00.000Z</updated>
        <summary type="html"><![CDATA[Cumulative Layout Shift is one of the hardest core web vital to debug. In this article, we go through different tools to investigate CLS, when to use them(and when not), and solutions to some of the CLS issues we faced in our Next.js-based e-commerce website.]]></summary>
        <author>
            <name>hello@smashingmagazine.com (Arijit Mondal)</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[A Simple But Effective Mental Health Routine For Programmers]]></title>
        <id>https://smashingmagazine.com/2021/10/effective-mental-health-routine-programmers/</id>
        <link href="https://smashingmagazine.com/2021/10/effective-mental-health-routine-programmers/"/>
        <updated>2021-10-16T10:00:00.000Z</updated>
        <summary type="html"><![CDATA[In this article, we’ll look at why taking care of our work-life balance is important, how to develop a simple and effective mental health routine, and the most common and efficient techniques you can use to make your custom routine.]]></summary>
        <author>
            <name>hello@smashingmagazine.com (Dave Oscar)</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[v1.11.3]]></title>
        <id>https://github.com/osmoscraft/osmosfeed/releases/tag/v1.11.3</id>
        <link href="https://github.com/osmoscraft/osmosfeed/releases/tag/v1.11.3"/>
        <updated>2021-10-16T00:01:47.000Z</updated>
        <summary type="html"><![CDATA[Fixed: broken links in documentation
Chore: Dependency updates
Thank you: @hirdot]]></summary>
        <author>
            <name>Release notes from osmosfeed</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Tips And Tricks For Evaluating UX/UI Designers]]></title>
        <id>https://smashingmagazine.com/2021/10/tips-tricks-evaluating-ux-ui-designers/</id>
        <link href="https://smashingmagazine.com/2021/10/tips-tricks-evaluating-ux-ui-designers/"/>
        <updated>2021-10-15T13:00:00.000Z</updated>
        <summary type="html"><![CDATA[Customers may start using your app because you offer a unique product, but user experience is what makes them stay. For that, you need excellent UX designers, and the know-how to spot them when hiring.]]></summary>
        <author>
            <name>hello@smashingmagazine.com (Nataliya Sambir)</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Smart CSS Solutions For Common UI Challenges]]></title>
        <id>https://smashingmagazine.com/2021/10/modern-css-solutions-for-common-problems/</id>
        <link href="https://smashingmagazine.com/2021/10/modern-css-solutions-for-common-problems/"/>
        <updated>2021-10-14T12:00:00.000Z</updated>
        <summary type="html"><![CDATA[Writing CSS has probably never been more fun and exciting than it is today. In this post we’ll take a look at common problems and use cases we all have to face in our work and how to solve them with modern CSS. If you’re interested, we’ve also just recently covered [CSS auditing tools](https://www.smashingmagazine.com/2021/03/css-auditing-tools/), [CSS generators](https://www.smashingmagazine.com/2021/03/css-generators/), [front-end boilerplates](https://www.smashingmagazine.com/2021/06/useful-frontend-boilerplates-starter-kits/) and [VS code extensions](https://www.smashingmagazine.com/2021/05/useful-vs-code-extensions-web-developers/) — you might find them useful, too.]]></summary>
        <author>
            <name>hello@smashingmagazine.com (Cosima Mielke)</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Upcoming Live Workshops On Front-End & UX (Oct 2021&ndash;Jan 2022)]]></title>
        <id>https://smashingmagazine.com/2021/10/new-smashing-online-workshops-oct-2021/</id>
        <link href="https://smashingmagazine.com/2021/10/new-smashing-online-workshops-oct-2021/"/>
        <updated>2021-10-13T11:00:00.000Z</updated>
        <summary type="html"><![CDATA[Do you like a good interface design challenge? What about accessibility testing and design systems? Or maybe Next.js and advanced CSS? With our new online workshops on front-end & design, we cover all of it. Ah, and [here's what our workshops are like](https://vimeo.com/616485526).]]></summary>
        <author>
            <name>hello@smashingmagazine.com (Iris Lješnjanin)</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Useful React APIs For Building Flexible Components With TypeScript]]></title>
        <id>https://smashingmagazine.com/2021/10/react-apis-building-flexible-components-typescript/</id>
        <link href="https://smashingmagazine.com/2021/10/react-apis-building-flexible-components-typescript/"/>
        <updated>2021-10-12T12:00:00.000Z</updated>
        <summary type="html"><![CDATA[React with JSX is a fantastic tool for making easy-to-use components. Typescript components make it an absolute pleasure for developers to integrate your components into their apps and explore your APIs. Learn about three lesser-known React APIs that can take your components to the next level, and help you build even better React Components in this article.]]></summary>
        <author>
            <name>hello@smashingmagazine.com (Gaurav Khanna)</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Bridging The Gap Between Designers And Developers]]></title>
        <id>https://smashingmagazine.com/2021/10/bridging-gap-between-designers-developers/</id>
        <link href="https://smashingmagazine.com/2021/10/bridging-gap-between-designers-developers/"/>
        <updated>2021-10-12T10:30:00.000Z</updated>
        <summary type="html"><![CDATA[UXPin has recently launched a new feature called “Merge”. This tool aims to break through the chasms of design and development, all while improving the agility and quality our teams expect. This new technology may cause some rethink on how the whole design team and engineering team collaborates.]]></summary>
        <author>
            <name>hello@smashingmagazine.com (Matthew Talebi)</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[The Autofill Dark Pattern]]></title>
        <id>https://smashingmagazine.com/2021/10/autofill-dark-pattern/</id>
        <link href="https://smashingmagazine.com/2021/10/autofill-dark-pattern/"/>
        <updated>2021-10-11T10:00:00.000Z</updated>
        <summary type="html"><![CDATA[A “dark pattern” is a deceptive UX pattern that tricks users into doing things they may not really want to do. In this article, Alvaro Montoro does a little experiment to find out how much privacy is taken away from users across three different browsers.]]></summary>
        <author>
            <name>hello@smashingmagazine.com (Alvaro Montoro)</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Composable CSS Animation In Vue With AnimXYZ]]></title>
        <id>https://smashingmagazine.com/2021/10/composable-css-animation-vue-animxyz/</id>
        <link href="https://smashingmagazine.com/2021/10/composable-css-animation-vue-animxyz/"/>
        <updated>2021-10-09T10:00:00.000Z</updated>
        <summary type="html"><![CDATA[Most animation libraries like GSAP and Framer Motion are built purely with JavaScript or TypeScript, unlike AnimXYZ, which is labelled “the first composable CSS animation toolkit”, built mainly with SCSS While a simple library, it can be used to achieve a lot of awesome animation on the web in a short amount of time and little code.]]></summary>
        <author>
            <name>hello@smashingmagazine.com (Ejiro Asiuwhu)</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Building A Static-First MadLib Generator With Portable Text And Netlify On-Demand Builder Functions]]></title>
        <id>https://smashingmagazine.com/2021/10/static-first-madlib-generator-portable-text-netlify-builder-functions/</id>
        <link href="https://smashingmagazine.com/2021/10/static-first-madlib-generator-portable-text-netlify-builder-functions/"/>
        <updated>2021-10-08T10:00:00.000Z</updated>
        <summary type="html"><![CDATA[In this article, we’ll be building an interactive fiction experience in which a user can insert words that match parts of speech given by the content creator. Let’s go!]]></summary>
        <author>
            <name>hello@smashingmagazine.com (Bryan Robinson)</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Freebie: COVID-19 Icon Set (56 Icons, AI, EPS, SVG, PNG)]]></title>
        <id>https://smashingmagazine.com/2021/10/freebie-coronavirus-icon-set/</id>
        <link href="https://smashingmagazine.com/2021/10/freebie-coronavirus-icon-set/"/>
        <updated>2021-10-07T09:00:00.000Z</updated>
        <summary type="html"><![CDATA[Every once in a while, we publish [freebies](https://www.smashingmagazine.com/category/freebies/) related to different occasions and themes. We hope that with this icon set, every designer will be able to find their own use case and contribute to saving lives. Free for personal and commercial use.]]></summary>
        <author>
            <name>hello@smashingmagazine.com (Anton Tyschenko)</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[A Guide To CSS Debugging]]></title>
        <id>https://smashingmagazine.com/2021/10/guide-debugging-css/</id>
        <link href="https://smashingmagazine.com/2021/10/guide-debugging-css/"/>
        <updated>2021-10-06T10:00:00.000Z</updated>
        <summary type="html"><![CDATA[Debugging in CSS means figuring out what might be the problem when you have unexpected layout results. We’ll look at a few categories bugs often fit into, see how we can evaluate the situation, and explore techniques that help prevent these bugs.]]></summary>
        <author>
            <name>hello@smashingmagazine.com (Stephanie Eckles)</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Local Testing A Serverless API (API Gateway And Lambda)]]></title>
        <id>https://smashingmagazine.com/2021/10/local-testing-serverless-api-gateway-lambda/</id>
        <link href="https://smashingmagazine.com/2021/10/local-testing-serverless-api-gateway-lambda/"/>
        <updated>2021-10-05T10:00:00.000Z</updated>
        <summary type="html"><![CDATA[Have you ever struggled with testing cloud services locally? Specifically, have you ever struggled with locally testing an API that uses API Gateway and Lambda, with the Serverless framework, on AWS? In this article, Tom Hudson shares a quick overview of how easy it is to quickly set up your project to test locally before deploying to AWS.]]></summary>
        <author>
            <name>hello@smashingmagazine.com (Tom Hudson)</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[How To Build An Expandable Accessible Gallery]]></title>
        <id>https://smashingmagazine.com/2021/10/build-expandable-accessible-gallery/</id>
        <link href="https://smashingmagazine.com/2021/10/build-expandable-accessible-gallery/"/>
        <updated>2021-10-04T10:00:00.000Z</updated>
        <summary type="html"><![CDATA[In this article, we’ll be looking at how to set up a gallery that is expandable as well as accessible with a few tips and tricks along the way. Let’s get started!]]></summary>
        <author>
            <name>hello@smashingmagazine.com (Silvestar Bistrović)</name>
        </author>
    </entry>
</feed>